{
    "version": "https://jsonfeed.org/version/1",
    "title": "且听风吟，御剑于心！ • All posts by \"ncnn部署\" tag",
    "description": "",
    "home_page_url": "https://leezhao415.github.io",
    "items": [
        {
            "id": "https://leezhao415.github.io/2022/02/20/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E4%BD%BF%E7%94%A8NCNN%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/",
            "url": "https://leezhao415.github.io/2022/02/20/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E4%BD%BF%E7%94%A8NCNN%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B/",
            "title": "【精华】使用NCNN在移动端部署深度学习模型",
            "date_published": "2022-02-20T15:07:43.000Z",
            "content_html": "<meta name=\"referrer\" content=\"no-referrer\">\n<hr>\n<p><strong>文章目录</strong></p>\n<!-- toc -->\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8ncnn%E5%9C%A8%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%83%A8%E7%BD%B2%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B\">使用 NCNN 在移动端部署深度学习模型</a>\n<ul>\n<li><a href=\"#%E4%B8%80-%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B%E6%A6%82%E8%A7%88\">一、整体流程概览</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%B0%86pth%E8%BD%AC%E6%8D%A2%E6%88%90onnx\">二、将 <code>*.pth</code>  转换成 onnx</a></li>\n<li><a href=\"#%E4%B8%89-%E7%BC%96%E8%AF%91ncnn%E6%A1%86%E6%9E%B6\">三、编译 NCNN 框架</a></li>\n<li><a href=\"#%E5%9B%9B-c%E8%B0%83%E7%94%A8%E5%92%8C%E5%B0%81%E8%A3%85\">四、C++ 调用和封装</a></li>\n<li><a href=\"#%E4%BA%94-%E7%BC%96%E5%86%99jni-c\">五、 编写 JNI C++</a></li>\n<li><a href=\"#%E5%85%AD-java%E8%B0%83%E7%94%A8\">六、java 调用</a></li>\n<li><a href=\"#%E4%B8%83-%E5%BA%94%E7%94%A8%E5%B1%82%E4%BD%BF%E7%94%A8\">七、 应用层使用</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<hr>\n<h4><span id=\"使用-ncnn-在移动端部署深度学习模型\"> 使用 NCNN 在移动端部署深度学习模型</span></h4>\n<h5><span id=\"一-整体流程概览\"> 一、整体流程概览</span></h5>\n<p>（1）训练模型，使用各种你熟悉的框架我用的是 pytorch<br>\n（2）将 <code>*.pth</code>  转换成 onnx， 优化 onnx 模型<br>\n（3）使用转换工具转换成可供 ncnn 使用的模型<br>\n（4）编译 ncnn 框架，并编写 c<ins> 代码调用上一步转换的模型，得到模型的输出结果，封装成可供调用的类<br>\n（5）使用 JNIC</ins> 调用上一步 C++ 封装的类，提供出接口<br>\n（6）在安卓端编写 java 代码再次封装一次，供应用层调用</p>\n<h5><span id=\"二-将-pth-转换成-onnx\"> 二、将 <code>*.pth</code>  转换成 onnx</span></h5>\n<p>使用 pytorch 自带的 torch.onnx 即可，需要 1.1 版本以上，这里有一点需要注意，torch 的 API 有些是 onnx 不支持的，如果转换的时候报错就把模型里的函数改成 onnx 支持的吧，有些文章里说这里可以设置 opset_version=12 来解决，但是这样的话在后面转换到 ncnn 或者 mnn 的时候造成转换失败，应该是 ncnn 还没支持到更高版本的 onnx 的原因。在最后输出之前有个 torch.randn () 函数，这里的参数格式是 [b,c, w,h] 这里也不是随便写的，b 固定是 1 了，你模型的输入通道是多少就写多少，后面的就是模型的输入，这里一旦固定了，后面在第 5 步的时候 c++ 里的输入也就固定了</p>\n<h6><span id=\"convet2onnxpy\"> </span></h6>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding:utf-8 -*-</span></span><br><span class=\"line\"><span class=\"comment\"># name: convert_onnx</span></span><br><span class=\"line\"><span class=\"comment\"># author: bqh</span></span><br><span class=\"line\"><span class=\"comment\"># datetime:2020/6/17 10:31</span></span><br><span class=\"line\"><span class=\"comment\"># =========================</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> torch</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">load_model</span>(<span class=\"params\">model, pretrained_path</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Loading pretrained model from &#123;&#125;&#x27;</span>.<span class=\"built_in\">format</span>(pretrained_path))</span><br><span class=\"line\">    pretrained_dict = torch.load(pretrained_path, map_location=<span class=\"keyword\">lambda</span> storage, loc: storage)    </span><br><span class=\"line\">    <span class=\"keyword\">if</span> <span class=\"string\">&quot;state_dict&quot;</span> <span class=\"keyword\">in</span> pretrained_dict.keys():</span><br><span class=\"line\">        pretrained_dict = remove_prefix(pretrained_dict[<span class=\"string\">&#x27;state_dict&#x27;</span>], <span class=\"string\">&#x27;module.&#x27;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        pretrained_dict = remove_prefix(pretrained_dict, <span class=\"string\">&#x27;module.&#x27;</span>)</span><br><span class=\"line\">    check_keys(model, pretrained_dict)</span><br><span class=\"line\">    model.load_state_dict(pretrained_dict, strict=<span class=\"literal\">False</span>)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> model</span><br><span class=\"line\">    </span><br><span class=\"line\">output_onnx = <span class=\"string\">&#x27;../weights/output.onnx&#x27;</span></span><br><span class=\"line\">raw_weights = <span class=\"string\">&#x27;../weights/model.pth&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># load weight</span></span><br><span class=\"line\">net = you_net()</span><br><span class=\"line\">net = load_model(net, raw_weights)</span><br><span class=\"line\">net.<span class=\"built_in\">eval</span>()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Finished loading model!&#x27;</span>)</span><br><span class=\"line\">device = torch.device(<span class=\"string\">&quot;cuda&quot;</span>)</span><br><span class=\"line\">net = net.to(device)</span><br><span class=\"line\"></span><br><span class=\"line\">input_names = [<span class=\"string\">&quot;input0&quot;</span>]</span><br><span class=\"line\">output_names = [<span class=\"string\">&quot;output0&quot;</span>]</span><br><span class=\"line\">inputs = torch.randn(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">300</span>, <span class=\"number\">300</span>).to(device)</span><br><span class=\"line\">torch_out = torch.onnx._export(net, inputs, output_onnx, export_params=<span class=\"literal\">True</span>, verbose=<span class=\"literal\">False</span>,keep_initializers_as_inputs=<span class=\"literal\">True</span>, input_names=input_names, output_names=output_names)</span><br></pre></td></tr></table></figure>\n<h6><span id=\"安装-onnx-简化工具\"> 安装 onnx 简化工具</span></h6>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install onnx-simplifier onnxruntime</span><br></pre></td></tr></table></figure>\n<h6><span id=\"简化-onnx-模型\"> 简化 onnx 模型</span></h6>\n<p>这一步一定要做，否则后面转 onnx 的时候会报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 -m onnxsim model.onnx model_sim.onnx</span><br></pre></td></tr></table></figure>\n<h5><span id=\"三-编译-ncnn-框架\"> 三、编译 NCNN 框架</span></h5>\n<p>主要参考 ncnn 官网的教程即可，windows 下编译同上一篇的 MNN 的编译都差不多，只有一点需要说明，官网的教程上有 vulkan-sdk 的安装然后打开 - DNCNN_VULKAN=ON 编译选项。我一切照做后编译出来的 ncnn.lib 在运行 ncnn::Extractor ex = Net-&gt;create_extractor (); 这个函数后的所有操作之后，返回的时候就报堆栈溢出错误，包括加载官网给出的例子全部报错；后来不 cmake 的时候这个编译选项不打开编译出来的 ncnn.lib 就一切正常了。可能是自己的问题，也没去深究。反正能用就 OK 了。我把编译出来的 ncnn.lib ncnn.a 和 linux 下的 onnx2ncnn 工具都放在了我的网盘里，不想被编译折磨的就直接去下吧。如果编译遇见问题，也可以给我留言，哈哈～<br>\n 说明：ncnnd.lib 是 windows 下的 debug 版本，ncnn.lib 是 release 版本，libncnn.a 是 linux 下的库文件，onnx2ncnn 是 linux 下的转换工具。<br>\n下载地址：NCNN 提取码：6cuc</p>\n<h5><span id=\"四-c-调用和封装\"> 四、C++ 调用和封装</span></h5>\n<h6><span id=\"说明\"> 说明</span></h6>\n<p>对于 vs 中 lib 库和 include 目录的配置就不赘述了，有不懂的之前的文章有提过，假定工程已经配置完成。大体的调用过程 NCNN 和 MNN 都差不多，先加载模型创建一个指向模型的指针，然后创建 session、创建用于处理输入的 tensor，将 input_tensor 送入 session，运行 session，最后得到网络的输出。如果对 C++ 比较熟悉的话，看着官网的教程比葫芦画瓢即可，只有一个地方需要说明就是对输出的获得。先看下我的代码和官网的代码再说为什么<br>\n<strong>我的输出</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// run net <span class=\"keyword\">and</span> get output</span><br><span class=\"line\">ncnn::Mat out, out1;</span><br><span class=\"line\">ret = ex.extract(<span class=\"string\">&quot;output0&quot;</span>, out);</span><br><span class=\"line\">ex.extract(<span class=\"string\">&quot;376&quot;</span>, out1);</span><br></pre></td></tr></table></figure>\n<p><strong>官网的例子输出</strong>：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ncnn::Mat out;</span><br><span class=\"line\">ex.extract(<span class=\"string\">&quot;detection_out&quot;</span>, out);</span><br></pre></td></tr></table></figure>\n<p>辣么问题来了，我的 &quot;output0&quot; 和 &quot;376&quot;、官网的 “detection_out” 都哪里来的？有两个地方可以得到，最简单的方法，使用 MNN 框架下的转换工具，在转换完成的时候会给出模型的输入和输出名称，直接拷贝即可</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;MNNConvert.exe -f ONNX --modelFile model.onnx --MNNModel slime.mnn  --bizCode biz</span><br><span class=\"line\"></span><br><span class=\"line\">MNNConverter Version: 0.2.1.5git - MNN @ 2018</span><br><span class=\"line\"></span><br><span class=\"line\">Start to Convert Other Model Format To MNN Model...</span><br><span class=\"line\">[17:49:58] :29: ONNX Model ir version: 6</span><br><span class=\"line\">Start to Optimize the MNN Net...</span><br><span class=\"line\">[17:49:58] :20: Inputs: input0</span><br><span class=\"line\">[17:49:58] :37: Outputs: output0, Type = Concat</span><br><span class=\"line\">[17:49:58] :37: Outputs: 376, Type = Softmax</span><br><span class=\"line\">Converted Done!</span><br></pre></td></tr></table></figure>\n<p>如果没有 MNN 的转换工具，在后面加载模型后单步跟一下，在 Net = new ncnn::Net () 变量中有个 blob 变量，在内存中查看一下，里面存的有模型的各个层的名称。代码中的 img_w,img_h 就是在第二步转换的时候你指定的 w,h。这里只写了核心调用函数，具体使用时还请自行添加一些辅助函数！</p>\n<h6><span id=\"c-代码\"> C++ 代码</span></h6>\n<p><strong>detection.h</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#pragma once</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#include &lt;opencv2/opencv.hpp&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stack&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &quot;net.h&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;stdio.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;algorithm&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;vector&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;opencv2/core/core.hpp&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;opencv2/opencv.hpp&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;fstream&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &quot;omp.h&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">struct bbox &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> x1;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> y1;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> x2;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> y2;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> s;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct box &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> cx;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> cy;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> sx;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> sy;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct ObjectInfo &#123;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> x1; //bbox的left</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> y1; //bbox的top</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> x2; //bbox的right</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> y2; //bbox的bottom</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> prob; //置信度</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ObjectDetection</span></span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">private:</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> _nms = <span class=\"number\">0.4</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">float</span> _threshold = <span class=\"number\">0.6</span>;</span><br><span class=\"line\">\tconst <span class=\"built_in\">float</span> mean_vals[<span class=\"number\">3</span>] = &#123; <span class=\"number\">104.</span>f, <span class=\"number\">117.</span>f, <span class=\"number\">123.</span>f &#125;;</span><br><span class=\"line\">\tconst <span class=\"built_in\">float</span> norm_vals[<span class=\"number\">3</span>] = &#123; <span class=\"number\">1.0</span> / <span class=\"number\">104.0</span>, <span class=\"number\">1.0</span> / <span class=\"number\">117.0</span>, <span class=\"number\">1.0</span> / <span class=\"number\">123.0</span> &#125;;</span><br><span class=\"line\">\tcv::Mat img;</span><br><span class=\"line\">\tncnn::Net *Net;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> img_w = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> img_h = <span class=\"number\">300</span>;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> numThread;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> detect_count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\tstatic inline <span class=\"built_in\">bool</span> cmp(bbox a, bbox b);</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tObjectDetection(std::string modelFolder, <span class=\"built_in\">int</span> num_thread);</span><br><span class=\"line\">\t~ObjectDetection();</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> Detect(unsigned char *inputImage, <span class=\"built_in\">int</span> inputw, <span class=\"built_in\">int</span> inputh, std::vector&lt;ObjectInfo &gt; &amp;obj);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<p><strong>detection.cpp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &quot;Detection.h&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;cmath&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">ObjectDetection::ObjectDetection(std::string modelFolder, <span class=\"built_in\">int</span> num_thread)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tNet = new ncnn::Net();</span><br><span class=\"line\">\tstd::string model_param = modelFolder + <span class=\"string\">&quot;Detect.param&quot;</span>;</span><br><span class=\"line\">\tstd::string model_bin = modelFolder + <span class=\"string\">&quot;Detect.bin&quot;</span>;</span><br><span class=\"line\">\tint ret = Net-&gt;load_param(model_param.c_str());</span><br><span class=\"line\">\tret = Net-&gt;load_model(model_bin.c_str());\t</span><br><span class=\"line\">\tnumThread = num_thread;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ObjectDetection::~ObjectDetection()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (Net != nullptr)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tdelete Net;</span><br><span class=\"line\">\t\tNet = nullptr;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">int</span> ObjectDetection::Detect(unsigned char *inputImage, <span class=\"built_in\">int</span> inputw, <span class=\"built_in\">int</span> inputh, std::vector&lt;ObjectInfo &gt; &amp;obj)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\t<span class=\"built_in\">int</span> ret = -<span class=\"number\">1</span>;\t</span><br><span class=\"line\">\tncnn::Mat <span class=\"keyword\">in</span> = ncnn::Mat::from_pixels_resize(inputImage, ncnn::Mat::PIXEL_BGR, inputw, inputh, img_w, img_h);</span><br><span class=\"line\">\t<span class=\"keyword\">in</span>.substract_mean_normalize(mean_vals, norm_vals);\t</span><br><span class=\"line\">\tncnn::Extractor ex = Net-&gt;create_extractor();\t\t</span><br><span class=\"line\">\tex.set_light_mode(true);</span><br><span class=\"line\">\tret = ex.<span class=\"built_in\">input</span>(<span class=\"string\">&quot;input0&quot;</span>, <span class=\"keyword\">in</span>);\t</span><br><span class=\"line\">\t// run net <span class=\"keyword\">and</span> get output</span><br><span class=\"line\">\tncnn::Mat out, out1;</span><br><span class=\"line\">\t// bbox的输出</span><br><span class=\"line\">\tret = ex.extract(<span class=\"string\">&quot;output0&quot;</span>, out);</span><br><span class=\"line\">\tex.extract(<span class=\"string\">&quot;376&quot;</span>, out1);</span><br><span class=\"line\"></span><br><span class=\"line\">\t// get result\t</span><br><span class=\"line\">\t<span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; out.h; ++i)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\t// 得到网络的具体输出</span><br><span class=\"line\">\t\tconst <span class=\"built_in\">float</span> *boxes = out.row(i);</span><br><span class=\"line\">\t\tconst <span class=\"built_in\">float</span> *scores = out1.row(i);</span><br><span class=\"line\">\t\t// 执行你自己的操作</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tstd::sort(total_box.begin(), total_box.end(), cmp);</span><br><span class=\"line\">\tNMS(total_box, _nms);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"五-编写-jni-c\"> 五、 编写 JNI C++</span></h5>\n<p>在 Android Studio 中配置 NDK，具体配置网上有很多教程我就不啰嗦了，假定 android strdio 的 jni c<ins> 环境已经配置完成。源码中的函数名的格式是 jni c</ins> 要求的，必须这种格式，根据实际情况修改，函数名中的 &quot;com_example_demokit_Detection&quot; 对应到 java 的应用中就是 &quot;com.example.demokit.Detection&quot; 这样就很好理解了。<br>\n<strong>native-lib.cpp</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">#include &lt;jni.h&gt;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;string&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#include &quot;Detection.h&quot;</span></span><br><span class=\"line\"><span class=\"comment\">#include &lt;android/log.h&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">extern <span class=\"string\">&quot;C&quot;</span> JNIEXPORT jlong JNICALL</span><br><span class=\"line\">Java_com_example_demokit_Detection_Create(JNIEnv *env, jobject instance, jstring path) &#123;</span><br><span class=\"line\">    char* _path;</span><br><span class=\"line\">    _path = (char*)env-&gt;GetStringUTFChars(path,0);</span><br><span class=\"line\">    Detection *phandle = new Detection(_path, <span class=\"number\">2</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (jlong)phandle;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">extern <span class=\"string\">&quot;C&quot;</span> JNIEXPORT jintArray JNICALL</span><br><span class=\"line\">Java_com_example_demokit_Detection_Detect(JNIEnv *env, jobject instance, jlong handle, jint campos, jint w, jint h, jbyteArray data_) &#123;</span><br><span class=\"line\">    Detection *gp = NULL;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (handle)</span><br><span class=\"line\">        gp = (Detection *)handle;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> nullptr;</span><br><span class=\"line\">    jbyte *data = env-&gt;GetByteArrayElements(data_, NULL);</span><br><span class=\"line\"></span><br><span class=\"line\">    std::vector&lt;ObjectInfo&gt; objects;</span><br><span class=\"line\">    gp-&gt;Detect((unsigned char*)data, w, h, objects);</span><br><span class=\"line\">    env-&gt;ReleaseByteArrayElements(data_, data, 0);</span><br><span class=\"line\">    jintArray jarr = env-&gt;NewIntArray(objects.size()*15+1);</span><br><span class=\"line\">    jint *arr = env-&gt;GetIntArrayElements(jarr, NULL);</span><br><span class=\"line\">    arr[<span class=\"number\">0</span>] = objects.size();</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; objects.size(); i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        arr[i*<span class=\"number\">5</span> + <span class=\"number\">1</span>] = objects[i].x1;</span><br><span class=\"line\">        arr[i*<span class=\"number\">5</span> + <span class=\"number\">2</span>] = objects[i].y1;</span><br><span class=\"line\">        arr[i*<span class=\"number\">5</span> + <span class=\"number\">3</span>] = objects[i].x2;</span><br><span class=\"line\">        arr[i*<span class=\"number\">5</span> + <span class=\"number\">4</span>] = objects[i].y2;</span><br><span class=\"line\">        arr[i*<span class=\"number\">5</span> + <span class=\"number\">5</span>] = objects[i].prob;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    env-&gt;ReleaseIntArrayElements(jarr, arr, 0);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> jarr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"六-java-调用\"> 六、java 调用</span></h5>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demokit;</span><br><span class=\"line\"></span><br><span class=\"line\">public class Detection &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.loadLibrary(<span class=\"string\">&quot;native-lib&quot;</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private long handle;</span><br><span class=\"line\">    public Detection(String path)&#123;</span><br><span class=\"line\">        handle = Create(path);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    public <span class=\"built_in\">int</span>[] Detect(<span class=\"built_in\">int</span> w, <span class=\"built_in\">int</span> h, byte[] data)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span>  Detect(handle, w, h, data);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    private native long Create(String path);</span><br><span class=\"line\">    private native <span class=\"built_in\">int</span>[] Detect(long handle, <span class=\"built_in\">int</span> w, <span class=\"built_in\">int</span> h, byte[] data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h5><span id=\"七-应用层使用\"> 七、 应用层使用</span></h5>\n<p>在应用层就可以直接调用上面的 java 类啦，搞定～</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">package com.example.demokit;</span><br><span class=\"line\"><span class=\"keyword\">import</span> android.graphics.Point;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.ArrayList;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.Arrays;</span><br><span class=\"line\"><span class=\"keyword\">import</span> java.util.<span class=\"type\">List</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">public class DetectTool &#123;</span><br><span class=\"line\">    private Detection mDetection;</span><br><span class=\"line\">    private static final <span class=\"built_in\">int</span> DATA_LENGTH = <span class=\"number\">5</span>; // 矩形框坐标<span class=\"number\">2</span>个，每个具有x,y两个值；置信度<span class=\"number\">1</span>个；</span><br><span class=\"line\"></span><br><span class=\"line\">    public DetectTool(String dect_model_dir)&#123;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * @dect_model_dir: 检测模型所在的目录路径</span><br><span class=\"line\">         */</span><br><span class=\"line\">        mDetection = new Detection(dect_model_dir);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private ObjectInfo ArrayAnalysis(<span class=\"built_in\">int</span>[] src_array)&#123;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * 对输入的数组进行解析，返回ObjectInfo对象</span><br><span class=\"line\">         * @src_array: 具有DATA_LENGTH所示结构的数组</span><br><span class=\"line\">         */</span><br><span class=\"line\">        ObjectInfo obj_info = new ObjectInfo();</span><br><span class=\"line\"></span><br><span class=\"line\">        Point[] pointFaceBox = new Point[<span class=\"number\">2</span>];</span><br><span class=\"line\">        // face_bbox 坐标</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">2</span>; i++) &#123;</span><br><span class=\"line\">            Point point = new Point();</span><br><span class=\"line\">            point.x = src_array[<span class=\"number\">2</span>*i];</span><br><span class=\"line\">            point.y = src_array[<span class=\"number\">2</span>*i+<span class=\"number\">1</span>];</span><br><span class=\"line\">            pointFaceBox[i] = point;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        // 置信度</span><br><span class=\"line\">        obj_info.setProb(src_array[<span class=\"number\">4</span>]);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj_info ;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public <span class=\"type\">List</span>&lt;ObjectInfo&gt; GetObjectInfo(<span class=\"built_in\">int</span> width, <span class=\"built_in\">int</span> height, byte[] data)&#123;</span><br><span class=\"line\">        /**</span><br><span class=\"line\">         * @width：图片宽度</span><br><span class=\"line\">         * @height：图片高度</span><br><span class=\"line\">         * @data：图片的字节流</span><br><span class=\"line\">         */</span><br><span class=\"line\">        <span class=\"built_in\">int</span>[] obj= mDetection.Detect(width, height, data);</span><br><span class=\"line\">        <span class=\"type\">List</span>&lt;ObjectInfo&gt; obj_list = new ArrayList&lt;&gt;();</span><br><span class=\"line\">        <span class=\"built_in\">int</span> obj_count = obj[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"built_in\">int</span> i = <span class=\"number\">0</span>; i &lt; obj_count ; i++)&#123;</span><br><span class=\"line\">            <span class=\"built_in\">int</span>[] obj_array = Arrays.copyOfRange(obj, i*DATA_LENGTH + <span class=\"number\">1</span>, (i + <span class=\"number\">1</span>) * DATA_LENGTH+<span class=\"number\">1</span>);</span><br><span class=\"line\">            ObjectInfo obj_info = this.ArrayAnalysis(obj_array);</span><br><span class=\"line\">            obj_list.add(obj_info);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> obj_list;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>————————————————<br>\n 版权声明：本文为 CSDN 博主「zzubqh103」的原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接及本声明。<br>\n原文链接：<a href=\"https://blog.csdn.net/qq_36810544/article/details/106911025\">https://blog.csdn.net/qq_36810544/article/details/106911025</a></p>\n",
            "tags": [
                "人工智能",
                "NCNN部署"
            ]
        }
    ]
}