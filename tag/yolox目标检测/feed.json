{
    "version": "https://jsonfeed.org/version/1",
    "title": "且听风吟，御剑于心！ • All posts by \"yolox目标检测\" tag",
    "description": "",
    "home_page_url": "https://leezhao415.github.io",
    "items": [
        {
            "id": "https://leezhao415.github.io/2021/12/12/%E4%BD%BF%E7%94%A8YoloX%E8%AE%AD%E7%BB%83%E8%87%AA%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/",
            "url": "https://leezhao415.github.io/2021/12/12/%E4%BD%BF%E7%94%A8YoloX%E8%AE%AD%E7%BB%83%E8%87%AA%E5%BB%BA%E6%95%B0%E6%8D%AE%E9%9B%86/",
            "title": "使用YoloX训练自建数据集",
            "date_published": "2021-12-12T10:45:17.000Z",
            "content_html": "<meta name=\"referrer\" content=\"no-referrer\">\n<hr>\n<p><strong>文章目录</strong></p>\n<!-- toc -->\n<ul>\n<li><a href=\"#1-yolox%E4%BB%A3%E7%A0%81%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA\">1 Yolox 代码环境搭建</a>\n<ul>\n<li><a href=\"#11-%E4%B8%8B%E8%BD%BDyolox%E4%BB%A3%E7%A0%81\">1.1 下载 Yolox 代码</a></li>\n<li><a href=\"#12-%E6%90%AD%E5%BB%BA%E6%B5%8B%E8%AF%95%E7%8E%AF%E5%A2%83\">1.2 搭建测试环境</a></li>\n<li><a href=\"#13-%E4%BB%A3%E7%A0%81%E6%B5%8B%E8%AF%95demo%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95\">1.3 代码测试：Demo 效果测试</a>\n<ul>\n<li><a href=\"#131-%E4%B8%8B%E8%BD%BDyolox_spth%E6%96%87%E4%BB%B6\">1.3.1 下载 Yolox_s.pth 文件</a></li>\n<li><a href=\"#132-demo%E6%B5%8B%E8%AF%95\">1.3.2 Demo 测试</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#2-yolox%E8%87%AA%E6%9C%89%E6%95%B0%E6%8D%AE%E9%9B%86%E8%AE%AD%E7%BB%83\">2 Yolox 自有数据集训练</a>\n<ul>\n<li><a href=\"#21-%E6%95%B0%E6%8D%AE%E9%9B%86%E5%87%86%E5%A4%87%E6%A0%87%E6%B3%A8%E6%95%B0%E6%8D%AE\">2.1 数据集准备：标注数据</a></li>\n<li><a href=\"#22-%E6%95%B0%E6%8D%AE%E9%9B%86%E5%87%86%E5%A4%87%E8%AE%AD%E7%BB%83%E9%AA%8C%E8%AF%81%E9%9B%86%E5%88%92%E5%88%86\">2.2 数据集准备：训练 &amp; 验证集划分</a>\n<ul>\n<li><a href=\"#221-%E6%95%B0%E6%8D%AE%E9%9B%86%E4%BB%8B%E7%BB%8D\">2.2.1 数据集介绍</a></li>\n<li><a href=\"#222-%E6%A8%A1%E4%BB%BFvoc%E6%A0%BC%E5%BC%8F%E6%8E%92%E5%B8%83\">2.2.2 模仿 VOC 格式排布</a></li>\n<li><a href=\"#223-%E5%88%92%E5%88%86%E8%AE%AD%E7%BB%83%E9%9B%86%E5%92%8C%E9%AA%8C%E8%AF%81%E9%9B%86\">2.2.3 划分训练集和验证集</a></li>\n</ul>\n</li>\n<li><a href=\"#23-%E8%AE%AD%E7%BB%83%E5%87%86%E5%A4%87%E4%BF%AE%E6%94%B9%E8%AE%AD%E7%BB%83%E9%85%8D%E7%BD%AE%E5%8F%82%E6%95%B0\">2.3 训练准备：修改训练配置参数</a>\n<ul>\n<li><a href=\"#231-%E4%BF%AE%E6%94%B9%E7%B1%BB%E5%88%AB%E6%A0%87%E7%AD%BE%E5%92%8C%E6%95%B0%E9%87%8F\">2.3.1 修改类别标签和数量</a></li>\n<li><a href=\"#232-%E4%BF%AE%E6%94%B9%E8%AE%AD%E7%BB%83%E9%9B%86%E4%BF%A1%E6%81%AF\">2.3.2 修改训练集信息</a></li>\n<li><a href=\"#233-%E4%BF%AE%E6%94%B9%E9%AA%8C%E8%AF%81%E9%9B%86%E4%BF%A1%E6%81%AF\">2.3.3 修改验证集信息</a></li>\n<li><a href=\"#234-%E4%BF%AE%E6%94%B9%E4%B8%8D%E5%90%8C%E7%9A%84%E7%BD%91%E7%BB%9C%E7%BB%93%E6%9E%84\">2.3.4 修改不同的网络结构</a></li>\n<li><a href=\"#235-%E4%BF%AE%E6%94%B9%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3\">2.3.5 修改其他相关</a></li>\n</ul>\n</li>\n<li><a href=\"#24-yolox%E8%AE%AD%E7%BB%83%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">2.4 Yolox 训练及常见问题</a>\n<ul>\n<li><a href=\"#241-%E5%BC%80%E5%A7%8B%E8%AE%AD%E7%BB%83\">2.4.1 开始训练</a></li>\n<li><a href=\"#242-%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98\">2.4.2 常见问题</a></li>\n</ul>\n</li>\n<li><a href=\"#25-%E8%AE%AD%E7%BB%83%E6%95%88%E6%9E%9C%E6%B5%8B%E8%AF%95\">2.5 训练效果测试</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<hr>\n<p>随着旷视科技发布 Yolox 的论文和代码后，Yolox 得到了广泛的关注。但由于训练代码和之前的 Yolov3、Yolov4、Yolov5 的代码都不相同。且代码中的训练案例，以 COCO 和 VOC 格式为基准，和平时大家标注的文件，并不是完全相同的格式。而且训练自有数据的讲解流程，很多人不太熟悉。</p>\n<p>因此本文以自有标注的人头数据集为案例，一步步和大家一起学习，整体的训练和测试全流程。</p>\n<h2><span id=\"1-yolox-代码环境搭建\"> 1 Yolox 代码环境搭建</span></h2>\n<p>在 Yolox 代码训练之前，我们先下载 Yolox 代码，将测试环境搭建起来。</p>\n<p>测试的 Demo 跑通了，训练的环境也就没问题了。</p>\n<h3><span id=\"11-下载-yolox-代码\"> 1.1 下载 Yolox 代码</span></h3>\n<p>Yolox 代码链接：<a href=\"https://github.com/Megvii-BaseDetection/YOLOX\">https://github.com/Megvii-BaseDetection/YOLOX</a></p>\n<h3><span id=\"12-搭建测试环境\"> 1.2 搭建测试环境</span></h3>\n<p>电脑系统为 Ubuntu 18.04 版本。</p>\n<p>而 Yolox 测试环境的搭建，其实在代码中的，README.md 中 “Quick Start” 这部分。</p>\n<p>首先为了测试环境更加独立，以 conda 为例，新建一个 Yolox 环境。</p>\n<p><strong>（1）新建一个 Conda 环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">conda create -n Yolox_3.7 python=3.7</span><br></pre></td></tr></table></figure>\n<p><strong>（2）进入 Conda 环境</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">source</span> activate Yolox_3.7    <span class=\"comment\"># 进入Conda环境中，并到下载好的YOLOX文件夹下。</span></span><br></pre></td></tr></table></figure>\n<p><strong>（3）安装代码依赖的库文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install -U pip &amp;&amp; pip3 install -r requirements.txt</span><br></pre></td></tr></table></figure>\n<p><strong>（4）通过 setup.py 安装一些库文件</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 setup.py develop</span><br></pre></td></tr></table></figure>\n<p><strong>（5）下载 apex 文件并安装 apex</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git <span class=\"built_in\">clone</span> https://github.com/NVIDIA/apex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">cd</span> apex</span><br><span class=\"line\"></span><br><span class=\"line\">sudo pip3 install -v --disable-pip-version-check --no-cache-dir --global-option=<span class=\"string\">&quot;--cpp_ext&quot;</span> --global-option=<span class=\"string\">&quot;--cuda_ext&quot;</span> ./ </span><br></pre></td></tr></table></figure>\n<p><strong>（6）下载 pycocotools</strong></p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pip3 install cython</span><br><span class=\"line\"></span><br><span class=\"line\">pip3 install <span class=\"string\">&#x27;git+https://github.com/cocodataset/cocoapi.git#subdirectory=PythonAPI&#x27;</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"13-代码测试demo-效果测试\"> 1.3 代码测试：Demo 效果测试</span></h3>\n<h4><span id=\"131-下载-yolox_spth-文件\"> 1.3.1 下载 Yolox_s.pth 文件</span></h4>\n<p>搭建好环境后，就可以下载官方的预训练模型，对图片进行测试了。</p>\n<p>预训练权重的下载链接，在官方代码的说明中。</p>\n<p>我们先下载 Yolox_s.pth 文件，尝试测试效果。</p>\n<p><a href=\"https://github.com/Megvii-BaseDetection/YOLOX/blob/main/README.md\">https://github.com/Megvii-BaseDetection/YOLOX/blob/main/README.md</a></p>\n<p>下载好 yolox_s.pth.tar 后，放到 YOLOX 代码的根目录下。</p>\n<h4><span id=\"132-demo-测试\"> 1.3.2 Demo 测试</span></h4>\n<p>使用代码中自带的图片，进行 Demo 测试。</p>\n<p>在 YOLOX 文件夹的终端页面输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 tools/demo.py image -n yolox-s -c yolox_s.pth.tar --path assets/dog.jpg --conf 0.3 --nms 0.5 --tsize 640 --save_result --device [gpu]</span><br></pre></td></tr></table></figure>\n<p>YOLOX 的代码中，会新建一个 YOLOX_outputs 文件夹，在其中的 yolox_s/vis_res/，可以看到带有检测效果的图片。</p>\n<p>到此 Yolox 的测试环境，以及测试效果都实现了，下面我们再进行 Yolox 的自有数据集训练。</p>\n<h2><span id=\"2-yolox-自有数据集训练\"> 2 Yolox 自有数据集训练</span></h2>\n<h3><span id=\"21-数据集准备标注数据\"> 2.1 数据集准备：标注数据</span></h3>\n<p>在数据集中，大白采用教室场景下的一个人头数据集，和大家一起尝试整个流程。</p>\n<p>① 标注的工具：采用 Labelimg 标注软件</p>\n<p>② 标注的图片：3000 张人头图片</p>\n<p>③ 标签的类别：head。</p>\n<p>④ 下载链接：</p>\n<p>​\tPartA of SCUT-HEAD [<a href=\"https://drive.google.com/open?id=1DWZHnmcOR8H9adXRRMV_DaOLCnBEcMLi\">Google Drive]</a>[<a href=\"https://pan.baidu.com/s/19IyPWLpdY3iEjgucyWMjQQ\">Baidu Drive]</a></p>\n<p>PartB of SCUT-HEAD [<a href=\"https://drive.google.com/open?id=1LZ_KlTPStDEcqycfqUkDkqQ-aNMMC3cl\">Google Drive]</a> [<a href=\"https://pan.baidu.com/s/1CASxJBkjKoW3_yO8OVKBvQ\">Baidu Drive]</a></p>\n<h3><span id=\"22-数据集准备训练-amp-验证集划分\"> 2.2 数据集准备：训练 &amp; 验证集划分</span></h3>\n<h4><span id=\"221-数据集介绍\"> 2.2.1 数据集介绍</span></h4>\n<p>当下载好人头数据集后，可以看到 head 的数据集文件夹，数据集只有一个标签：head（人头）。</p>\n<p>进入 head 文件夹中，其中包含两个文件夹：</p>\n<p>① JPEGImages 文件夹：数据集的图片</p>\n<p>② Annotations 文件夹：与图片对应的所有 xml 文件。</p>\n<p>我们前面说明，总共有 3000 张图片，即有对应的 3000 个 xml 文件。</p>\n<h4><span id=\"222-模仿-voc-格式排布\"> 2.2.2 模仿 VOC 格式排布</span></h4>\n<p>Yolox 的代码中有 VOC、和 COCO 两个数据集加载的格式，这里大白主要演示 VOC 加载的方式。</p>\n<p>那么我们首先看一下 VOC 格式的分布：</p>\n<p>在 VOC 这些文件夹中，我们主要用到：</p>\n<p>① JPEGImages 文件夹：数据集图片</p>\n<p>② Annotations 文件夹：与图片对应的 xml 文件</p>\n<p>③ ImageSets/Main 文件夹：将数据集分为训练集和验证集，因此产生的 train.txt 和 val.txt。</p>\n<p>从 Voc 的文件夹排布，和 head 的文件夹排布，可以看出：还缺少一个 ImageSets/Main 文件夹。</p>\n<p>因此在 head 文件夹中，新建一个 ImageSets 文件集，再在其中新建一个 Main 子文件夹。</p>\n<p>即得到下图这样的文件夹结构：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--head</span><br><span class=\"line\">  |--Annotations</span><br><span class=\"line\">  |--ImageSets</span><br><span class=\"line\">     |--Main</span><br><span class=\"line\">  |---JPEGImages</span><br></pre></td></tr></table></figure>\n<h4><span id=\"223-划分训练集和验证集\"> 2.2.3 划分训练集和验证集</span></h4>\n<p>因为自有标注好的图片数据，都是放在一起的。</p>\n<p>而训练过程中，需要划分为训练集和验证集。</p>\n<p>因此还需要编写脚本，将数据集分为训练集和验证集，并且生成对应的 train.txt，和 val.txt，放在 Main 文件夹中。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 对head文件夹进行拆分，分为train.txt和val.txt</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\"></span><br><span class=\"line\">image_path = <span class=\"string\">&quot;JPEGImages/&quot;</span></span><br><span class=\"line\">xmls_path = <span class=\"string\">&quot;Annotations/&quot;</span></span><br><span class=\"line\">train_val_txt_path = <span class=\"string\">&quot;ImageSets/Main/&quot;</span></span><br><span class=\"line\">val_percent = <span class=\"number\">0.1</span></span><br><span class=\"line\"></span><br><span class=\"line\">images_list = os.listdir(images_path)</span><br><span class=\"line\">random.shuffle(images_list)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 划分训练集和验证集的数量</span></span><br><span class=\"line\">train_images_count = <span class=\"built_in\">int</span>((<span class=\"number\">1</span>-val_percent)*<span class=\"built_in\">len</span>(images_list))</span><br><span class=\"line\">val_images_count = <span class=\"built_in\">int</span>(val_percent*<span class=\"built_in\">len</span>(images_list))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成训练集的train.txt文件</span></span><br><span class=\"line\">train_txt = <span class=\"built_in\">open</span>(os.path.join(train_val_txt_path,<span class=\"string\">&quot;train.txt&quot;</span>),<span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">train_count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(train_images_count):</span><br><span class=\"line\">    text = images_list[i].split(<span class=\"string\">&quot;.jpg&quot;</span>)[<span class=\"number\">0</span>] + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    train_txt.write(text)</span><br><span class=\"line\">    train_count +=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;train_count:&quot;</span> + <span class=\"built_in\">str</span>(train_count))</span><br><span class=\"line\">train_txt.close()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 生成验证集的val.txt文件</span></span><br><span class=\"line\">val_txt = <span class=\"built_in\">open</span>(os.path.join(train_val_txt_path,<span class=\"string\">&quot;val.txt&quot;</span>),<span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">val_count = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(val_images_count):</span><br><span class=\"line\">    text = images_list[train_images_count + i].split(<span class=\"string\">&quot;.jpg&quot;</span>)[<span class=\"number\">0</span>] + <span class=\"string\">&quot;\\n&quot;</span></span><br><span class=\"line\">    val_txt.write(text)</span><br><span class=\"line\">    val_count+=<span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;val_count:&quot;</span> + <span class=\"built_in\">str</span>(val_count))</span><br><span class=\"line\">val_txt.close()</span><br></pre></td></tr></table></figure>\n<p>下载好代码后，将脚本文件 train_val_data_split.py 放在 JPEGImages 同路径下：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--Annotations</span><br><span class=\"line\">|--ImageSets</span><br><span class=\"line\">|--JPEGImages</span><br><span class=\"line\">train_val_data_split.py</span><br></pre></td></tr></table></figure>\n<p>并进行运行后，在 ImageSets/Main 文件夹下，就会生成对应的 train.txt 和 val.txt。</p>\n<p>主要注意的是：代码中，训练集和验证集的比例，为 9：1，大家也可以自行调整。</p>\n<h3><span id=\"23-训练准备修改训练配置参数\"> 2.3 训练准备：修改训练配置参数</span></h3>\n<h4><span id=\"231-修改类别标签和数量\"> 2.3.1 修改类别标签和数量</span></h4>\n<p>① 修改类别标签</p>\n<p>因此前面自有的数据集只有一个类别，head。</p>\n<p>将 yolox/data/datasets/voc_classes.py 中的标签信息，进行修改。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">VOC_CLASSES = (</span><br><span class=\"line\">\t<span class=\"string\">&quot;head&quot;</span>,</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n<p>注意：类别后面都要加逗号，例如 “head” 后面加了一个逗号 “，”。</p>\n<p>② 修改类别数量</p>\n<p>（1）修改 exps/example/yolox_voc/yolox_voc_s.py 中的 self.num_classes</p>\n<p>​        因为只有 head 一种，所以 self.num_classes=1。</p>\n<p>（2）修改 yolox/exp/yolox_base.py 中的 self.num_classes</p>\n<p>​        将 self.num_classes=80 修改为 1。</p>\n<h4><span id=\"232-修改训练集信息\"> 2.3.2 修改训练集信息</span></h4>\n<p>（1）修改 exps/example/yolox_voc/yolox_voc_s.py 中的 VOCDetection。</p>\n<p>因为是自己的数据集，所以修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data_dir = <span class=\"string\">&quot;/mnt/data/head/&quot;</span></span><br><span class=\"line\">image_sets=[(<span class=\"string\">&#x27;train&#x27;</span>)],</span><br></pre></td></tr></table></figure>\n<p>data_dir 是前面 2.2 节中 head 的绝对路径，images_sets 修改为 train。</p>\n<p>此外，max_labels，表示图片最多的目标数量，这里大白因为使用的是人头，数量较多，所以改为 100。</p>\n<p>（2）修改 yolox/data/datasets/voc.py 中，VOCDection 函数中的读取 txt 文件。</p>\n<p>因为自有的数据集，没有 year 年代的信息，所以修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">self._year = year</span><br><span class=\"line\">rootpath = os.path.join(self.root, <span class=\"string\">&quot;VOC&quot;</span> + year)</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">rootpath = self.root</span><br></pre></td></tr></table></figure>\n<h4><span id=\"233-修改验证集信息\"> 2.3.3 修改验证集信息</span></h4>\n<p>修改 exps/example/yolox_voc/yolox_voc_s.py 中的 get_eval_loader 函数。</p>\n<p>因为是自己的验证数据集，所以修改为：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">data_dir = os.path.join(get_yolox_datadir(),<span class=\"string\">&quot;VOCdevkit&quot;</span>),</span><br><span class=\"line\">image_sets = [(<span class=\"string\">&#x27;2007&#x27;</span>,<span class=\"string\">&#x27;test&#x27;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">data_dir = <span class=\"string\">&quot;/mnt/data/head/&quot;</span></span><br><span class=\"line\">image_sets = [(<span class=\"string\">&#x27;val&#x27;</span>)]</span><br></pre></td></tr></table></figure>\n<p>data_dir 是前面 2.2 节中 head 的绝对路径，images_sets 修改为 val。</p>\n<h4><span id=\"234-修改不同的网络结构\"> 2.3.4 修改不同的网络结构</span></h4>\n<p>以<strong> Yolox_s 网络</strong>为例，比如在 <code>exps/default/yolox_s.py</code>  中，self.depth= <code>0.33</code> ，self.width= <code>0.5</code> 。和 Yolov5 中的不同网络调用方式一样。</p>\n<p>为了统一不同的网络结构，继续修改 <code>exps/example/yolox_voc/yolox_voc_s.py</code>  中的，self.depth 和 self.width。</p>\n<p>再修改 <code>yolox/exp/yolox_base.py</code>  中的，self.depth 和 self.width。</p>\n<h4><span id=\"235-修改其他相关\"> 2.3.5 修改其他相关</span></h4>\n<p>（1）删除 year 等信息</p>\n<p>因为自有数据集中，没有 year 信息，所以需要删除。</p>\n<p>即修改 yolox/data/datasets/voc.py 中，_get_voc_results_file_template 函数。</p>\n<p>所以将第三行的 year 等删除，如下图所示：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">filedir = os.path.join(self.root, <span class=\"string\">&quot;results&quot;</span>, <span class=\"string\">&quot;VOC&quot;</span> + self._year, <span class=\"string\">&quot;Main&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">filedir = os.path.join(self.root, <span class=\"string\">&quot;results&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在训练过程中，在原始的 head 数据集中，会生成一个 results 的文件夹，保存历史信息。</p>\n<p>（２）修改验证 epoch 的数量</p>\n<p>目前代码中是训练迭代 10 个 epoch，再对验证集做１次验证，但大白想每迭代 1 个 epoch，即做一个验证，及时看到效果。</p>\n<p>参数在 yolox/exp/yolox_base.py 的 class Exp 中：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将</span><br><span class=\"line\">self.print_interval = 10</span><br><span class=\"line\">self.eval_interval = 10</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">self.print_interval = 1</span><br><span class=\"line\">self.eval_interval = 1</span><br></pre></td></tr></table></figure>\n<p>设置为每迭代一个 epoch，即使用验证集验证一次。</p>\n<p>（３）修改验证时的相关信息</p>\n<p>主要对读取验证信息的相关代码进行调整，代码在 yolox/data/datasets/voc.py 中_do_python_eval 函数中。</p>\n<p>① 因为自有数据集没有 year 信息，所以将其中的 rootpath 和 name：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">rootpath = os.path.join(self.root, <span class=\"string\">&quot;VOC&quot;</span> + self._year)</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">rootpath = self.root</span><br></pre></td></tr></table></figure>\n<p>② 因为没有 year 信息，所以将其中的 cachedir:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">cachedir = os.path.join(self.root, <span class=\"string\">&quot;annotations_cache&quot;</span>, <span class=\"string\">&quot;VOC&quot;</span> + self._year,name)</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">cachedir = os.path.join(self.root, <span class=\"string\">&quot;annotations_cache&quot;</span>)</span><br></pre></td></tr></table></figure>\n<p>在训练过程中，在原始的 head 数据集中，会生成一个 annotations_cache 的文件夹，保存历史信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|--Annotations</span><br><span class=\"line\">|--annotations_cache</span><br><span class=\"line\">|--ImageSets</span><br><span class=\"line\">|--JPEGImages</span><br><span class=\"line\">|--results</span><br></pre></td></tr></table></figure>\n<p>③ 因为没有 year 信息，所以修改 use_07_metric 的信息。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">use_07_metric = True <span class=\"keyword\">if</span> int(self._year) &lt; 2010 <span class=\"keyword\">else</span> False</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">use_07_metric = True</span><br></pre></td></tr></table></figure>\n<h3><span id=\"24-yolox-训练及常见问题\"> 2.4 Yolox 训练及常见问题</span></h3>\n<h4><span id=\"241-开始训练\"> 2.4.1 开始训练</span></h4>\n<p>（1）终端训练</p>\n<p>将下载好的 yolox_s.pth.tar 放到 YOLOX 文件夹中，打开终端，在终端中输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 tools/train.py -f exps/example/yolox_voc/yolox_voc_s.py -d 0 -b 64  -c yolox_s.pth.tar</span><br></pre></td></tr></table></figure>\n<p>（2）Pycharm 训练</p>\n<p>代码运行时，常常需要 Debug 的方式，进行调试执行。</p>\n<p>所以可以修改 train.py 的几个配置参数，采用 Debug 或者 Run 的方式进行执行。</p>\n<p>主要需要修改以下参数：</p>\n<p>① batch-size</p>\n<p>根据自己机器的配置，设置 batch-size 的参数，比如大白这里设置的 64。</p>\n<p>② devices 参数</p>\n<p>如果 GPU 服务器只有 1 张卡，将 devices 的 default 修改为 0。</p>\n<p>③ exp_file 参数</p>\n<p>将 exp_file 的 default 修改为 yolox_voc_s.py 的路径（如代码版本更新，可重置路径）。</p>\n<p>④ ckpt 参数</p>\n<p>如果使用预训练权重，将 ckpt 的 default 修改为模型权重的路径。</p>\n<h4><span id=\"242-常见问题\"> 2.4.2 常见问题</span></h4>\n<p>在运行 tools/train.py 时，可能会出现以下问题，如没有可以跳过：</p>\n<p>问题 1：apex 路径报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">File <span class=\"string\">&quot;/mnt/code/YOLOX/yolox/core/trainer.py&quot;</span>, line9, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">\tfrom apex import amp </span><br><span class=\"line\">ImportError: cannot import name <span class=\"string\">&#x27;amp&#x27;</span> from <span class=\"string\">&#x27;apex&#x27;</span>(unknown location)</span><br></pre></td></tr></table></figure>\n<p>因为 YOLOX 内的 apex 文件夹，还有一个 apex 文件夹，所以引用路径有点问题。</p>\n<p>解决方法：</p>\n<p>这时在每个调用 apex 的地方，添加一个 apex. 即可。</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">将：</span><br><span class=\"line\">from apex import amp</span><br><span class=\"line\"></span><br><span class=\"line\">修改为：</span><br><span class=\"line\">from apex.apex import amp</span><br></pre></td></tr></table></figure>\n<p>需要注意的是，不少的地方，需要添加 apex.，大概有 10 处左右，修改完之后，错误即可解决。</p>\n<p>问题 2：probubuf 报错</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from google.protobuf.internal import enum_type_wrapper</span><br><span class=\"line\">ModuleNotFoundError: No module named <span class=\"string\">&#x27;google.protobuf.internal&#x27;</span></span><br></pre></td></tr></table></figure>\n<p>解决方法：</p>\n<p>（1）pip3 uninsall probobuf</p>\n<p>（2）pip3 install google</p>\n<p>（3）pip3 install protobuf</p>\n<h3><span id=\"25-训练效果测试\"> 2.5 训练效果测试</span></h3>\n<p>在上面训练好模型后，我们可以得到一个精度测试最优的网络模型：</p>\n<p>① best_ckpt.pth.tar：在 tools/YOLOX_outputs/yolox_voc_s 文件夹中。</p>\n<p>② 为了方便测试，再挑选一张人头测试图片，放到 assets 文件夹中。</p>\n<p>在 YOLOX 文件夹的终端页面输入：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python3 tools/demo.py image -n yolox-s -c tools/YOLOX_outputs/yolox_voc_s/best_ckpt.pth.tar --path assets/head.jpg --conf 0.3 --nms 0.5 --tsize 640 --save_result --device [gpu] </span><br></pre></td></tr></table></figure>\n<p>在 YOLOX_outputs/yolox_s/vis_res，根据时间新建的文件夹下，可以看到检测出的效果图片。</p>\n<p>** 注意：** 如最后的类别都显示 person，将 coco_classes.py 中的类别，也修改为 “head”。</p>\n",
            "tags": [
                "人工智能",
                "YOLOX目标检测"
            ]
        },
        {
            "id": "https://leezhao415.github.io/2021/12/12/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E4%BD%BF%E7%94%A8YOLOX%E8%BF%9B%E8%A1%8C%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%EF%BC%88%E9%99%84%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%89/",
            "url": "https://leezhao415.github.io/2021/12/12/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E4%BD%BF%E7%94%A8YOLOX%E8%BF%9B%E8%A1%8C%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%EF%BC%88%E9%99%84%E6%95%B0%E6%8D%AE%E9%9B%86%EF%BC%89/",
            "title": "【精华】使用YOLOX进行物体检测（附数据集）",
            "date_published": "2021-12-12T10:40:37.000Z",
            "content_html": "<meta name=\"referrer\" content=\"no-referrer\">\n<hr>\n<p><strong>文章目录</strong></p>\n<!-- toc -->\n<ul>\n<li><a href=\"#%E4%BD%BF%E7%94%A8yolox%E8%BF%9B%E8%A1%8C%E7%89%A9%E4%BD%93%E6%A3%80%E6%B5%8B%E9%99%84%E6%95%B0%E6%8D%AE%E9%9B%86\">使用 YOLOX 进行物体检测（附数据集）</a>\n<ul>\n<li><a href=\"#%E4%B8%80-%E9%85%8D%E7%BD%AE%E7%8E%AF%E5%A2%83\">一、 配置环境</a></li>\n<li><a href=\"#%E4%BA%8C-%E5%88%B6%E4%BD%9C%E6%95%B0%E6%8D%AE%E9%9B%86\">二、 制作数据集</a></li>\n<li><a href=\"#%E4%B8%89-%E4%BF%AE%E6%94%B9%E6%95%B0%E6%8D%AE%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6\">三、 修改数据配置文件</a></li>\n<li><a href=\"#%E5%9B%9B-%E8%AE%AD%E7%BB%83\">四、 训练</a></li>\n<li><a href=\"#%E4%BA%94-%E6%B5%8B%E8%AF%95\">五、 测试</a></li>\n<li><a href=\"#%E5%85%AD-%E4%BF%9D%E5%AD%98%E6%B5%8B%E8%AF%95%E7%BB%93%E6%9E%9C\">六、 保存测试结果</a></li>\n<li><a href=\"#%E4%B8%83-%E9%81%87%E5%88%B0%E7%9A%84%E9%94%99%E8%AF%AF\">七、遇到的错误</a></li>\n</ul>\n</li>\n</ul>\n<!-- tocstop -->\n<hr>\n<h4><span id=\"使用-yolox-进行物体检测附数据集\"> 使用 YOLOX 进行物体检测（附数据集）</span></h4>\n<p><strong>YOLOX: Exceeding YOLO Series in 2021</strong></p>\n<p>・代码：<a href=\"https://github.com/Megvii-BaseDetection/YOLOX\">https://github.com/Megvii-BaseDetection/YOLOX</a></p>\n<p>・论文：<a href=\"https://arxiv.org/abs/2107.08430\">https://arxiv.org/abs/2107.08430</a></p>\n<p>YOLOX 是旷视开源的高性能检测器。旷视的研究者将解耦头、数据增强、无锚点以及标签分类等目标检测领域的优秀进展与 YOLO 进行了巧妙的集成组合，提出了 YOLOX，不仅实现了超越 YOLOv3、YOLOv4 和 YOLOv5 的 AP，而且取得了极具竞争力的推理速度。如下图：</p>\n<p>其中 YOLOX-L 版本以 68.9 FPS 的速度在 COCO 上实现了 50.0% AP，比 YOLOv5-L 高出 1.8% AP！还提供了支持 ONNX、TensorRT、NCNN 和 Openvino 的部署版本，本文将详细介绍如何使用 YOLOX 进行物体检测。</p>\n<h5><span id=\"一-配置环境\"> 一、 配置环境</span></h5>\n<p>本机的环境：</p>\n<h6><span id=\"11-下载源码\"> 1.1 下载源码</span></h6>\n<p>GitHub 地址：<a href=\"https://github.com/Megvii-BaseDetection/YOLOX%EF%BC%8C%E4%B8%8B%E8%BD%BD%E5%AE%8C%E6%88%90%E5%90%8E%E6%94%BE%E5%88%B0D%E7%9B%98%E6%A0%B9%E7%9B%AE%E5%BD%95%EF%BC%8C%E7%84%B6%E5%90%8E%E7%94%A8PyCharm%E6%89%93%E5%BC%80%E3%80%82\">https://github.com/Megvii-BaseDetection/YOLOX，下载完成后放到 D 盘根目录，然后用 PyCharm 打开。</a></p>\n<h6><span id=\"12-安装依赖包\"> 1.2 安装依赖包</span></h6>\n<p>点击 “Terminal”, 如下图，</p>\n<p>然后执行下面的命令，安装所有的依赖包。</p>\n<h6><span id=\"13-安装-yolox\"> 1.3 安装 yolox</span></h6>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343488/641\" alt=\"图片\" style=\"zoom: 80%;\"></center>\n<p>看到如下信息，则说明安装完成了</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343489/641\" alt=\"图片\"></center>\n<h6><span id=\"14-安装-apex\"> 1.4 安装 apex</span></h6>\n<p>APEX 是英伟达开源的，完美支持 PyTorch 框架，用于改变数据格式来减小模型显存占用的工具。其中最有价值的是 amp（Automatic Mixed Precision），将模型的大部分操作都用 Float16 数据类型测试，一些特别操作仍然使用 Float32。并且用户仅仅通过三行代码即可完美将自己的训练代码迁移到该模型。实验证明，使用 Float16 作为大部分操作的数据类型，并没有降低参数，在一些实验中，反而由于可以增大 Batch size，带来精度上的提升，以及训练速度上的提升。</p>\n<p>安装步骤：</p>\n<ol>\n<li>\n<p>到官网下载 apex，地址：mirrors /nvidia/apex・CODE CHINA (<a href=\"http://csdn.net\">csdn.net</a>)[1]</p>\n</li>\n<li>\n<p>下载完成后，解压后，在 Shell 里，进入到 apex-master 中。</p>\n</li>\n<li>\n<p>执行安装命令</p>\n</li>\n</ol>\n<p>看到如下 log，则表明安装成功。</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343566/641\" alt=\"图片\"></center>\n<h6><span id=\"15-安装-pycocotools\"> 1.5 安装 pycocotools</span></h6>\n<h6><span id=\"16-验证环境\"> 1.6 验证环境</span></h6>\n<p>下载预训练模型，本文选用的是 YOLOX-s，</p>\n<p>下载地址：<a href=\"https://github.com/Megvii-BaseDetection/YOLOX/releases/download/0.1.1rc0/yolox_s.pth%E3%80%82\">https://github.com/Megvii-BaseDetection/YOLOX/releases/download/0.1.1rc0/yolox_s.pth。</a></p>\n<p>下载完成后，将预训练模型放到工程的根目录，如下图：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343567/641\" alt=\"图片\" style=\"zoom:80%;\"></center>\n<p>然后验证环境，执行：</p>\n<p>参数说明</p>\n<p>查看运行结果：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343622/641\" alt=\"图片\" style=\"zoom: 67%;\"></center>\n<p>看到上图说明环境没有问题了。</p>\n<h5><span id=\"二-制作数据集\"> 二、 制作数据集</span></h5>\n<p>数据集我们采用 VOC 数据集，原始数据集是 Labelme 标注的数据集。</p>\n<p>下载地址：<a href=\"https://pan.baidu.com/s/1kj-diqEK2VNVqd2n4ROa5g\">https://pan.baidu.com/s/1kj-diqEK2VNVqd2n4ROa5g</a> （提取码 rrnz）</p>\n<p>新建 labelme2voc.py 文件</p>\n<p>运行上面的代码就可以得到 VOC2007 数据集。如下图所示：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343623/641\" alt=\"图片\" style=\"zoom:80%;\"></center>\n<p>VOC 的目录如下，所以要新建 data/VOCdevkit 目录，然后将上面的结果复制进去</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343711/641\" alt=\"图片\" style=\"zoom:80%;\"></center>\n<p>到这里，数据集制作完成。</p>\n<h5><span id=\"三-修改数据配置文件\"> 三、 修改数据配置文件</span></h5>\n<h6><span id=\"31-修改类别\"> 3.1 修改类别</span></h6>\n<p>文件路径：exps/example/yolox_voc/yolox_voc_s.py，本次使用的类别有 2 类，所以将 num_classes 修改为 2。</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343712/641\" alt=\"图片\" style=\"zoom:80%;\"></center>\n<p>打开 yolox/data/datasets/voc_classes.py 文件，修改为自己的类别名：</p>\n<h6><span id=\"32-修改数据集目录\"> 3.2 修改数据集目录</span></h6>\n<p>文件路径：exps/example/yolox_voc/yolox_voc_s.py，data_dir 修改为 “./data/VOCdevkit”，image_sets 删除 2012 的，最终结果如下：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343757/641\" alt=\"图片\" style=\"zoom:80%;\"></center>\n<p>接着往下翻，修改 test 的路径，如下图：</p>\n<p>打开 yolox/data/datasets/voc.py, 这里面有个错误。画框位置，将大括号的 “% s” 去掉，否则验证的时候一直报找不到文件的错误。</p>\n<p>修改完成后，执行</p>\n<p>重新编译 yolox。</p>\n<h5><span id=\"四-训练\"> 四、 训练</span></h5>\n<p>推荐使用命令行的方式训练。</p>\n<p>执行命令：</p>\n<p>就可以开始训练了。如果不喜欢使用命令行的方式，<a href=\"http://xn--train-064jz9m2z0c0v6ayyp.py\">想直接运行 train.py</a>，那就需要就如 train.py 修改参数了。首先把 train.py 从 tools 里面复制一份到工程的根目录（建议这样做，否则需要修改的路径比较多，新手容易犯错误），如图：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990343895/641\" alt=\"图片\" style=\"zoom: 67%;\"></center>\n<p>打开，修改里面的参数。需要修改的参数如下：</p>\n<p>按照上面的参数配置就可以运行了，如下图：</p>\n<p>如果训练了一段时间，再想接着以前的模型再训练，应该如何做呢？修改 train.py 的参数即可，需要修改的参数如下：</p>\n<p>命令行：</p>\n<p>再次训练，你发现 epoch 不是从 0 开始了。</p>\n<h5><span id=\"五-测试\"> 五、 测试</span></h5>\n<p>修改 yolox/data/datasets/_<em>init</em>_.py，导入 “VOC_CLASSES”，如下图：</p>\n<p>修改 tools/demo.py 中代码，将 “COCO_CLASSES”，改为 “VOC_CLASSES”。</p>\n<p>将 “295” 行的 Predictor 类初始化传入的 “COCO_CLASSES” 改为 “VOC_CLASSES”，如下图：</p>\n<h6><span id=\"51-单张图片预测\"> 5.1 单张图片预测</span></h6>\n<p>使用训练好的模型进行测试。测试调用 tools/demo.py, 先用命令行的方式演示：</p>\n<p>运行结果：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990344093/641\" alt=\"图片\"></center>\n<p>如果不想使用命令行，将 demo.py 复制一份放到工程的根目录，然后修改里面的参数。</p>\n<p><a href=\"http://xn--demo-zk1gv93ftwvbqk0k3byyp.py\">然后直接运行 demo.py</a>, 运行结果如下图：</p>\n<p><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990344094/641\" alt=\"图片\"></p>\n<h6><span id=\"52-批量预测\"> 5.2 批量预测</span></h6>\n<p>批量预测很简单，将 path 参数由文件路径改为图片的文件夹路径就可以。例：</p>\n<p>这样就可以预测 assets 文件夹下面所有的图片了。</p>\n<h5><span id=\"六-保存测试结果\"> 六、 保存测试结果</span></h5>\n<p>demo.py 只有将结果画到图片上，没有保存结果，所以要增加这部分的功能。</p>\n<p>在 demo.py 的 178 行增加获取结果，并返回上层方法，如下图：</p>\n<p>然后在 182，修改 image_demo 函数，增加获取结果，保存结果的逻辑，具体代码如下：</p>\n<p><a href=\"http://xn--demo-zk1gh85mb17a0tm.py\">然后运行 demo.py</a>, 就可以将结果保存到 txt 中。</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990344197/641\" alt=\"图片\" style=\"zoom:80%;\"></center>\n<h5><span id=\"七-遇到的错误\"> 七、遇到的错误</span></h5>\n<p><strong>1、RuntimeError: DataLoader worker (pid(s) 9368, 12520, 6392, 7384) exited unexpectedly</strong></p>\n<p>打开 yolox/exp/yolox_base.py, 将 data_num_workers 设置为 0，如下图：</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990344198/641\" alt=\"图片\"></center>\n<p>将 num_workers 设置为 0，程序报错，并提示设置环境变量 KMP_DUPLICATE_LIB_OK=TRUE 那你可以在设置环境变量 KMP_DUPLICATE_LIB_OK=TRUE 或者使用临时环境变量：（在代码开始处添加这行代码)</p>\n<center><img src=\"http://inews.gtimg.com/newsapp_bt/0/13990344199/641\" alt=\"图片\"></center>\n<p><strong>2、RuntimeError: cuDNN error: CUDNN_STATUS_INTERNAL_ERROR</strong></p>\n<p>执行命令</p>\n<p>报的错误，把 -“-o” 去掉后就正常了</p>\n",
            "tags": [
                "人工智能",
                "YOLOX目标检测"
            ]
        }
    ]
}