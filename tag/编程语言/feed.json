{
    "version": "https://jsonfeed.org/version/1",
    "title": "且听风吟，御剑于心！ • All posts by \"编程语言\" tag",
    "description": "",
    "home_page_url": "https://leezhao415.github.io",
    "items": [
        {
            "id": "https://leezhao415.github.io/2021/04/19/Python%E5%9F%BA%E7%A1%80%E5%8F%8A%E8%BF%9B%E9%98%B6/",
            "url": "https://leezhao415.github.io/2021/04/19/Python%E5%9F%BA%E7%A1%80%E5%8F%8A%E8%BF%9B%E9%98%B6/",
            "title": "Python基础及进阶",
            "date_published": "2021-04-19T12:20:07.000Z",
            "content_html": "<meta name=\"referrer\" content=\"no-referrer\">\n<h1><span id=\"pycharm-快捷方式\"> @Pycharm 快捷方式</span></h1>\n<hr>\n<p><strong>文章目录</strong></p>\n<!-- toc -->\n<ul>\n<li><a href=\"#20210304\">2021.03.04</a></li>\n<li><a href=\"#20210305\">2021.03.05</a></li>\n<li><a href=\"#20210306\">2021.03.06</a></li>\n<li><a href=\"#20210308\">2021.03.08</a></li>\n<li><a href=\"#20210309\">2021.03.09</a></li>\n<li><a href=\"#20210310\">2021.03.10</a></li>\n<li><a href=\"#20210311\">2021.03.11</a></li>\n<li><a href=\"#20210312\">2021.03.12</a></li>\n<li><a href=\"#20210314\">2021.03.14</a></li>\n<li><a href=\"#20210315\">2021.03.15</a></li>\n<li><a href=\"#20210319\">2021.03.19</a></li>\n<li><a href=\"#20210320\">2021.03.20</a></li>\n<li><a href=\"#20210321\">2021.03.21</a></li>\n<li><a href=\"#20210322\">2021.03.22</a></li>\n<li><a href=\"#20210323\">2021.03.23</a></li>\n<li><a href=\"#20210325\">2021.03.25</a></li>\n<li><a href=\"#20210328\">2021.03.28</a></li>\n<li><a href=\"#20210403\">2021.04.03</a></li>\n</ul>\n<!-- tocstop -->\n<hr>\n<ul>\n<li>Ctrl+Alt+L  （代码格式化）</li>\n<li>Ctrl+Alt+M  （提取方法）</li>\n<li>shift +enter   跳转到下一行</li>\n<li>Ctrl + Shift + 方向键    移动代码</li>\n<li>shift + tab   退一个 Tab 键</li>\n<li>Ctrl + Q  查看函数的说明文档</li>\n<li>Ctrl + F12    查看当前项目定义的函数的列表</li>\n<li>Alt  + Enter   提示错误信息</li>\n<li>shift +F6   Pycharm 中替换功能</li>\n</ul>\n<h1><span id=\"20210304\"> 2021.03.04</span></h1>\n<p>（1）内存（RAM）：存储计算机运行的数据<br>\n（2）计算机：高速计算的电子计算器，数值计算、逻辑计算、记忆存储。<br>\n（3）冯诺依曼体系：输入设备（键鼠扫）、输出设备（显打）、运算器、控制器、存储器。<br>\n（4）系统软件（建立计算机和人之间的联系）、应用软件（实现特定的功能）。<br>\n（5）编程语言：Java、Python、C、C#、Cpp<br>\n（6）应用领域：网络爬虫、人工智能、机器学习、数据分析、Web 开发、自动化运维、自动化测试等。<br>\n（7）Google 开源机器学习框架：TensorFlow<br>\n 开源社区主推学习框架：Scikit-learn<br>\n 百度开源深度学习框架：Paddle<br>\n（8）Python 缺点：运行速度慢<br>\n不适用 Python：性能要求比较高的场景：游戏引擎、底层开发。<br>\n（9）爬虫：爬取关键信息，获取感兴趣内容。<br>\n（10）TIOBE 2021 02     2021.02 编程语言排行榜<br>\n（11）基础、流程控制、数据序列、函数、文件操作、面向对象、模块 / 包 / 异常。<br>\n（12）解释型：解释器读取一段，解释执行一段。<br>\n编译型：通过编译器将程序转化为二进制机器码执行<br>\n（13）Python 解释器：CPython（官方版解释器，用 C 写的）、IPython（内核 CPython，外观）、PyPy（动态编译）、Jython（把 Python 语言编写成 Java 的字节码文件）、ironPython（编译成.Net 字节码文件）<br>\n（14）IDE（集成开发环境）：代码提示、命令简化、debug 调试 。例如  Pycharm<br>\n（15）注释：单行注释（#(习惯：# 后加一个空格) ctrl + /）、多行注释（’’‘Python’’' 或者 &quot;&quot;“Python”&quot;&quot;）<br>\nCtrl+Alt+L  （代码格式化）<br>\n（16）变量：存储数据的内存，内存的别名<br>\n（17）变量命名规则：大驼峰 MyName  、小驼峰 myName、下划线 my_name<br>\n 不可使用数字开头，不能使用内置关键字，严格区分大小写，以数字、字母、下划线开头。<br>\n（18）定义不变的量：字母都大写<br>\n（19）Typora 使用快捷</p>\n<p>​           展示路径：Ctrl+Shift+I      <img src alt=\"图片\"></p>\n<p>​            表格：     |A 列名称 | B 列名称 |</p>\n<p>（20）debug: 程序运行模式，检查程序的执行细节 。   打断点 -&gt;debug 运行</p>\n<p>（21）数据类型：元组 (tuple)、列表 (list)、集合 (set)、字典 (dict)</p>\n<p>（22）<strong>格式化输出：</strong>% d 、% s、% f、%04d (不足补零，超出原样显示)、%.5f</p>\n<p>​            \\n  换行             \\t     制表符  一个 Tab (4 个空格)</p>\n<p>（23）Python 跨平台语言   ：Windows、Linux、MacOS</p>\n<h1><span id=\"20210305\"> 2021.03.05</span></h1>\n<p>（1）Python   解释型、动态数据类型、面向对象</p>\n<p>（2）查看系统函数帮助，按住 Ctrl，点击对应函数</p>\n<p>（3）shift +enter   跳转到下一行</p>\n<p>​          Ctrl + Shift + 方向键    移动代码</p>\n<p>​\tshift + tab   退一个 Tab 键</p>\n<p>（4）float-&gt;int      强转  向下取整</p>\n<p>（5）str(10).print    ==&gt;   print(str(10))</p>\n<p>（6）优先级：（）——&gt;  **  ——&gt;  / * // %——&gt; + -</p>\n<p>​                          算术运算符 ——&gt; 复合赋值运算    例：a *= 1+2    ==&gt;   a=a (1+2)——&gt; 赋值运算符</p>\n<p>（7）数字的逻辑运算，and 有零为零，否则返回后面的值      or 全零为零，否则返回前面的非零值</p>\n<p>​                                         not  零为 False，非零为 True。</p>\n<pre><code>优先级：Not &gt; and &gt; or\n</code></pre>\n<p>（8）切片是指对操作的对象截取其中一部分的操作。<strong>字符串、列表、元组</strong>都支持切片操作。</p>\n<p>​          切片的语法：[起始：结束：步长]</p>\n<p>​      <strong>注意：选取的区间从 &quot;起始&quot; 位开始，到 &quot;结束&quot; 位的前一位结束（不包含结束位本身)，步长表示选取间隔。</strong></p>\n<h1><span id=\"20210306\"> 2021.03.06</span></h1>\n<p>（1）if  条件：        elif:           else:</p>\n<p>（2）字符串可以表示 bool 型数据，空格表示 False，非空格表示 True。</p>\n<p>（3）while  先判断 后执行</p>\n<h1><span id=\"20210308\"> 2021.03.08</span></h1>\n<p>（1）pass 语句         补充条件语句，占位。</p>\n<p>（2）如果使用了 continue ，则一定要在 continue 前使用计数器。</p>\n<p>​          break   终止后退出</p>\n<p>​          continue   跳过继续</p>\n<p>（3）while…else…     中 else 后为正常结束后要显示的内容，非正常情况终止不会执行 else 语句</p>\n<p>​         break   可以使程序异常退出。</p>\n<p>​         continue  程序是正常执行的，循环结束后 else 语句会执行。</p>\n<p>（4）” “ ”…&quot;&quot;&quot;    三引号支持换行</p>\n<h1><span id=\"20210309\"> 2021.03.09</span></h1>\n<p>（1）切片    如果步长为负数，表示倒序选取</p>\n<p>（2）replace   修改字符串中对应的数据，原有的字符串不变。（字符串属于不可变数据类型）</p>\n<p>​          split  分隔成列表</p>\n<p>​           join 类似于 split 的反操作，将列表合并成字符串。</p>\n<p>（3）capitalize\t\t字符串首字母大写</p>\n<p>​           title\t\t\t字符串每个单词的首字母大写</p>\n<p>​           lower\t\t\t大写转小写</p>\n<p>​           upper\t\t        小写转大写</p>\n<p>（4）面向百度编程：Python 需求</p>\n<p>（5） <strong>去空白：</strong></p>\n<p>​\tlstrip   删除左侧空格</p>\n<p>​    rstrip  删除右侧空格</p>\n<p>strip    删除两侧的空格</p>\n<p>（6）<strong>对齐方式：</strong></p>\n<p>​\tljust (num,’_’)        在 num 长度内左对齐，多余位置用下划线补齐</p>\n<p>​\trjust (num,’_’)    \t在 num 长度内右对齐，多余位置用下划线补齐</p>\n<p>​        center (num,’_’)\t在 num 长度内居中对齐，多余位置用下划线补齐</p>\n<p>（7）<strong>字符串判断：</strong></p>\n<p>​\tstartswith ()    判断字符串开头是否以某个子串开头的</p>\n<p>​\tendswith ()    判断字符串是否以某个子串结尾</p>\n<p>​\tisalpha ()\t判断是否是字母</p>\n<p>​\tisdigit ()\t判断是否是数字</p>\n<p>​\tisalnum ()\t判断是否是数字和字母的组合</p>\n<p>​\tisspace ()\t判断是否都是空格</p>\n<p>（8）<strong>列表操作：</strong></p>\n<p>​\tappend  追加整个序列到列表的结尾，修改了原列表。</p>\n<p>​\textend   追加序列中的元素到列表的结尾</p>\n<p>​\tinsert  在特定下标增加一个数据，原位置的数据后移。</p>\n<p>​\tdel \t删除指定数据或者列表</p>\n<p>​\tpop \t删除指定下标的数据，若不指定下标，默认删除最后一个数，pop 函数会返回删除的元素。</p>\n<p>​\tremove \t删除指定数据</p>\n<p>​\tclear\t清空列表</p>\n<p>​         reverse \t逆置</p>\n<p>​\tsort （key =none,reverse = false） \t排序  ，默认升序</p>\n<p>​\t\t例如：sort (reverse = True)      降序排序</p>\n<p>​\tcopy \t复制列表</p>\n<p>​</p>\n<h1><span id=\"20210310\"> 2021.03.10</span></h1>\n<p>（1）<strong>if 与 While 区别：</strong></p>\n<p>​\tif 子句结束时，程序继续执行 if 语句之后的语句。</p>\n<pre><code>while 子句结束时，程序执行跳回到 while 语句开始处。\n</code></pre>\n<p>（2）在用于条件时，0、0.0 和’ '（空字符串）被认为是 False，其他值被认为是 True。</p>\n<p>(3)  <strong>for 循环</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">total = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">101</span>):</span><br><span class=\"line\">\ttotal = total + num </span><br><span class=\"line\"><span class=\"built_in\">print</span>(total)</span><br></pre></td></tr></table></figure>\n<p>（4）实际上，只能在 while 和 for 循环内部使用 continue 和 break 语句。如果试图在别处使用这些语句，Python 将 报错。</p>\n<p>（5）<strong>range () 函数</strong>也可以有第三个参数。前两个参数分别是起始值和终止值（不包含），第三个 参数是 “步长”。步长是每次迭代后循环变量增加的值。（类比切片作记忆）</p>\n<p>（6）**from random import ***。 使用这种形式的 import 语句，调用 random 模块中的函数时不需要 random. 前缀。</p>\n<p>​\t\t但是，使用完整的名称会让代码更可读，所以最好是使用普通形式的 import 语句。</p>\n<p>（7）<strong>sys 模块</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">while</span> <span class=\"literal\">True</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Type exit to exit:\\n&#x27;</span>)</span><br><span class=\"line\">    response = <span class=\"built_in\">input</span>()</span><br><span class=\"line\">    <span class=\"keyword\">if</span> response == <span class=\"string\">&#x27;exit&#x27;</span>:</span><br><span class=\"line\">        sys.exit()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;You typed &#x27;</span> + response + <span class=\"string\">&#x27;.&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>（8）def 中的变量称为‘<strong>变元</strong>’，保存在变元中的值，在函数返回后就会被销毁。</p>\n<p>（9）在 Python 中有一个值称为 <strong>None</strong>，它表示没有值。None 是 NoneType 数据类型的唯一值（其他编程语言可能称这个值为 null、nil 或 undefined）。就像布尔值 True 和 False 一样，None 必须大写首字母 N。</p>\n<p>（10）<strong>print (sep = ‘分隔符’，end = ‘结束符’) 函数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;cats&#x27;</span>, <span class=\"string\">&#x27;dogs&#x27;</span>, <span class=\"string\">&#x27;mice&#x27;</span>)</span><br><span class=\"line\">cats dogs mice</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;cats&#x27;</span>, <span class=\"string\">&#x27;dogs&#x27;</span>, <span class=\"string\">&#x27;mice&#x27;</span>, sep=<span class=\"string\">&#x27;,&#x27;</span>)</span><br><span class=\"line\">cats,dogs,mice</span><br></pre></td></tr></table></figure>\n<p>（11）可以将 “<strong>作用域</strong>” 看成是变量的容器。当作用域被销毁时，所有保存在该作用域内的变量的值就被丢弃了。</p>\n<p>​\t<strong>全局作用域</strong>，它是在程序开始时创建的。如果程序终止，全局作用域就被销毁，它的所有变量就被丢弃了。否则，下次你运行程序的时候，这些变量就会记住它们上次运行时的值。</p>\n<p>​\t一个函数被调用时，就创建了一个<strong>局部作用域</strong>。在这个函数内赋值的所有变量，存在于该局部作用域内。该函数返回时，这个局部作用域就被销毁了，这些变量就丢失了。下次调用这个函数，局部变量不会记得该函数上次被调用时它们保存的值。</p>\n<p><strong>作用域知识点如下：</strong></p>\n<ul>\n<li>全局作用域中的代码不能使用任何局部变量；</li>\n<li>但是，局部作用域可以访问全局变量；</li>\n<li>一个函数的局部作用域中的代码，不能使用其他局部作用域中的变量。</li>\n<li>如果在不同的作用域中，你可以用相同的名字命名不同的变量。也就是说，可以有一个名为 spam 的局部变量，和一个名为 spam 的全局变量。</li>\n</ul>\n<p>（12）<strong>全局变量和局部变量</strong></p>\n<ul>\n<li>\n<p><strong>局部作用域不能使用其他局部作用域内的变量</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spam</span>():</span></span><br><span class=\"line\">    eggs = <span class=\"number\">99</span> </span><br><span class=\"line\">    bacon() </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eggs) </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bacon</span>():</span></span><br><span class=\"line\">    ham = <span class=\"number\">101</span></span><br><span class=\"line\">    eggs = <span class=\"number\">0</span> </span><br><span class=\"line\"></span><br><span class=\"line\">spam()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"number\">99</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>全局变量可以在局部作用域中读取</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spam</span>():</span></span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(eggs)</span><br><span class=\"line\">    </span><br><span class=\"line\">eggs = <span class=\"number\">42</span></span><br><span class=\"line\">spam()</span><br><span class=\"line\"><span class=\"comment\"># print(eggs)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;<span class=\"number\">42</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>名称相同的局部变量和全局变量</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spam</span>():</span></span><br><span class=\"line\">    eggs = <span class=\"string\">&#x27;spam local&#x27;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eggs) <span class=\"comment\"># prints &#x27;spam local&#x27;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">bacon</span>():</span></span><br><span class=\"line\">    eggs = <span class=\"string\">&#x27;bacon local&#x27;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eggs) <span class=\"comment\"># prints &#x27;bacon local&#x27;</span></span><br><span class=\"line\">    spam()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(eggs) <span class=\"comment\"># prints &#x27;bacon local&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">eggs = <span class=\"string\">&#x27;global&#x27;</span></span><br><span class=\"line\">bacon()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(eggs) <span class=\"comment\"># prints &#x27;global&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span></span><br><span class=\"line\">bacon local</span><br><span class=\"line\">spam local</span><br><span class=\"line\">bacon local</span><br><span class=\"line\"><span class=\"keyword\">global</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（13）<strong>global 语句</strong></p>\n<p>如果需要在一个函数内修改全局变量，就使用 global 语句。如果在函数的顶部有 global eggs 这样的代码，它就告诉 Python，“在这个函数中，eggs 指的是全局变量，所以不要用这个名字创建一个局部变量。”</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">spam</span>():</span></span><br><span class=\"line\">    <span class=\"keyword\">global</span> eggs </span><br><span class=\"line\">    eggs = <span class=\"string\">&#x27;spam&#x27;</span> </span><br><span class=\"line\"></span><br><span class=\"line\">eggs = <span class=\"string\">&#x27;global&#x27;</span></span><br><span class=\"line\">spam()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(eggs)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;spam</span><br></pre></td></tr></table></figure>\n<p><strong>区分一个变量是处于局部作用域还是全局作用域：</strong></p>\n<p>1．如果变量在全局作用域中使用（即在所有函数之外），它就总是全局变量。</p>\n<p>2．如果在一个函数中，有针对该变量的 global 语句，它就是全局变量。</p>\n<p>3．否则，如果该变量用于函数中的赋值语句，它就是局部变量。</p>\n<p>4．但是，如果该变量没有用在赋值语句中，它就是全局变量。</p>\n<p>（14）<strong>计算一个字符串中每个字符出现的次数</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&#x27;It was a bright cold day in April, and the clocks were striking thirteen.&#x27;</span> </span><br><span class=\"line\">count = &#123;&#125; </span><br><span class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>: </span><br><span class=\"line\">    count.setdefault(character, <span class=\"number\">0</span>) </span><br><span class=\"line\">    count[character] += <span class=\"number\">1</span> </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(count)</span><br></pre></td></tr></table></figure>\n<p>（15）漂亮的打印</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> pprint</span><br><span class=\"line\"><span class=\"built_in\">str</span> = <span class=\"string\">&#x27;It was a bright cold day in April, and the clocks were striking</span></span><br><span class=\"line\"><span class=\"string\">thirteen.&#x27;</span></span><br><span class=\"line\">count = &#123;&#125;</span><br><span class=\"line\"><span class=\"keyword\">for</span> character <span class=\"keyword\">in</span> <span class=\"built_in\">str</span>:</span><br><span class=\"line\">    count.setdefault(character, <span class=\"number\">0</span>)</span><br><span class=\"line\">    count[character] += <span class=\"number\">1</span></span><br><span class=\"line\">pprint.pprint(count)</span><br></pre></td></tr></table></figure>\n<h1><span id=\"20210311\"> 2021.03.11</span></h1>\n<p>（1）dict   大括号，键值对，逗号隔开。</p>\n<p>（2）key : 不可变类型（int float 字符串  元组）       <strong>列表不可以</strong></p>\n<p>（3）del dict1  删除字典        dict1.clear  清空保留空字典</p>\n<p>（4）在字典中 in 只能判断<strong>键</strong>是否在字典中</p>\n<p>（5）get ()   查找值    \tkeys ()  查找所有的键\tvalues () 查找所有的值</p>\n<p>​\titems ()    查找字典中所有的键值对，返回元组，元组的元素分别对应 key 和 value ()</p>\n<p>（6）set ()\t集合无序，可以去重，可变类型。</p>\n<p>​\tadd ()\t增加元素到集合中，可添加不可变的容器，例如：元组、int、float、字符串</p>\n<p>​\tupdate () \t增加数据序列，例如：列表、元组</p>\n<p>​\tremove ()\t删除指定数据，不存在则报错。</p>\n<p>​\tdiscard ()\t删除指定数据，不存在则不报错</p>\n<p>​\tpop ()\t随机删除数据，并返回删除的数据。</p>\n<p>​\tin\t查找数据是否在集合内</p>\n<p>​\tnot in \t查找数据是否不在集合内</p>\n<p>​\t集合可以用 for 循环遍历</p>\n<p>（7）+ 合并    \t字符串、列表、元组等<u>有序的容器</u>都支持合并，<strong>字典不支持合并</strong>。</p>\n<p>​\t* 复制\t      字符串、列表、元组都<u>有序的容器</u>支持合并，<strong>字典不支持合并</strong>。</p>\n<p>​\tin\t\t支持所有的容器</p>\n<p>​\tnot in \t支持所有的容器</p>\n<p><strong>公共方法</strong>：</p>\n<ul>\n<li>\n<p><strong>len()</strong></p>\n</li>\n<li>\n<p><strong>del()</strong></p>\n</li>\n<li>\n<p><strong>min()</strong></p>\n</li>\n<li>\n<p><strong>max()</strong></p>\n</li>\n<li>\n<p><strong>range()</strong></p>\n</li>\n<li>\n<p><strong>enumerate()</strong>  返回结果是元组，元组第一个数据时对应下标，第二个元素为数据的值。</p>\n</li>\n</ul>\n<p>（8）<strong>列表推导式</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">list1 = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\">list2 = [<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 结合if语句的列表推导式</span></span><br><span class=\"line\">list3 = [<span class=\"built_in\">str</span>(i) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>) <span class=\"keyword\">if</span> i % <span class=\"number\">2</span> == <span class=\"number\">0</span>]  </span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 多个for循环实现循环嵌套的列表推导式</span></span><br><span class=\"line\">list4 = [(i, j) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">3</span>) <span class=\"keyword\">for</span> j <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 列表推导式实现一一对应展示</span></span><br><span class=\"line\">l1 = [<span class=\"string\">&#x27;a&#x27;</span>，<span class=\"string\">&#x27;b&#x27;</span>，<span class=\"string\">&#x27;c&#x27;</span>]</span><br><span class=\"line\">l2 = [<span class=\"number\">1</span>，<span class=\"number\">2</span>，<span class=\"number\">3</span>]</span><br><span class=\"line\">list5 = [(i, j) <span class=\"keyword\">for</span> i, j <span class=\"keyword\">in</span> <span class=\"built_in\">zip</span>(l1, l2)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 分组一个list</span></span><br><span class=\"line\">l1 = [i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>，<span class=\"number\">101</span>)]</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l1[::<span class=\"number\">3</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 字典推导式</span></span><br><span class=\"line\">list6 = [i:i**<span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>，<span class=\"number\">5</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两个列表组合的字典</span></span><br><span class=\"line\">list7 = [<span class=\"string\">&#x27;name&#x27;</span>, <span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;gender&#x27;</span>]</span><br><span class=\"line\">list8 = [<span class=\"string\">&#x27;Tom&#x27;</span>, <span class=\"number\">20</span>, <span class=\"string\">&#x27;man&#x27;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">dict1 = &#123;list7[i]: list8[i] <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"built_in\">len</span>(list7))&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(dict1)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 集合推导式</span></span><br><span class=\"line\">list8 = [<span class=\"number\">1</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>]</span><br><span class=\"line\">set1 = &#123;i ** <span class=\"number\">2</span> <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> list8&#125;</span><br><span class=\"line\"><span class=\"built_in\">print</span>(set1)  <span class=\"comment\"># &#123;1, 4&#125;</span></span><br></pre></td></tr></table></figure>\n<h1><span id=\"20210312\"> 2021.03.12</span></h1>\n<p>（1）物品清单罗列</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># inventory.py</span></span><br><span class=\"line\">stuff = &#123;<span class=\"string\">&#x27;rope&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;torch&#x27;</span>: <span class=\"number\">6</span>, <span class=\"string\">&#x27;gold coin&#x27;</span>: <span class=\"number\">42</span>, <span class=\"string\">&#x27;dagger&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;arrow&#x27;</span>: <span class=\"number\">12</span>&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayInventory</span>(<span class=\"params\">inventory</span>):</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Inventory:&quot;</span>)</span><br><span class=\"line\">    item_total = <span class=\"number\">0</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> k, v <span class=\"keyword\">in</span> inventory.items():</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">str</span>(v) + <span class=\"string\">&#x27;\\t&#x27;</span> + k)</span><br><span class=\"line\">        item_total += v</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Total number of items: &quot;</span> + <span class=\"built_in\">str</span>(item_total))</span><br><span class=\"line\">displayInventory(stuff)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">Inventory:</span><br><span class=\"line\"><span class=\"number\">1</span>\trope</span><br><span class=\"line\"><span class=\"number\">6</span>\ttorch</span><br><span class=\"line\"><span class=\"number\">42</span>\tgold coin</span><br><span class=\"line\"><span class=\"number\">1</span>\tdagger</span><br><span class=\"line\"><span class=\"number\">12</span>\tarrow</span><br><span class=\"line\">Total number of items: <span class=\"number\">62</span></span><br></pre></td></tr></table></figure>\n<p>（2）return  退出函数，返回值</p>\n<p>（3）函数的说明文档：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">maxDigit</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;最大值函数&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> a &gt;= b:  </span><br><span class=\"line\">        <span class=\"keyword\">return</span> a</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">help</span>(maxDigit)  <span class=\"comment\"># 查看函数的说明文档</span></span><br></pre></td></tr></table></figure>\n<p>（4）Ctrl + Alt +M    抽取函数</p>\n<p>Ctrl + Q  查看函数的说明文档</p>\n<p>（5）猜数字</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># This is a guess the number game. </span></span><br><span class=\"line\"><span class=\"keyword\">import</span> random</span><br><span class=\"line\">secretNumber = random.randint(<span class=\"number\">1</span>, <span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&#x27;I am thinking of a number between 1 and 20.&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\"># Ask the player to guess 6 times.</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> guessesTaken <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">7</span>):</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Take a guess.&#x27;</span>)</span><br><span class=\"line\">    guess = <span class=\"built_in\">int</span>(<span class=\"built_in\">input</span>())</span><br><span class=\"line\">    <span class=\"keyword\">if</span> guess &lt; secretNumber:</span><br><span class=\"line\">    \t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Your guess is too low.&#x27;</span>) </span><br><span class=\"line\">    <span class=\"keyword\">elif</span> guess &gt; secretNumber:</span><br><span class=\"line\">    \t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Your guess is too high.&#x27;</span>) </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">    \t<span class=\"keyword\">break</span> <span class=\"comment\"># This condition is the correct guess! </span></span><br><span class=\"line\"><span class=\"keyword\">if</span> guess == secretNumber:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Good job! You guessed my number in &#x27;</span> + <span class=\"built_in\">str</span>(guessesTaken) + <span class=\"string\">&#x27; guesses!&#x27;</span>) </span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t<span class=\"built_in\">print</span>(<span class=\"string\">&#x27;Nope. The number I was thinking of was &#x27;</span> + <span class=\"built_in\">str</span>(secretNumber))</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">I am thinking of a number between <span class=\"number\">1</span> <span class=\"keyword\">and</span> <span class=\"number\">20.</span> </span><br><span class=\"line\">Take a guess.</span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\">Your guess <span class=\"keyword\">is</span> too low.</span><br><span class=\"line\">Take a guess.</span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\">Your guess <span class=\"keyword\">is</span> too low.</span><br><span class=\"line\">Take a guess.</span><br><span class=\"line\"><span class=\"number\">17</span></span><br><span class=\"line\">Your guess <span class=\"keyword\">is</span> too high.</span><br><span class=\"line\">Take a guess.</span><br><span class=\"line\"><span class=\"number\">16</span></span><br><span class=\"line\">Good job! You guessed my number <span class=\"keyword\">in</span> <span class=\"number\">4</span> guesses!</span><br></pre></td></tr></table></figure>\n<p>（6）函数：封装代码，高效的代码重用。</p>\n<p>（7）变量的传递引用</p>\n<p><strong>变量包含对列表值的引用，而不是列表值本身</strong>。</p>\n<ul>\n<li>在变量必须保存可变数据类型的值时，例如列表或字典，Python 就使用引用。</li>\n<li>对于不可变的数据类型的值，例如字符串、整型或元组，Python 变量就保存值本身。</li>\n</ul>\n<p>（8）函数调用时，如果有位置参数，则要保证<strong>位置参数在关键字参数前面</strong>。</p>\n<p>（9）关键字列表查看</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> keyword</span><br><span class=\"line\"><span class=\"built_in\">print</span>(keyword.kwlist)</span><br></pre></td></tr></table></figure>\n<h1><span id=\"20210314\"> 2021.03.14</span></h1>\n<p>（1）Ctrl + F12    查看当前项目定义的函数的列表。<br>\nAlt  + Enter   提示错误信息</p>\n<p>（2）递归：在函数内部调用函数本身，代码量少。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 3 + 2 + 1</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">sum_numbers</span>(<span class=\"params\">num</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 1.如果是1，直接返回1 -- 出⼝</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> num == <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span></span><br><span class=\"line\">    <span class=\"comment\"># 2.如果不是1，重复执⾏累加并返回结果</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> num + sum_numbers(num - <span class=\"number\">1</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">sum_result = sum_numbers(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"comment\"># 输出结果为6</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sum_result)</span><br></pre></td></tr></table></figure>\n<p>（3） lambda 表达式（匿名函数）</p>\n<ul>\n<li>只有一行实现</li>\n<li>可以有参数</li>\n<li>函数名代表地址，可以通过地址加括号来调用函数。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">lambda</span> 参数：表达式</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># lambda </span></span><br><span class=\"line\"><span class=\"keyword\">lambda</span> a，b: a+b <span class=\"comment\"># 输入a和b，计算a+b的值。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 带判断的lambda表达式</span></span><br><span class=\"line\"><span class=\"keyword\">lambda</span> a,b:a <span class=\"keyword\">if</span> a &gt; b <span class=\"keyword\">else</span> b</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># lambda 带key的表达式</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>（4）高阶函数</p>\n<ul>\n<li>\n<p>函数有函数参数，或者函数有函数返回值。</p>\n<ul>\n<li>\n<p><strong>sort ()</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">l = [<span class=\"string\">&#x27;abcdef&#x27;</span>,<span class=\"string\">&#x27;ghf&#x27;</span>,<span class=\"string\">&#x27;treh&#x27;</span>]</span><br><span class=\"line\">l.sort(key=<span class=\"keyword\">lambda</span> ele:<span class=\"built_in\">len</span>(ele))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(l) <span class=\"comment\"># [&#x27;ghf&#x27;, &#x27;treh&#x27;, &#x27;abcdef&#x27;]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>map(func, lst)</strong>  # 将传入的函数变量 func 作用到 lst 变量的每个元素。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x ** <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"built_in\">map</span>(f, my_list)</span><br><span class=\"line\"><span class=\"comment\"># result返回内存地址，list(result)返回操作后的结果。</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(result), result, <span class=\"built_in\">list</span>(result))</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>reduce(function, list)</strong>    # 函数会对参数序列中元素进行累计</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> functools</span><br><span class=\"line\"></span><br><span class=\"line\">my_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x1, x2</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x1 + x2</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = functools.reduce(f, my_list)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>filter(func,lst)</strong>   # 过滤序列，过滤掉不符合条件的元素，返回一个 filter 对象，如果要转换为列表，可以使用 list () 来转换.</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">my_list = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>(<span class=\"params\">x</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x % <span class=\"number\">2</span> == <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">result = <span class=\"built_in\">filter</span>(f, my_list)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(result))</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<h1><span id=\"20210315\"> 2021.03.15</span></h1>\n<p><strong>（1）文件操作：</strong></p>\n<ul>\n<li><strong>read()</strong>    不加参数时默认读取所有内容，加数字表示读取的字符长度。（换行符会有字节占位）</li>\n<li><strong>readlines()</strong>   将文件的内容以列表的形式展示成一行内容。参数为数字时，表示将数字以内的字符串所在行都打印出来。</li>\n<li><strong>readline()</strong>  一次读取一行内容，参数为数字时，表示读取当前行数字个字符内容，超出则读取当前行所有内容。</li>\n</ul>\n<p><strong>（2）文件指针操作</strong></p>\n<p>​        seek (偏移量，起始位置) 用于移动文件指针。</p>\n<ul>\n<li>\n<p>起始位置：</p>\n<ul>\n<li>\n<p>0： 文件开头</p>\n</li>\n<li>\n<p>1： 当前位置</p>\n</li>\n<li>\n<p>2：文件结尾</p>\n<p>例如：</p>\n<p>seek (0,2)  指针在文件的结尾</p>\n<p>seek (n,0)  指针在文件的开头，从 n+1 个字符读文件。</p>\n<p>seek (0,0)   等价于 seek (0)，指针放在文件开头。</p>\n<p>seek (-2,2)   以结尾为基准，偏移两个字节，即读取后两个字符。</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>（3）相对路径</p>\n<ul>\n<li>./      根目录</li>\n<li>…/     上一级目录</li>\n<li>…/…/   上上一级目录</li>\n</ul>\n<p>（4）文件的相关操作：</p>\n<ul>\n<li>\n<p><strong>文件重命名</strong></p>\n<p>os 模块中的 rename () 可以完成对文件的重命名操作</p>\n<p>rename (需要修改的文件名，新的文件名)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.rename(<span class=\"string\">&quot;毕业论文.txt&quot;</span>, <span class=\"string\">&quot;毕业论文-最终版.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>删除文件</strong></p>\n<p>os 模块中的 remove () 可以完成对文件的删除操作</p>\n<p>remove (待删除的文件名)</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.remove(<span class=\"string\">&quot;毕业论文.txt&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>创建文件夹</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.mkdir(<span class=\"string\">&quot;张三&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>获取当前目录</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.getcwd()</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>改变默认目录</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.chdir(<span class=\"string\">&quot;../&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>获取目录列表</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.listdir(<span class=\"string\">&quot;./&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p><strong>删除文件夹</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> os</span><br><span class=\"line\">os.rmdir(<span class=\"string\">&quot;张三&quot;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h1><span id=\"20210319\"> 2021.03.19</span></h1>\n<p>（1）面向对象：强调对象（实体），我们充当<strong>指挥者</strong>的角色</p>\n<pre><code> 面向过程：强调过程（动作），我们充当**执行者**的角色\n</code></pre>\n<p>（2）面向对象的特征：继承、封装、多态。</p>\n<p>面向对象的编程带来的主要好处之一是<strong>代码的重用</strong>，实现这种重用的方法之一是通过<strong>继承机制</strong>。</p>\n<p>通过继承创建的新类称为<strong>子类</strong>或<strong>派生类</strong>，被继承的类称为<strong>基类</strong>、<strong>父类</strong>或<strong>超类</strong>。</p>\n<p>（3）用类去创建对象 ==&gt; 用类去实例化对象</p>\n<p>（4）类是对一系列具有相同特征（属性）和行为（方法）的事物的统称，遵循大驼峰命名规则。</p>\n<p>​         对象是具体的类</p>\n<p>（5）self : 调用该函数的对象，不需要传递。也可以用其它字符代替。</p>\n<p>​\t类里面获取属性：self. 属性名</p>\n<p>（6）魔法方法：类里面都具备的方法，以‘–’开头结尾的都是魔法方法，创建对象的时候自动执行。</p>\n<ul>\n<li>成员属性：作用域：通过对象访问</li>\n<li>局部变量：作用域：在函数内部使用</li>\n</ul>\n<p>（7) 魔法方法</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># __init__  初始化对象，可以传递参数。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __str__   代替对象的内存地址为reture的返回值,当使用print输出对象的时候，直接打印这个返回值，作为对这个对象的描写。</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __del__ \t删除对象时，会调用该方法 （析构函数）</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __repr__  转化为供解释器读取的形式</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># __cmp__ ( self, x )   对象比较</span></span><br></pre></td></tr></table></figure>\n<p><strong>运算符重载</strong></p>\n<p>Python 同样支持运算符重载，实例如下：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Vector</span>:</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, a, b</span>):</span></span><br><span class=\"line\">      self.a = a</span><br><span class=\"line\">      self.b = b</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__str__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Vector (%d, %d)&#x27;</span> % (self.a, self.b)</span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__add__</span>(<span class=\"params\">self,other</span>):</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> Vector(self.a + other.a, self.b + other.b)</span><br><span class=\"line\"> </span><br><span class=\"line\">v1 = Vector(<span class=\"number\">2</span>,<span class=\"number\">10</span>)</span><br><span class=\"line\">v2 = Vector(<span class=\"number\">5</span>,-<span class=\"number\">2</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> v1 + v2</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;Vector(<span class=\"number\">7</span>,<span class=\"number\">8</span>)</span><br></pre></td></tr></table></figure>\n<p><strong>Python 内置类属性</strong></p>\n<ul>\n<li>\n<p><strong>dict</strong> : 类的属性（包含一个字典，由类的数据属性组成）</p>\n</li>\n<li>\n<p><strong>doc</strong> : 类的文档字符串</p>\n</li>\n<li>\n<p><strong>name</strong>: 类名</p>\n</li>\n<li>\n<p><strong>module</strong>:   类定义所在的模块（类的全名是’<strong>main</strong>.className’，如果类位于一个导入模块 mymod 中，那么 className.<strong>module</strong> 等于 mymod）</p>\n</li>\n<li>\n<p><strong>bases</strong> : 类的所有父类构成元素（包含了一个由所有父类组成的元组）</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Employee</span>:</span></span><br><span class=\"line\">   <span class=\"string\">&#x27;所有员工的基类&#x27;</span></span><br><span class=\"line\">   empCount = <span class=\"number\">0</span></span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, name, salary</span>):</span></span><br><span class=\"line\">      self.name = name</span><br><span class=\"line\">      self.salary = salary</span><br><span class=\"line\">      Employee.empCount += <span class=\"number\">1</span></span><br><span class=\"line\">   </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayCount</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">     <span class=\"built_in\">print</span> <span class=\"string\">&quot;Total Employee %d&quot;</span> % Employee.empCount</span><br><span class=\"line\"> </span><br><span class=\"line\">   <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">displayEmployee</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">      <span class=\"built_in\">print</span> <span class=\"string\">&quot;Name : &quot;</span>, self.name,  <span class=\"string\">&quot;, Salary: &quot;</span>, self.salary</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__doc__:&quot;</span>, Employee.__doc__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__name__:&quot;</span>, Employee.__name__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__module__:&quot;</span>, Employee.__module__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__bases__:&quot;</span>, Employee.__bases__</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">&quot;Employee.__dict__:&quot;</span>, Employee.__dict__</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;Employee.__doc__: 所有员工的基类</span><br><span class=\"line\">Employee.__name__: Employee</span><br><span class=\"line\">Employee.__module__: __main__</span><br><span class=\"line\">Employee.__bases__: ()</span><br><span class=\"line\">Employee.__dict__: &#123;<span class=\"string\">&#x27;__module__&#x27;</span>: <span class=\"string\">&#x27;__main__&#x27;</span>, <span class=\"string\">&#x27;displayCount&#x27;</span>: &lt;function displayCount at <span class=\"number\">0x10a939c80</span>&gt;, <span class=\"string\">&#x27;empCount&#x27;</span>: <span class=\"number\">0</span>, <span class=\"string\">&#x27;displayEmployee&#x27;</span>: &lt;function displayEmployee at <span class=\"number\">0x10a93caa0</span>&gt;, <span class=\"string\">&#x27;__doc__&#x27;</span>: <span class=\"string\">&#x27;\\xe6\\x89\\x80\\xe6\\x9c\\x89\\xe5\\x91\\x98\\xe5\\xb7\\xa5\\xe7\\x9a\\x84\\xe5\\x9f\\xba\\xe7\\xb1\\xbb&#x27;</span>, <span class=\"string\">&#x27;__init__&#x27;</span>: &lt;function __init__ at <span class=\"number\">0x10a939578</span>&gt;&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p><strong>Python 对象销毁 (垃圾回收)</strong></p>\n<ul>\n<li>Python 使用了<strong>引用计数</strong>这一简单技术来跟踪和回收垃圾。</li>\n</ul>\n<p>在 Python 内部记录着所有使用中的对象各有多少引用。</p>\n<ul>\n<li>\n<p>一个内部跟踪变量，称为一个引用计数器。</p>\n</li>\n<li>\n<p>当对象被创建时， 就创建了一个引用计数， 当这个对象不再需要时，  也就是说， 这个对象的引用计数变为 0 时， 它被垃圾回收。但是回收不是 &quot;立即&quot; 的， 由解释器在适当的时机，将垃圾对象占用的内存空间回收。</p>\n</li>\n<li>\n<p>垃圾回收机制不仅针对引用计数为 0 的对象，同样也可以处理循环引用的情况。循环引用指的是，两个对象相互引用，但是没有其他变量引用他们。这种情况下，仅使用引用计数是不够的。</p>\n</li>\n<li>\n<p>Python 的垃圾收集器实际上是一个引用计数器和一个循环垃圾收集器。作为引用计数的补充，垃圾收集器也会留心被分配的总量很大（即未通过引用计数销毁的那些）的对象。 在这种情况下， 解释器会暂停下来， 试图清理所有未引用的循环。</p>\n</li>\n</ul>\n<h1><span id=\"20210320\"> 2021.03.20</span></h1>\n<p>（1）<strong>多继承</strong></p>\n<ul>\n<li>\n<p>继承多个父类，<strong>优先继承第一个父类</strong></p>\n</li>\n<li>\n<p>子类可以调用所有父类中不同名的方法</p>\n</li>\n<li>\n<p>如果子类和父类拥有同名属性和方法，则子类创建出来的对象会直接调用子类自己的属性和方法，即<strong>子类重写父类方法</strong>。</p>\n</li>\n<li>\n<p><strong>子类调用父类的同名方法和属性：</strong></p>\n<ul>\n<li>\n<p>先调用自己子类方法的初始化</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_cake</span>（<span class=\"title\">self</span>）:</span></span><br><span class=\"line\">    <span class=\"comment\"># 添加自己的初始化</span></span><br><span class=\"line\">    self.__init__()  <span class=\"comment\"># 不需要加self</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;子类打印内容&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>将父类同名属性和方法再次封装</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">make_master_cake</span>(<span class=\"params\">self，name</span>):</span></span><br><span class=\"line\">    <span class=\"comment\"># 首先调用init初始化属性</span></span><br><span class=\"line\">    Master.__init__(self,name)</span><br><span class=\"line\">    <span class=\"comment\"># 调用父类同名的方法和属性</span></span><br><span class=\"line\">    Master.make_cake(self)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n</li>\n</ul>\n<p>（2）print (类名.__mro__)    # 显示该类的继承关系</p>\n<p>（3）多层继承：</p>\n<ul>\n<li>\n<p>super ()  调用父类，适用单继承</p>\n</li>\n<li>\n<p>如果重写了__init__ 时，要继承父类的构造方法，可以使用 super 关键字：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">super(子类，self).__init__(参数1，参数2，....)</span><br></pre></td></tr></table></figure>\n<p>还有一种经典写法：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">父类名称.__init__(self,参数1，参数2，...)</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（4）定义私有属性和方法（私有属性和方法不能被子类继承）</p>\n<p><strong>类的私有属性</strong></p>\n<p><strong>__private_attrs</strong>：两个下划线开头，声明该属性为私有，不能在类的外部被使用或直接访问。在类内部的方法中使用时 <strong>self.__private_attrs</strong>。</p>\n<p><strong>类的方法</strong></p>\n<p>在类的内部，使用 def 关键字可以为类定义一个方法，与一般函数定义不同，类方法必须包含参数 self, 且为第一个参数</p>\n<p><strong>类的私有方法</strong></p>\n<p><strong>__private_method</strong>：两个下划线开头，声明该方法为私有方法，不能在类的外部调用。在类的内部调用 <strong>self.__private_methods</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">JustCounter</span>:</span></span><br><span class=\"line\">    __secretCount = <span class=\"number\">0</span>  <span class=\"comment\"># 私有变量</span></span><br><span class=\"line\">    publicCount = <span class=\"number\">0</span>    <span class=\"comment\"># 公开变量</span></span><br><span class=\"line\"> </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">count</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.__secretCount += <span class=\"number\">1</span></span><br><span class=\"line\">        self.publicCount += <span class=\"number\">1</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> self.__secretCount</span><br><span class=\"line\"> </span><br><span class=\"line\">counter = JustCounter()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\">counter.count()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(counter.publicCount)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(counter.__secretCount)  <span class=\"comment\"># 报错，实例不能访问私有变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"number\">2</span></span><br><span class=\"line\">Traceback (most recent call last):</span><br><span class=\"line\">  File <span class=\"string\">&quot;test.py&quot;</span>, line <span class=\"number\">17</span>, <span class=\"keyword\">in</span> &lt;module&gt;</span><br><span class=\"line\">    <span class=\"built_in\">print</span> counter.__secretCount  <span class=\"comment\"># 报错，实例不能访问私有变量</span></span><br><span class=\"line\">AttributeError: JustCounter instance has no attribute <span class=\"string\">&#x27;__secretCount&#x27;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>只能在类内使用，外部打印是不能的。</p>\n</li>\n<li>\n<p>Python 不允许实例化的类访问私有数据，但你可以使用 object._className__attrName（ 对象名._类名__私有属性名 ）访问属性</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Runoob</span>:</span></span><br><span class=\"line\">    __site = <span class=\"string\">&quot;www.runoob.com&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">runoob = Runoob()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(runoob._Runoob__site)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">www.runoob.com</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>（5） 获取和修改私有属性值</p>\n<ul>\n<li>\n<p><strong>get_XX</strong></p>\n<p>在类里面定义函数调用私有属性，外部调用该方法显示私有属性值。</p>\n</li>\n<li>\n<p><strong>set_XX</strong><br>\n 在类里面定义函数调用私有属性，外部调用该方法设置私有属性值。</p>\n</li>\n</ul>\n<p>（6）<strong>多态</strong>（同一功能，不同表现形式 —— 静态类型语言）</p>\n<p>（7）<strong>封装</strong></p>\n<ul>\n<li>隐藏内部实现的细节，只保留功能接口。</li>\n<li>前提是私有化</li>\n<li>函数、类、模块、包等都是封装</li>\n</ul>\n<p>​\t<strong>shift +F6</strong>   Pycharm 中替换功能</p>\n<p>（8）单下划线、双下划线、头尾双下划线说明：</p>\n<ul>\n<li><strong>__foo__</strong>: 定义的是特殊方法，一般是系统定义名字 ，类似 <strong>init</strong> () 之类的。</li>\n<li><strong>_foo</strong>: 以单下划线开头的表示的是 protected 类型的变量，即保护类型只能允许其本身与子类进行访问，不能用于 from module import *</li>\n<li><strong>__foo</strong>: 双下划线的表示的是私有类型 (private) 的变量，只能是允许这个类本身进行访问了。</li>\n</ul>\n<p>（9）继承 object 类的是<strong>新式类</strong>，不继承 object 类的是<strong>经典类</strong></p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;called A.foo()&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">foo</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;called C.foo()&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">D</span>(<span class=\"params\">B, C</span>):</span> </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">    d = D() </span><br><span class=\"line\">    d.foo()</span><br></pre></td></tr></table></figure>\n<ul>\n<li>B、C 是 A 的子类，D 多继承了 B、C 两个类，其中 C 重写了 A 中的 foo () 方法。</li>\n<li>如果 A 是<strong>经典类</strong>（如上代码），当调用 D 的实例的 foo () 方法时，Python 会按照<strong>深度优先</strong>的方法去搜索 foo () ，路径是 B-A-C ，执行的是 A 中的 foo () ；</li>\n<li>如果 A 是<strong>新式类</strong>，当调用 D 的实例的 foo () 方法时，Python 会按照<strong>广度优先</strong>的方法去搜索 foo () ，路径是 B-C-A ，执行的是 C 中的 foo () 。</li>\n<li>因为 D 是直接继承 C 的，从逻辑上说，执行 C 中的 foo () 更加合理，因此新式类对多继承的处理更为合乎逻辑。</li>\n<li>在 Python 3.x 中的新式类貌似已经兼容了经典类，无论 A 是否继承 object 类， D 实例中的 foo () 都会执行 C  中的 foo () 。</li>\n<li>但是在 Python 2.7 中这种差异仍然存在，因此还是推荐使用新式类，要继承 object 类。</li>\n</ul>\n<p>（10）所有的实例都<strong>共享类属性</strong>，因此，当在 class 语句外<strong>修改类属性</strong>时，会导致所有由这个类创建的实例的类属性都随之变化，除非实例本身有同名的<strong>实例属性</strong>对类属性进行了覆盖，比如代码中的 d.cls_pre = ‘ddddd’。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">CA</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"></span><br><span class=\"line\">    cls_pre = <span class=\"string\">&#x27;aaaaa&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">        self.obj_pre = <span class=\"string\">&#x27;bbbbb&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">a = CA()</span><br><span class=\"line\">b = CA()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.cls_pre, a.obj_pre)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b.cls_pre, b.obj_pre)</span><br><span class=\"line\"></span><br><span class=\"line\">CA.cls_pre = <span class=\"string\">&#x27;ccccc&#x27;</span></span><br><span class=\"line\">c = CA()</span><br><span class=\"line\"></span><br><span class=\"line\">d = CA()</span><br><span class=\"line\">d.cls_pre = <span class=\"string\">&#x27;ddddd&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span>(a.cls_pre, a.obj_pre)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(b.cls_pre, b.obj_pre)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(c.cls_pre, c.obj_pre)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(d.cls_pre, d.obj_pre)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">aaaaa bbbbb</span><br><span class=\"line\">aaaaa bbbbb</span><br><span class=\"line\">ccccc bbbbb</span><br><span class=\"line\">ccccc bbbbb</span><br><span class=\"line\">ccccc bbbbb</span><br><span class=\"line\">ddddd bbbbb</span><br></pre></td></tr></table></figure>\n<p>代码中，将类属性 CA.cls_pre 重新赋值为 ‘ccccc’。在修改类属性之后，不仅是后续创建的类实例 c 的 cls_pre 发生变化，在修改类属性之前的创建的类实例 a、b 的类属性 cls_pre 都发生了变化。</p>\n<h1><span id=\"20210321\"> 2021.03.21</span></h1>\n<p>Python 内置函数：</p>\n<ul>\n<li>\n<p>abs()</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(-<span class=\"number\">45</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">100.12</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">119L</span>))</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">abs</span>(<span class=\"number\">1</span>+<span class=\"number\">2j</span>))  <span class=\"comment\"># 如果为复数时，则返回复数的绝对值，即a^2 + b^2 开根。</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">45</span></span><br><span class=\"line\"><span class=\"number\">100.12</span></span><br><span class=\"line\"><span class=\"number\">119</span></span><br><span class=\"line\"><span class=\"number\">2.23606797749979</span></span><br></pre></td></tr></table></figure>\n</li>\n<li>\n<p>divmod ()      返回一个包含商和余数的元组 (a //b, a % b)</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">divmod</span>(<span class=\"number\">7</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">3</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">divmod</span>(<span class=\"number\">8</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">(<span class=\"number\">4</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">divmod</span>(<span class=\"number\">1</span>+<span class=\"number\">2j</span>,<span class=\"number\">1</span>+<span class=\"number\">0.5j</span>)</span><br><span class=\"line\">((<span class=\"number\">1</span>+<span class=\"number\">0j</span>), <span class=\"number\">1.5j</span>)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>staticmethod 返回函数的静态方法，该方法不强制要求传递参数，即静态方法无需实例化，减少不必要的内存占用和性能消耗</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">f</span>():</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&#x27;runoob&#x27;</span>);</span><br><span class=\"line\"> </span><br><span class=\"line\">C.f();          <span class=\"comment\"># 静态方法无需实例化</span></span><br><span class=\"line\">cobj = C()</span><br><span class=\"line\">cobj.f()        <span class=\"comment\"># 也可以实例化后调用</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">runoob</span><br><span class=\"line\">runoob </span><br></pre></td></tr></table></figure>\n<p>staticmethod 参数要求是 Callable, 也就是说 Class 也是可以的：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C1</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\"><span class=\"meta\">    @staticmethod</span></span><br><span class=\"line\">    <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">C2</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, val = <span class=\"number\">1</span></span>):</span></span><br><span class=\"line\">            self.val = val</span><br><span class=\"line\">        <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shout</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">            <span class=\"built_in\">print</span>(<span class=\"string\">&quot;Python世界第%d!&quot;</span>%self.val)</span><br><span class=\"line\">tmp = C1.C2(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(tmp))    <span class=\"comment\"># 输出 : &lt;class &#x27;__main__.C1.C2&#x27;&gt;</span></span><br><span class=\"line\">tmp.shout()         <span class=\"comment\"># 输出 : Python世界第0!</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>all () 函数用于判断给定的可迭代参数 iterable 中的所有元素是否都为 TRUE，如果是返回 True，否则返回 False。元素除了是 0、空、None、False 外都算 True。\n<ul>\n<li>注意：空元组、空列表返回值为 True，这里要特别注意。</li>\n<li><strong>所以的为真则为 Ture</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>])  <span class=\"comment\"># 列表list，元素都不为空或0</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>])   <span class=\"comment\"># 列表list，存在一个为空的元素</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>([<span class=\"number\">0</span>, <span class=\"number\">1</span>，<span class=\"number\">2</span>, <span class=\"number\">3</span>])          <span class=\"comment\"># 列表list，存在一个为0的元素</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>((<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>))  <span class=\"comment\"># 元组tuple，元素都不为空或0</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>((<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>))   <span class=\"comment\"># 元组tuple，存在一个为空的元素</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>((<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>))          <span class=\"comment\"># 元组tuple，存在一个为0的元素</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">   </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>([])             <span class=\"comment\"># 空列表</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">all</span>(())             <span class=\"comment\"># 空元组</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>any () 函数用于判断给定的可迭代参数 iterable 是否全部为 False，则返回 False，如果有一个为 True，则返回 True。\n<ul>\n<li>如果都为空、0、false，则返回 false，如果不都为空、0、false，则返回 true。</li>\n<li>注意：空元组、空列表返回值为 False，这里要特别注意。</li>\n<li><strong>任何一个有效则为 True</strong></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">any</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>])  <span class=\"comment\"># 列表list，元素都不为空或0</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>([<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>])   <span class=\"comment\"># 列表list，存在一个为空的元素</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>([<span class=\"number\">0</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"literal\">False</span>])        <span class=\"comment\"># 列表list,元素全为0,&#x27;&#x27;,false</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>((<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;c&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>))  <span class=\"comment\"># 元组tuple，元素都不为空或0</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>((<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"string\">&#x27;d&#x27;</span>))   <span class=\"comment\"># 元组tuple，存在一个为空的元素</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>((<span class=\"number\">0</span>, <span class=\"string\">&#x27;&#x27;</span>, <span class=\"literal\">False</span>))        <span class=\"comment\"># 元组tuple，元素全为0,&#x27;&#x27;,false</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>([]) <span class=\"comment\"># 空列表</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">any</span>(()) <span class=\"comment\"># 空元组</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>enumerate () 函数用于将一个可遍历的数据对象 (如列表、元组或字符串) 组合为一个索引序列，同时列出数据和数据下标，一般用在 for 循环当中。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;seasons = [<span class=\"string\">&#x27;Spring&#x27;</span>, <span class=\"string\">&#x27;Summer&#x27;</span>, <span class=\"string\">&#x27;Fall&#x27;</span>, <span class=\"string\">&#x27;Winter&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">enumerate</span>(seasons))</span><br><span class=\"line\">[(<span class=\"number\">0</span>, <span class=\"string\">&#x27;Spring&#x27;</span>), (<span class=\"number\">1</span>, <span class=\"string\">&#x27;Summer&#x27;</span>), (<span class=\"number\">2</span>, <span class=\"string\">&#x27;Fall&#x27;</span>), (<span class=\"number\">3</span>, <span class=\"string\">&#x27;Winter&#x27;</span>)]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">list</span>(<span class=\"built_in\">enumerate</span>(seasons, start=<span class=\"number\">1</span>))       <span class=\"comment\"># 下标从 1 开始</span></span><br><span class=\"line\">[(<span class=\"number\">1</span>, <span class=\"string\">&#x27;Spring&#x27;</span>), (<span class=\"number\">2</span>, <span class=\"string\">&#x27;Summer&#x27;</span>), (<span class=\"number\">3</span>, <span class=\"string\">&#x27;Fall&#x27;</span>), (<span class=\"number\">4</span>, <span class=\"string\">&#x27;Winter&#x27;</span>)]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 普通for循环</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;i = <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>seq = [<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> element <span class=\"keyword\">in</span> seq:</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span> i, seq[i]</span><br><span class=\"line\"><span class=\"meta\">... </span>    i +=<span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"number\">0</span> one</span><br><span class=\"line\"><span class=\"number\">1</span> two</span><br><span class=\"line\"><span class=\"number\">2</span> three</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># For循环使用enumerate</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;seq = [<span class=\"string\">&#x27;one&#x27;</span>, <span class=\"string\">&#x27;two&#x27;</span>, <span class=\"string\">&#x27;three&#x27;</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"keyword\">for</span> i, element <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(seq):</span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span> i, element</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"number\">0</span> one</span><br><span class=\"line\"><span class=\"number\">1</span> two</span><br><span class=\"line\"><span class=\"number\">2</span> three</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 巧妙的利用enumerate（）批量修改列表中的元素</span></span><br><span class=\"line\">list1 = [<span class=\"string\">&#x27;01&#x27;</span>,<span class=\"string\">&#x27;02&#x27;</span>,<span class=\"string\">&#x27;03&#x27;</span>]</span><br><span class=\"line\">unit_element = <span class=\"string\">&#x27;1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># list1=[&quot;1&quot;+str for str in list1] #推导式实现拼接</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> i,element <span class=\"keyword\">in</span> <span class=\"built_in\">enumerate</span>(list1):</span><br><span class=\"line\">  list1[i] = unit_element + element   <span class=\"comment\"># 字符串拼接</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(list1)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"string\">&#x27;101&#x27;</span>, <span class=\"string\">&#x27;102&#x27;</span>, <span class=\"string\">&#x27;103&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<ul>\n<li>ord©   返回值是对应的 ASCII 码（十进制整数）。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">97</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;b&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">98</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">ord</span>(<span class=\"string\">&#x27;c&#x27;</span>)</span><br><span class=\"line\"><span class=\"number\">99</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>isinstance () 函数来判断一个对象是否是一个已知的类型，类似 type ()。</p>\n<ul>\n<li>\n<blockquote>\n<p>isinstance () 与 type () 区别：</p>\n<ul>\n<li>type () 不会认为子类是一种父类类型，不考虑继承关系。</li>\n<li>isinstance () 会认为子类是一种父类类型，考虑继承关系。</li>\n</ul>\n<p>如果要判断两个类型是否相同推荐使用 isinstance ()。</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;a = <span class=\"number\">2</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span> (a,<span class=\"built_in\">int</span>)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span> (a,<span class=\"built_in\">str</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">isinstance</span> (a,(<span class=\"built_in\">str</span>,<span class=\"built_in\">int</span>,<span class=\"built_in\">list</span>))    <span class=\"comment\"># 是元组中的一个返回 True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># type()和isinstance()的区别</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(A(), A)    <span class=\"comment\"># returns True</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(A()) == A        <span class=\"comment\"># returns True</span></span><br><span class=\"line\"><span class=\"built_in\">isinstance</span>(B(), A)    <span class=\"comment\"># returns True</span></span><br><span class=\"line\"><span class=\"built_in\">type</span>(B()) == A        <span class=\"comment\"># returns False</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>pow()</strong> 方法返回 xy（x 的 y 次方） 的值。\n<ul>\n<li>pow (x, y [, z])  等效于 pow (x,y) % z，当 z 这个参数不存在时  x,y 不限制是否为 float 类型，而当使用第三个参数的时候<strong>要保证前两个参数只能为整数</strong>。</li>\n<li>pow (x, y) 并不等价与 x**y，因为 pow 函数会把整数转换为浮点数，会出现误差。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> math   <span class=\"comment\"># 导入 math 模块</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">f&#x27;math.pow(100, 2):<span class=\"subst\">&#123;math.<span class=\"built_in\">pow</span>(<span class=\"number\">100</span>, <span class=\"number\">2</span>)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"comment\"># 使用内置，查看输出结果区别</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">f&#x27;pow(100, 2):<span class=\"subst\">&#123;<span class=\"built_in\">pow</span>(<span class=\"number\">100</span>, <span class=\"number\">2</span>)&#125;</span>&#x27;</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">f&#x27;math.pow(100, -2) : <span class=\"subst\">&#123;math.<span class=\"built_in\">pow</span>(<span class=\"number\">100</span>, -<span class=\"number\">2</span>)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">f&#x27;math.pow(2, 4) :<span class=\"subst\">&#123;math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>)&#125;</span>&#x27;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">f&#x27;math.pow(3, 0) : <span class=\"subst\">&#123;math.<span class=\"built_in\">pow</span>(<span class=\"number\">3</span>, <span class=\"number\">0</span>)&#125;</span>&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">#pow(x, y[, z])  等效于 pow(x,y) %z</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"number\">4</span>**<span class=\"number\">2.5</span>%<span class=\"number\">3</span>)  <span class=\"comment\"># 结果为2.0</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">math.<span class=\"built_in\">pow</span>(<span class=\"number\">100</span>, <span class=\"number\">2</span>) :  <span class=\"number\">10000.0</span></span><br><span class=\"line\"><span class=\"built_in\">pow</span>(<span class=\"number\">100</span>, <span class=\"number\">2</span>) :  <span class=\"number\">10000</span></span><br><span class=\"line\">math.<span class=\"built_in\">pow</span>(<span class=\"number\">100</span>, -<span class=\"number\">2</span>) :  <span class=\"number\">0.0001</span></span><br><span class=\"line\">math.<span class=\"built_in\">pow</span>(<span class=\"number\">2</span>, <span class=\"number\">4</span>) :  <span class=\"number\">16.0</span></span><br><span class=\"line\">math.<span class=\"built_in\">pow</span>(<span class=\"number\">3</span>, <span class=\"number\">0</span>) :  <span class=\"number\">1.0</span></span><br><span class=\"line\"><span class=\"number\">2.0</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>sum()</strong> 方法对序列进行求和计算。\n<ul>\n<li>iterable – 可迭代对象，如：列表、元组、集合。</li>\n<li>start – 指定相加的参数，如果没有设置这个值，默认为 0。</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">sum</span>([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>])  </span><br><span class=\"line\"><span class=\"number\">3</span>  </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>((<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>), <span class=\"number\">1</span>)        <span class=\"comment\"># 元组计算总和后再加 1</span></span><br><span class=\"line\"><span class=\"number\">10</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">sum</span>([<span class=\"number\">0</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>], <span class=\"number\">2</span>)      <span class=\"comment\"># 列表计算总和后再加 2</span></span><br><span class=\"line\"><span class=\"number\">12</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np</span><br><span class=\"line\"></span><br><span class=\"line\">a = np.array([[<span class=\"number\">1</span>,<span class=\"number\">2</span>],[<span class=\"number\">3</span>,<span class=\"number\">4</span>]])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按行相加，并且保持其二维特性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(np.<span class=\"built_in\">sum</span>(a, axis=<span class=\"number\">1</span>, keepdims=<span class=\"literal\">True</span>))</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 按行相加，不保持其二维特性</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(np.<span class=\"built_in\">sum</span>(a, axis=<span class=\"number\">1</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">array([[<span class=\"number\">3</span>], [<span class=\"number\">7</span>]])</span><br><span class=\"line\">array([<span class=\"number\">3</span>, <span class=\"number\">7</span>])</span><br></pre></td></tr></table></figure>\n<ul>\n<li>issubclass (class, classinfo)   用于判断参数 class 是否是类型参数 classinfo 的子类。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>(<span class=\"params\">A</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">issubclass</span>(B,A))    <span class=\"comment\"># 返回 True</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>bin()</strong> 返回一个整数 int 或者长整数 long int 的二进制表示。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">bin</span>(<span class=\"number\">10</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0b1010&#x27;</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">bin</span>(<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"string\">&#x27;0b10100&#x27;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p>range (start, stop [, step]) 函数可创建一个整数列表，一般用在 for 循环中。</p>\n<p>参数说明：</p>\n<ul>\n<li>start: 计数从 start 开始。默认是从 0 开始。例如 range（5）等价于 range（0， 5）;</li>\n<li>stop: 计数到 stop 结束，但不包括 stop。例如：range（0， 5） 是 [0, 1, 2, 3, 4] 没有 5</li>\n<li>step：步长，默认为 1。例如：range（0， 5） 等价于 range (0, 5, 1)</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">range</span>(<span class=\"number\">10</span>)        <span class=\"comment\"># 从 0 开始到 10</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">11</span>)     <span class=\"comment\"># 从 1 开始到 11</span></span><br><span class=\"line\">[<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>, <span class=\"number\">10</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">30</span>, <span class=\"number\">5</span>)  <span class=\"comment\"># 步长为 5</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">5</span>, <span class=\"number\">10</span>, <span class=\"number\">15</span>, <span class=\"number\">20</span>, <span class=\"number\">25</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>, <span class=\"number\">10</span>, <span class=\"number\">3</span>)  <span class=\"comment\"># 步长为 3</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, <span class=\"number\">3</span>, <span class=\"number\">6</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>, -<span class=\"number\">10</span>, -<span class=\"number\">1</span>) <span class=\"comment\"># 负数</span></span><br><span class=\"line\">[<span class=\"number\">0</span>, -<span class=\"number\">1</span>, -<span class=\"number\">2</span>, -<span class=\"number\">3</span>, -<span class=\"number\">4</span>, -<span class=\"number\">5</span>, -<span class=\"number\">6</span>, -<span class=\"number\">7</span>, -<span class=\"number\">8</span>, -<span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\">[]</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">0</span>)</span><br><span class=\"line\">[]</span><br></pre></td></tr></table></figure>\n<p>range () 函数返回的结果是一个整数序列的对象，而不是列表。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">type</span>(<span class=\"built_in\">range</span>(<span class=\"number\">10</span>))</span><br><span class=\"line\">&lt;<span class=\"class\"><span class=\"keyword\">class</span> &#x27;<span class=\"title\">range</span>&#x27;&gt;</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt;<span class=\"title\">help</span>(<span class=\"params\"><span class=\"built_in\">range</span></span>)</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"title\">Return</span> <span class=\"title\">an</span> <span class=\"title\">object</span>...</span></span><br><span class=\"line\"><span class=\"class\"></span></span><br><span class=\"line\"><span class=\"class\"># 将<span class=\"title\">range</span>（）函数返回一个列表</span></span><br><span class=\"line\"><span class=\"class\">&gt;&gt;&gt; <span class=\"title\">list</span>(<span class=\"params\"><span class=\"built_in\">range</span>(<span class=\"params\"><span class=\"number\">10</span></span>)</span>)</span></span><br><span class=\"line\">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">print</span>([i <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">10</span>)])</span><br><span class=\"line\"><span class=\"comment\"># 用来做计算</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>([x*x <span class=\"keyword\">for</span> x <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">2</span>, <span class=\"number\">8</span>)])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 两层循环,生成全排列的list</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>([m + n <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABC&#x27;</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"string\">&#x27;XYZ&#x27;</span>]))</span><br><span class=\"line\"><span class=\"built_in\">print</span>([m + n <span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABC&#x27;</span> <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"string\">&#x27;XYZ&#x27;</span>])</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 这种方式生成单个str</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> m <span class=\"keyword\">in</span> <span class=\"string\">&#x27;ABC&#x27;</span>:</span><br><span class=\"line\">    <span class=\"keyword\">for</span> n <span class=\"keyword\">in</span> <span class=\"string\">&#x27;XYZ&#x27;</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"built_in\">type</span>(m + n))</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(m + n)</span><br></pre></td></tr></table></figure>\n<p>range 生成的列表，列表中的元素相互独立，即地址各不相同，这与 * 号重复列表生成的列表大相径庭，前者类似深拷贝，后者则纯粹是浅拷贝，如下所示：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [<span class=\"number\">0</span>] * <span class=\"number\">3</span></span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">u&#x27;这是浅拷贝&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> a: </span><br><span class=\"line\">   <span class=\"built_in\">print</span> <span class=\"built_in\">id</span>(num)</span><br><span class=\"line\">b = <span class=\"built_in\">range</span>(<span class=\"number\">3</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span> <span class=\"string\">u&#x27;这是深拷贝&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> num <span class=\"keyword\">in</span> b:</span><br><span class=\"line\">   <span class=\"built_in\">print</span> <span class=\"built_in\">id</span>(num)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">这是浅拷贝</span><br><span class=\"line\"><span class=\"number\">54813568</span></span><br><span class=\"line\"><span class=\"number\">54813568</span></span><br><span class=\"line\"><span class=\"number\">54813568</span></span><br><span class=\"line\">这是深拷贝</span><br><span class=\"line\"><span class=\"number\">54813568</span></span><br><span class=\"line\"><span class=\"number\">54813544</span></span><br><span class=\"line\"><span class=\"number\">54813520</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>callable()</strong> 函数用于检查一个对象是否是可调用的。</p>\n<ul>\n<li>\n<p>如果返回 True，object 仍然可能调用失败；但如果返回 False，调用对象 object 绝对不会成功。</p>\n</li>\n<li>\n<p>对于函数、方法、lambda 函式、 类以及实现了 __call__ 方法的类实例，它都返回 True。</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">callable</span>(<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(<span class=\"string\">&quot;runoob&quot;</span>)</span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"keyword\">return</span> a + b</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(add)             <span class=\"comment\"># 函数返回 True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>:</span>                  <span class=\"comment\"># 类</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">method</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(A)               <span class=\"comment\"># 类返回 True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>a = A()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(a)               <span class=\"comment\"># 没有实现 __call__, 返回 False</span></span><br><span class=\"line\"><span class=\"literal\">False</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">B</span>:</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__call__</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\"><span class=\"meta\">... </span>            <span class=\"keyword\">return</span> <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(B)</span><br><span class=\"line\"><span class=\"literal\">True</span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>b = B()</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">callable</span>(b)               <span class=\"comment\"># 实现 __call__, 返回 True</span></span><br><span class=\"line\"><span class=\"literal\">True</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>locals()</strong> 函数会以字典类型返回当前位置的全部局部变量。</p>\n<p>对于函数，方法，lambda 函式，类，以及实现了 __call__ 方法的类实例，它都返回 True。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">runoob</span>(<span class=\"params\">arg</span>):</span>    <span class=\"comment\"># 两个局部变量：arg、z</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    z = <span class=\"number\">1</span></span><br><span class=\"line\"><span class=\"meta\">... </span>    <span class=\"built_in\">print</span> (<span class=\"built_in\">locals</span>())</span><br><span class=\"line\"><span class=\"meta\">... </span></span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span>runoob(<span class=\"number\">4</span>)</span><br><span class=\"line\">&#123;<span class=\"string\">&#x27;z&#x27;</span>: <span class=\"number\">1</span>, <span class=\"string\">&#x27;arg&#x27;</span>: <span class=\"number\">4</span>&#125;      <span class=\"comment\"># 返回一个名字/值对的字典</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>reduce()</strong> 函数会对参数序列中元素进行累积。</p>\n<p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">x, y</span>) :</span>            <span class=\"comment\"># 两数相加</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\">sum1 = reduce(add, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])   <span class=\"comment\"># 调用add函数，计算列表和：1+2+3+4+5</span></span><br><span class=\"line\"></span><br><span class=\"line\">sum2 = reduce(<span class=\"keyword\">lambda</span> x, y: x+y, [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>])  <span class=\"comment\"># 使用 lambda 匿名函数</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(sum1)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(sum2)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">15</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">x,y</span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> x + y</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">print</span> (reduce(add, <span class=\"built_in\">range</span>(<span class=\"number\">1</span>, <span class=\"number\">101</span>)))</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">5050</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 统计某字符串重复次数:</span></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce</span><br><span class=\"line\">sentences = [<span class=\"string\">&#x27;The Deep Learning textbook is a resource intended to help students and practitioners enter the field of machine learning in general and deep learning in particular. &#x27;</span>] </span><br><span class=\"line\">word_count =reduce(<span class=\"keyword\">lambda</span> a,x:a+x.count(<span class=\"string\">&quot;learning&quot;</span>),sentences,<span class=\"number\">0</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(word_count)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\"><span class=\"number\">2</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 实现字符串反转</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">from</span> functools <span class=\"keyword\">import</span> reduce </span><br><span class=\"line\"></span><br><span class=\"line\">str1=<span class=\"string\">&quot;hello&quot;</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(reduce(<span class=\"keyword\">lambda</span> x,y:y+x,str1))</span><br><span class=\"line\"><span class=\"comment\"># 输出 olleh</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>chr () 用一个范围在 range（256）内的（就是 0～255）整数作参数，返回一个对应的字符。</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;&gt;&gt;<span class=\"built_in\">print</span> <span class=\"built_in\">chr</span>(<span class=\"number\">0x30</span>), <span class=\"built_in\">chr</span>(<span class=\"number\">0x31</span>), <span class=\"built_in\">chr</span>(<span class=\"number\">0x61</span>)   <span class=\"comment\"># 十六进制</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> a</span><br><span class=\"line\"><span class=\"meta\">&gt;&gt;&gt; </span><span class=\"built_in\">print</span> <span class=\"built_in\">chr</span>(<span class=\"number\">48</span>), <span class=\"built_in\">chr</span>(<span class=\"number\">49</span>), <span class=\"built_in\">chr</span>(<span class=\"number\">97</span>)         <span class=\"comment\"># 十进制</span></span><br><span class=\"line\"><span class=\"number\">0</span> <span class=\"number\">1</span> a</span><br></pre></td></tr></table></figure>\n<ul>\n<li><strong>classmethod</strong>（）装饰器     访问私有类或者类属性使用，cls 指代当前类</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">A</span>(<span class=\"params\"><span class=\"built_in\">object</span></span>):</span></span><br><span class=\"line\">    bar = <span class=\"number\">1</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func1</span>(<span class=\"params\">self</span>):</span>  <span class=\"comment\"># self 指代对象</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;foo&#x27;</span>) </span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"meta\">    @classmethod</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">func2</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">        <span class=\"built_in\">print</span> (<span class=\"string\">&#x27;func2&#x27;</span>)</span><br><span class=\"line\">        <span class=\"built_in\">print</span> (cls.bar) <span class=\"comment\"># 调用类属性 </span></span><br><span class=\"line\">        cls().func1()   <span class=\"comment\"># 调用类中方法</span></span><br><span class=\"line\"> </span><br><span class=\"line\">A.func2()               <span class=\"comment\"># 不需要实例化</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>staticmethod()   。+</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1><span id=\"20210322\"> 2021.03.22</span></h1>\n<p>（1）异常</p>\n<ul>\n<li>\n<p>检查时异常</p>\n</li>\n<li>\n<p>运行时异常</p>\n<p>解决异常的方法</p>\n<ul>\n<li>\n<p>捕捉异常可以使用 try/except 语句。</p>\n<p>try/except 语句用来检测 try 语句块中的错误，从而让 except 语句捕获异常信息并处理。</p>\n<p>如果你不想在异常发生时结束你的程序，只需在 try 里捕获它。</p>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">&lt;语句&gt;        <span class=\"comment\">#运行别的代码</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> &lt;名字&gt;：</span><br><span class=\"line\">&lt;语句&gt;        <span class=\"comment\">#如果在try部份引发了&#x27;name&#x27;异常</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> &lt;名字&gt;，&lt;数据&gt;:</span><br><span class=\"line\">&lt;语句&gt;        <span class=\"comment\">#如果引发了&#x27;name&#x27;异常，获得附加的数据</span></span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">&lt;语句&gt;        <span class=\"comment\">#如果没有异常发生</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>try 的工作原理</strong>：当开始一个 try 语句后，python 就在当前程序的上下文中作标记，这样当异常出现时就可以回到这里，try 子句先执行，接下来会发生什么依赖于执行时是否出现异常。</p>\n<ul>\n<li>如果当 try 后的语句执行时发生异常，python 就跳回到 try 并执行第一个匹配该异常的 except 子句，异常处理完毕，控制流就通过整个 try 语句（除非在处理异常时又引发新的异常）。</li>\n<li>如果在 try 后的语句里发生了异常，却没有匹配的 except 子句，异常将被递交到上层的 try，或者到程序的最上层（这样将结束程序，并打印默认的出错信息）。</li>\n<li>如果在 try 子句执行时没有发生异常，python 将执行 else 语句后的语句（如果有 else 的话），然后控制流通过整个 try 语句</li>\n</ul>\n</li>\n<li>\n<table>\n<thead>\n<tr>\n<th>异常名称</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BaseException</td>\n<td>所有异常的基类</td>\n</tr>\n<tr>\n<td>SystemExit</td>\n<td>解释器请求退出</td>\n</tr>\n<tr>\n<td>KeyboardInterrupt</td>\n<td>用户中断执行 (通常是输入 ^C)</td>\n</tr>\n<tr>\n<td>Exception</td>\n<td>常规错误的基类</td>\n</tr>\n<tr>\n<td>StopIteration</td>\n<td>迭代器没有更多的值</td>\n</tr>\n<tr>\n<td>GeneratorExit</td>\n<td>生成器 (generator) 发生异常来通知退出</td>\n</tr>\n<tr>\n<td>StandardError</td>\n<td>所有的内建标准异常的基类</td>\n</tr>\n<tr>\n<td>ArithmeticError</td>\n<td>所有数值计算错误的基类</td>\n</tr>\n<tr>\n<td>FloatingPointError</td>\n<td>浮点计算错误</td>\n</tr>\n<tr>\n<td>OverflowError</td>\n<td>数值运算超出最大限制</td>\n</tr>\n<tr>\n<td>ZeroDivisionError</td>\n<td>除 (或取模) 零 (所有数据类型)</td>\n</tr>\n<tr>\n<td>AssertionError</td>\n<td>断言语句失败</td>\n</tr>\n<tr>\n<td>AttributeError</td>\n<td>对象没有这个属性</td>\n</tr>\n<tr>\n<td>EOFError</td>\n<td>没有内建输入，到达 EOF 标记</td>\n</tr>\n<tr>\n<td>EnvironmentError</td>\n<td>操作系统错误的基类</td>\n</tr>\n<tr>\n<td>IOError</td>\n<td>输入 / 输出操作失败</td>\n</tr>\n<tr>\n<td>OSError</td>\n<td>操作系统错误</td>\n</tr>\n<tr>\n<td>WindowsError</td>\n<td>系统调用失败</td>\n</tr>\n<tr>\n<td>ImportError</td>\n<td>导入模块 / 对象失败</td>\n</tr>\n<tr>\n<td>LookupError</td>\n<td>无效数据查询的基类</td>\n</tr>\n<tr>\n<td>IndexError</td>\n<td>序列中没有此索引 (index)</td>\n</tr>\n<tr>\n<td>KeyError</td>\n<td>映射中没有这个键</td>\n</tr>\n<tr>\n<td>MemoryError</td>\n<td>内存溢出错误 (对于 Python 解释器不是致命的)</td>\n</tr>\n<tr>\n<td>NameError</td>\n<td>未声明 / 初始化对象 (没有属性)</td>\n</tr>\n<tr>\n<td>UnboundLocalError</td>\n<td>访问未初始化的本地变量</td>\n</tr>\n<tr>\n<td>ReferenceError</td>\n<td>弱引用 (Weak reference) 试图访问已经垃圾回收了的对象</td>\n</tr>\n<tr>\n<td>RuntimeError</td>\n<td>一般的运行时错误</td>\n</tr>\n<tr>\n<td>NotImplementedError</td>\n<td>尚未实现的方法</td>\n</tr>\n<tr>\n<td>SyntaxError</td>\n<td>Python 语法错误</td>\n</tr>\n<tr>\n<td>IndentationError</td>\n<td>缩进错误</td>\n</tr>\n<tr>\n<td>TabError</td>\n<td>Tab 和空格混用</td>\n</tr>\n<tr>\n<td>SystemError</td>\n<td>一般的解释器系统错误</td>\n</tr>\n<tr>\n<td>TypeError</td>\n<td>对类型无效的操作</td>\n</tr>\n<tr>\n<td>ValueError</td>\n<td>传入无效的参数</td>\n</tr>\n<tr>\n<td>UnicodeError</td>\n<td>Unicode 相关的错误</td>\n</tr>\n<tr>\n<td>UnicodeDecodeError</td>\n<td>Unicode 解码时的错误</td>\n</tr>\n<tr>\n<td>UnicodeEncodeError</td>\n<td>Unicode 编码时错误</td>\n</tr>\n<tr>\n<td>UnicodeTranslateError</td>\n<td>Unicode 转换时错误</td>\n</tr>\n<tr>\n<td>Warning</td>\n<td>警告的基类</td>\n</tr>\n<tr>\n<td>DeprecationWarning</td>\n<td>关于被弃用的特征的警告</td>\n</tr>\n<tr>\n<td>FutureWarning</td>\n<td>关于构造将来语义会有改变的警告</td>\n</tr>\n<tr>\n<td>OverflowWarning</td>\n<td>旧的关于自动提升为长整型 (long) 的警告</td>\n</tr>\n<tr>\n<td>PendingDeprecationWarning</td>\n<td>关于特性将会被废弃的警告</td>\n</tr>\n<tr>\n<td>RuntimeWarning</td>\n<td>可疑的运行时行为 (runtime behavior) 的警告</td>\n</tr>\n<tr>\n<td>SyntaxWarning</td>\n<td>可疑的语法的警告</td>\n</tr>\n<tr>\n<td>UserWarning</td>\n<td>用户代码生成的警告</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<p><strong>使用 except 而带多种异常类型</strong></p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    正常的操作</span><br><span class=\"line\">   ......................</span><br><span class=\"line\"><span class=\"keyword\">except</span>(Exception1[, Exception2[,...ExceptionN]]]):</span><br><span class=\"line\">   发生以上多个异常中的一个，执行这块代码</span><br><span class=\"line\">   ......................</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    如果没有异常执行这块代码</span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># finally 触发异常</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"string\">当在try块中抛出一个异常，立即执行finally块代码。</span></span><br><span class=\"line\"><span class=\"string\">finally块中的所有语句执行后，异常被再次触发，并执行except块代码。</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    fh = <span class=\"built_in\">open</span>(<span class=\"string\">&quot;testfile&quot;</span>, <span class=\"string\">&quot;w&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">try</span>:</span><br><span class=\"line\">        fh.write(<span class=\"string\">&quot;这是一个测试文件，用于测试异常!!&quot;</span>)</span><br><span class=\"line\">    <span class=\"keyword\">finally</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span> <span class=\"string\">&quot;关闭文件&quot;</span></span><br><span class=\"line\">        fh.close()</span><br><span class=\"line\"><span class=\"keyword\">except</span> IOError:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"string\">&quot;Error: 没有找到文件或读取文件失败&quot;</span></span><br></pre></td></tr></table></figure>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"comment\"># 触发异常后，后面的代码就不会再执行</span></span><br><span class=\"line\"> <span class=\"comment\"># 定义函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">mye</span>(<span class=\"params\"> level </span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> level &lt; <span class=\"number\">1</span>:</span><br><span class=\"line\">        <span class=\"keyword\">raise</span> Exception,<span class=\"string\">&quot;Invalid level!&quot;</span></span><br><span class=\"line\">        <span class=\"comment\"># 触发异常后，后面的代码就不会再执行</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">    mye(<span class=\"number\">0</span>)            <span class=\"comment\"># 触发异常</span></span><br><span class=\"line\"><span class=\"keyword\">except</span> Exception,err:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"number\">1</span>,err</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span> <span class=\"number\">2</span></span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">$ python test.py </span><br><span class=\"line\"><span class=\"number\">1</span> Invalid level!</span><br></pre></td></tr></table></figure>\n<p>（2）Python 模块 (Module)，是一个 Python 文件，以 .py 结尾，包含了 Python 对象定义和 Python 语句。</p>\n<ul>\n<li>模块让你能够有逻辑地组织你的 Python 代码段。</li>\n<li>把相关的代码分配到一个模块里能让你的代码更好用，更易懂。</li>\n<li>模块能定义函数，类和变量，模块里也能包含可执行的代码。</li>\n</ul>\n</li>\n</ul>\n<p><strong>dir () 函数</strong></p>\n<p>返回一个排好序的字符串列表，内容是一个模块里定义过的名字。</p>\n<p>返回的列表容纳了在一个模块里定义的所有模块，变量和函数。</p>\n  <figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 导入内置math模块</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> math</span><br><span class=\"line\"> </span><br><span class=\"line\">content = <span class=\"built_in\">dir</span>(math)</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"built_in\">print</span> content;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">[<span class=\"string\">&#x27;__doc__&#x27;</span>, <span class=\"string\">&#x27;__file__&#x27;</span>, <span class=\"string\">&#x27;__name__&#x27;</span>, <span class=\"string\">&#x27;acos&#x27;</span>, <span class=\"string\">&#x27;asin&#x27;</span>, <span class=\"string\">&#x27;atan&#x27;</span>, </span><br><span class=\"line\"><span class=\"string\">&#x27;atan2&#x27;</span>, <span class=\"string\">&#x27;ceil&#x27;</span>, <span class=\"string\">&#x27;cos&#x27;</span>, <span class=\"string\">&#x27;cosh&#x27;</span>, <span class=\"string\">&#x27;degrees&#x27;</span>, <span class=\"string\">&#x27;e&#x27;</span>, <span class=\"string\">&#x27;exp&#x27;</span>, </span><br><span class=\"line\"><span class=\"string\">&#x27;fabs&#x27;</span>, <span class=\"string\">&#x27;floor&#x27;</span>, <span class=\"string\">&#x27;fmod&#x27;</span>, <span class=\"string\">&#x27;frexp&#x27;</span>, <span class=\"string\">&#x27;hypot&#x27;</span>, <span class=\"string\">&#x27;ldexp&#x27;</span>, <span class=\"string\">&#x27;log&#x27;</span>,</span><br><span class=\"line\"><span class=\"string\">&#x27;log10&#x27;</span>, <span class=\"string\">&#x27;modf&#x27;</span>, <span class=\"string\">&#x27;pi&#x27;</span>, <span class=\"string\">&#x27;pow&#x27;</span>, <span class=\"string\">&#x27;radians&#x27;</span>, <span class=\"string\">&#x27;sin&#x27;</span>, <span class=\"string\">&#x27;sinh&#x27;</span>, </span><br><span class=\"line\"><span class=\"string\">&#x27;sqrt&#x27;</span>, <span class=\"string\">&#x27;tan&#x27;</span>, <span class=\"string\">&#x27;tanh&#x27;</span>]</span><br></pre></td></tr></table></figure>\n<p>在这里，特殊字符串变量__name__指向模块的名字，__file__指向该模块的导入文件名。</p>\n<p><strong>globals () 和 locals () 函数</strong></p>\n<p>根据调用地方的不同，globals () 和 locals () 函数可被用来返回全局和局部命名空间里的名字。</p>\n<ul>\n<li>\n<p>如果在函数内部调用 <strong>locals()</strong>，返回的是所有能在该函数里访问的局部命名。</p>\n</li>\n<li>\n<p>如果在函数内部调用 <strong>globals()</strong>，返回的是所有在该函数里能访问的全局名字。</p>\n</li>\n</ul>\n<p>两个函数的返回类型都是字典。所以名字们能用 <strong>keys()</strong> 函数摘取。</p>\n<h1><span id=\"20210323\"> 2021.03.23</span></h1>\n<p>（1）模块导入 **__name__**</p>\n<p>在模块中运行：__main__</p>\n<p>在模块外运行：模块名称</p>\n<h1><span id=\"20210325\"> 2021.03.25</span></h1>\n<p>（1）操作系统：向下控制硬件，向上控制软件。</p>\n<p>（2）<strong>操作命令快捷指令</strong></p>\n<ul>\n<li>\n<p>ctrl + L  显示文件的绝对路径</p>\n</li>\n<li>\n<p>Ctrl+Alt+T  打开终端</p>\n</li>\n<li>\n<p>Ctrl+Shift+C  命令行复制</p>\n</li>\n<li>\n<p>Ctrl+Shift+V   命令行粘贴</p>\n</li>\n<li>\n<p>Ctrl +Shift +’+’  放大终端的字体</p>\n</li>\n<li>\n<p>Ctrl+’-’  缩小终端的字体</p>\n</li>\n<li>\n<p>arch  机器的处理器架构</p>\n</li>\n<li>\n<p>uname -r 内核版本、</p>\n</li>\n<li>\n<p>cat /proc/cpuinfo          处理器信息</p>\n</li>\n<li>\n<p>cat /proc/version     发行版本信息</p>\n</li>\n<li>\n<p>ls 查看当前路径下的目录信息</p>\n</li>\n<li>\n<p>ls python*  查找所有以 python 开头的文件</p>\n</li>\n<li>\n<p>cd 进入路径目录</p>\n</li>\n<li>\n<p>pwd 显示当前路径</p>\n</li>\n<li>\n<p>tree 按树结构显示路径下的目录信息</p>\n</li>\n<li>\n<p>clear   =&gt; ctrl + L</p>\n</li>\n<li>\n<p>sudo apt install terminator 第三方终端</p>\n</li>\n<li>\n<p>cd -   回到上一次目录</p>\n</li>\n<li>\n<p>cd …   切换到上层目录</p>\n</li>\n<li>\n<p>cd .  切换 到当前目录</p>\n</li>\n<li>\n<p>cd ~ 切换到当前用户的主目录</p>\n</li>\n<li>\n<p>cd …/…  切换到上两层的目录</p>\n</li>\n<li>\n<p>touch 创建文件 (夹)</p>\n</li>\n<li>\n<p>mkdir 创建文件夹</p>\n</li>\n<li>\n<p>mkdir -p  aa/bb/cc   创建多级目录</p>\n</li>\n<li>\n<p><strong>rm  删除文件</strong></p>\n</li>\n<li>\n<p><strong>rmdir 文件夹名    删除空文件夹</strong></p>\n</li>\n<li>\n<p><strong>rm  -r  文件夹名   递归删除文件夹</strong></p>\n</li>\n<li>\n<p><strong>rm  -f  强制删除</strong></p>\n</li>\n<li>\n<p><strong>rm -i   交互式提示</strong></p>\n</li>\n<li>\n<p><strong>rm -rf  递归强制删除文件或文件夹</strong></p>\n</li>\n<li>\n<p>cp</p>\n</li>\n<li>\n<p>cp -r  递归拷贝文件  (recursive)</p>\n</li>\n<li>\n<p>mv  剪切文件 / 文件夹。重命名</p>\n</li>\n<li>\n<p>ls -lh  智能显示文件列表</p>\n</li>\n<li>\n<p>ls -al  =&gt;  ll</p>\n</li>\n<li>\n<p>mv  -v  显示文件的操作信息</p>\n</li>\n<li>\n<p>&gt;     重定向到其它文件</p>\n</li>\n<li>\n<p>&gt;&gt;    重定向追加到文件</p>\n</li>\n<li>\n<p>cat  a.txt  b.txt  &gt;  c.txt</p>\n</li>\n<li>\n<p>more 命令   f 前  b 后  q 退出</p>\n</li>\n<li>\n<p>|  管道</p>\n</li>\n<li>\n<p>ln -s   软链接，创建快捷方式</p>\n</li>\n<li>\n<p>ln 硬链接，备份数据</p>\n</li>\n</ul>\n<h1><span id=\"20210328\"> 2021.03.28</span></h1>\n<p>(1) 多任务:</p>\n<ul>\n<li>并发：任务数 &gt; CPU 核心数，CPU 交替执行</li>\n<li>并行：任务数 &lt;=CPU 核心数，每个 CPU 都可以执行一个任务</li>\n</ul>\n<p>(2) 进程是资源分配的最小单位，一个运行程序就是用一个进程.</p>\n<ul>\n<li>\n<p>默认启动的是主进程，后续启动的为子进程</p>\n</li>\n<li>\n<p>进程创建的步骤:</p>\n<ul>\n<li>import multiprocessing</li>\n<li>进程对象 = multiprocessing.Process (target= 函数名)</li>\n<li>进程对象.start ()</li>\n</ul>\n</li>\n<li>\n<p>获取进程的方法</p>\n<ul>\n<li>os.getpid ()  获取当前进程 ID</li>\n<li>os.getppid ()   获取父进程 ID</li>\n</ul>\n</li>\n<li>\n<p>函数本身无进程之分，被调用时会区分</p>\n<ul>\n<li>如果直接调用，则为主进程。</li>\n<li>若被进程调用，则为子进程。</li>\n</ul>\n</li>\n<li>\n<p>IPC  inter process communication   进程间共享全局变量使用</p>\n</li>\n<li>\n<p>进程守护</p>\n<ul>\n<li>进程对象 = multiprocessing.Process (target= 函数名)</li>\n<li><strong># 进程对象.daemon = True          # （被动）守护主进程方法一</strong></li>\n<li>进程对象.start ()</li>\n<li><strong># 进程对象.terminate ()                # （主动）守护主进程方法二</strong></li>\n</ul>\n</li>\n<li>\n<p>进程对象.join ()    把<strong>并行</strong>执行 变成 <strong>串行</strong>执行，用于在一个进程执行后去执行另一个进程的场景</p>\n</li>\n<li>\n<p>ps</p>\n<ul>\n<li>\n<p>-a  所有进程</p>\n</li>\n<li>\n<p>-x  无控制台终端</p>\n</li>\n<li>\n<p>-u</p>\n<blockquote>\n<p>ps -aux|grep pycharm</p>\n<p>ps -aux --sort -pcpu | less     根据 CPU 使用来升序排序</p>\n<p>ps -aux --sort -pmem | less    根据 内存使用 来升序排序</p>\n<p>ps -aux --sort -pcpu,+pmem | head -n 10      将 CPU 使用和内存使用合并到一个命令，并通过管道显示前 10 个结果。</p>\n<p>ps -axjf    树形显示进程</p>\n<p>ps -f -C getty   使用 - f 参数来查看格式化的一个名为 getty 的进程的信息</p>\n</blockquote>\n</li>\n</ul>\n</li>\n<li>\n<p>kill -9  进程编号</p>\n</li>\n<li>\n<p><strong>线程</strong></p>\n<ul>\n<li>\n<p>程序执行的最小单位</p>\n</li>\n<li>\n<p>实现多任务的一种方式</p>\n</li>\n<li>\n<p>进程默认会有一个线程</p>\n</li>\n<li>\n<p>进程是分配资源，线程是执行单元</p>\n</li>\n<li>\n<p>同一个进程中，多个线程共享资源</p>\n<ul>\n<li>\n<p>import threading</p>\n</li>\n<li>\n<p>线程对象 = threading.Thread (target = 函数名， <strong>daemon = True</strong>)   # 方法一 ： 守护主进程</p>\n</li>\n<li>\n<p># 线程对象.setDaemon（True）    方法二： 守护主线程</p>\n</li>\n<li>\n<p>线程对象.start ()</p>\n</li>\n</ul>\n</li>\n<li>\n<p>线程执行是无序的</p>\n</li>\n<li>\n<p>获取线程名称： threading.current_thread ().name</p>\n</li>\n<li>\n<p>线程同步：为解决多线程之间共享全局变量数据出现资源竞争，导致出现错误的情况（修改全局变量的操作是非原子性的）</p>\n<ul>\n<li>\n<p>互斥锁</p>\n<ul>\n<li>\n<p>创建互斥锁     mutex = threading.Lock ()</p>\n</li>\n<li>\n<p>上锁   mutex.acquire ()</p>\n</li>\n<li>\n<p>解锁  mutex.release ()</p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>join 和互斥锁的异同：</strong></p>\n<ul>\n<li>同：都是将并发变成串行</li>\n<li>异：\n<ul>\n<li>join 是将一个任务整体串行</li>\n<li>互斥锁可以将一个任务中的某一段代码串行</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1><span id=\"20210403\"> 2021.04.03</span></h1>\n<ul>\n<li>\n<p><strong>property 属性</strong></p>\n<ul>\n<li>定义 property 属性有两种方式:\n<ol>\n<li>装饰器方式</li>\n<li>类属性方式</li>\n</ol>\n</li>\n<li>装饰器方式:\n<ol>\n<li>@property 修饰获取值的方法</li>\n<li>@方法名.setter 修饰设置值的方法</li>\n</ol>\n</li>\n<li>类属性方式:\n<ol>\n<li>类属性 = property (获取值方法，设置值方法)</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>with 语句</strong></p>\n<ul>\n<li>执行完成以后自动调用关闭文件操作，即使出现异常也会自动调用关闭文件操作。</li>\n</ul>\n</li>\n<li>\n<p><strong>上下文管理器</strong></p>\n<ul>\n<li>\n<p>一个类只要实现了 <code>__enter__()和__exit__()</code>  这个两个方法，通过该类创建的对象我们就称之为上下文管理器。</p>\n</li>\n<li>\n<p><strong>with 语句之所以这么强大，背后是由上下文管理器做支撑的</strong></p>\n</li>\n<li>\n<p>使用 open 函数创建的文件对象就是一个上下文管理器对象。</p>\n</li>\n<li>\n<p><code>__enter__</code> 表示上文方法，需要返回一个操作文件对象</p>\n</li>\n<li>\n<p><code>__exit__</code> 表示下文方法，with 语句执行完成会自动执行，即使出现异常也会执行该方法。</p>\n</li>\n<li>\n<p>Python 提供了 with 语句用于简化资源释放的操作，使用 with 语句操作建立在上下文管理器 (实现 <code>__enter__和__exit__</code> ) 的基础上</p>\n</li>\n</ul>\n</li>\n<li>\n<p>生成器</p>\n<ul>\n<li>根据程序员制定的规则循环生成数据，当条件不成立时则生成数据结束。数据不是一次性全部生成出来，而是使用一个，再生成一个，可以<strong>节约大量的内存</strong>。</li>\n<li><strong>next</strong> 函数获取生成器中的下一个值</li>\n<li><strong>for</strong> 循环遍历生成器中的每一个值</li>\n</ul>\n</li>\n<li>\n<p>yield 关键字</p>\n<ul>\n<li>只要在 def 函数里看到 yield 关键字就是生成器</li>\n<li>生成器是根据算法生成数据的一种机制，每次调用生成器只生成一个值，可以节省大量内存。</li>\n<li>生成器的创建有两种方式:\n<ul>\n<li>生成器推导式</li>\n<li>yield 关键字</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>深拷贝和浅拷贝</p>\n<ul>\n<li>\n<p><strong>浅拷贝：</strong></p>\n<ul>\n<li>\n<p><strong>不可变类型的浅拷贝说明:</strong></p>\n<ul>\n<li><strong>通过上面的执行结果可以得知，不可变类型进行浅拷贝不会给拷贝的对象开辟新的内存空间，而只是拷贝了这个对象的引用。</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>可变类型的浅拷贝说明:</strong></p>\n<ul>\n<li>\n<p><strong>通过上面的执行结果可以得知，可变类型进行浅拷贝只对可变类型的第一层对象进行拷贝，对拷贝的对象会开辟新的内存空间进行存储，子对象不进行拷贝。</strong></p>\n<blockquote>\n<p><strong>浅拷贝存在的问题:</strong></p>\n<p>虽然浅拷贝可以解决最开始直接赋值存在的问题，但如果数据内部有子元素为可变类型还会有问题</p>\n</blockquote>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>深拷贝：</strong></p>\n<ul>\n<li>\n<p><strong>不可变类型的深拷贝说明:</strong></p>\n<ul>\n<li><strong>不可变类型进行深拷贝如果子对象没有可变类型则不会进行拷贝，而只是拷贝了这个对象的引用，否则会对该对象到最后一个可变类型的每一层对象就行拷贝，对每一层拷贝的对象都会开辟新的内存空间进行存储</strong></li>\n</ul>\n</li>\n<li>\n<p><strong>可变类型的深拷贝说明:</strong></p>\n<ul>\n<li>可变类型进行深拷贝会对该对象到最后一个可变类型的每一层对象就行拷贝，对每一层拷贝的对象都会开辟新的内存空间进行存储。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>浅拷贝和深拷贝的区别</strong></p>\n<ul>\n<li>浅拷贝最多拷贝对象的一层</li>\n<li>深拷贝可能拷贝对象的多层</li>\n</ul>\n</li>\n<li>\n<p>正则表达式</p>\n<ul>\n<li>\n<p>在实际开发过程中经常会有查找符合某些复杂规则的字符串的需要，比如：邮箱、图片地址、手机号码等，这时候想匹配或者查找符合某些规则的字符串就可以使用正则表达式了。</p>\n</li>\n<li>\n<p><strong>正则表达式就是记录文本规则的代码</strong></p>\n</li>\n<li>\n<figure class=\"highlight python\"><figcaption data-lang=\"python\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 导入 re 模块</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> re</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 使用 match 方法进行匹配操作</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>result <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span>match<span class=\"token punctuation\">(</span>正则表达式<span class=\"token punctuation\">,</span>要匹配的字符串<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\"># 如果上一步匹配到数据的话，可以使用 group 方法来提取数据</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>result<span class=\"token punctuation\">.</span>group<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">&lt;</span>!<span class=\"token operator\">-</span><span class=\"token operator\">-</span>code￼<span class=\"token number\">71</span><span class=\"token operator\">-</span><span class=\"token operator\">-</span><span class=\"token operator\">></span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果hello的首字符小写，那么正则表达式需要小写的h</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;h&quot;</span>,<span class=\"string\">&quot;hello Python&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 如果hello的首字符大写，那么正则表达式需要大写的H</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;H&quot;</span>,<span class=\"string\">&quot;Hello Python&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 大小写h都可以的情况</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[hH]&quot;</span>,<span class=\"string\">&quot;hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[hH]&quot;</span>,<span class=\"string\">&quot;Hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[hH]ello Python&quot;</span>,<span class=\"string\">&quot;Hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配0到9第一种写法</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[0123456789]Hello Python&quot;</span>,<span class=\"string\">&quot;7Hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配0到9第二种写法</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[0-9]Hello Python&quot;</span>,<span class=\"string\">&quot;7Hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[0-35-9]Hello Python&quot;</span>,<span class=\"string\">&quot;7Hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 下面这个正则不能够匹配到数字4，因此ret为None</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[0-35-9]Hello Python&quot;</span>,<span class=\"string\">&quot;4Hello Python&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># print(ret.group())</span></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">h</span><br><span class=\"line\">H</span><br><span class=\"line\">h</span><br><span class=\"line\">H</span><br><span class=\"line\">Hello Python</span><br><span class=\"line\">7Hello Python</span><br><span class=\"line\">7Hello Python</span><br><span class=\"line\">7Hello Python</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 普通的匹配方式</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;嫦娥1号&quot;</span>,<span class=\"string\">&quot;嫦娥1号发射成功&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;嫦娥2号&quot;</span>,<span class=\"string\">&quot;嫦娥2号发射成功&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;嫦娥3号&quot;</span>,<span class=\"string\">&quot;嫦娥3号发射成功&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 使用\\d进行匹配</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;嫦娥\\d号&quot;</span>,<span class=\"string\">&quot;嫦娥1号发射成功&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;嫦娥\\d号&quot;</span>,<span class=\"string\">&quot;嫦娥2号发射成功&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;嫦娥\\d号&quot;</span>,<span class=\"string\">&quot;嫦娥3号发射成功&quot;</span>) </span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">嫦娥<span class=\"number\">1</span>号</span><br><span class=\"line\">嫦娥<span class=\"number\">2</span>号</span><br><span class=\"line\">嫦娥<span class=\"number\">3</span>号</span><br><span class=\"line\">嫦娥<span class=\"number\">1</span>号</span><br><span class=\"line\">嫦娥<span class=\"number\">2</span>号</span><br><span class=\"line\">嫦娥<span class=\"number\">3</span>号</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;\\D&quot;</span>, <span class=\"string\">&quot;f&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"comment\"># 获取匹配结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">f</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 空格属于空白字符</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;hello\\sworld&quot;</span>, <span class=\"string\">&quot;hello world&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    result = match_obj.group()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># \\t 属于空白字符</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;hello\\sworld&quot;</span>, <span class=\"string\">&quot;hello\\tworld&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    result = match_obj.group()</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">hello world</span><br><span class=\"line\">hello world</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;hello\\Sworld&quot;</span>, <span class=\"string\">&quot;hello&amp;world&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">result = match_obj.group()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;hello\\Sworld&quot;</span>, <span class=\"string\">&quot;hello$world&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">result = match_obj.group()</span><br><span class=\"line\"><span class=\"built_in\">print</span>(result)</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">hello&amp;world  </span><br><span class=\"line\">hello$world</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配非特殊字符中的一位</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;\\w&quot;</span>, <span class=\"string\">&quot;A&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"comment\"># 获取匹配结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">A</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配特殊字符中的一位</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;\\W&quot;</span>, <span class=\"string\">&quot;&amp;&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"comment\"># 获取匹配结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&amp;</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">*</td>\n<td style=\"text-align:left\">匹配前一个字符出现 0 次或者无限次，即可有可无</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">+</td>\n<td style=\"text-align:left\">匹配前一个字符出现 1 次或者无限次，即至少有 1 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">?</td>\n<td style=\"text-align:left\">匹配前一个字符出现 1 次或者 0 次，即要么有 1 次，要么没有</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" m></td>\n<td style=\"text-align:left\">匹配前一个字符出现 m 次</td>\n</tr>\n<tr>\n<td style=\"text-align:center\" m,n></td>\n<td style=\"text-align:left\">匹配前一个字符出现从 m 到 n 次</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[A-Z][a-z]*&quot;</span>,<span class=\"string\">&quot;M&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[A-Z][a-z]*&quot;</span>,<span class=\"string\">&quot;MnnM&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[A-Z][a-z]*&quot;</span>,<span class=\"string\">&quot;Aabcdef&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">M</span><br><span class=\"line\">Mnn</span><br><span class=\"line\">Aabcdef</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;t.+o&quot;</span>, <span class=\"string\">&quot;two&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">two</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;https?&quot;</span>, <span class=\"string\">&quot;http&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">https</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配出，8到20位的密码，可以是大小写英文字母、数字、下划线</span></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[a-zA-Z0-9_]&#123;6&#125;&quot;</span>,<span class=\"string\">&quot;12a3g45678&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">ret = re.match(<span class=\"string\">&quot;[a-zA-Z0-9_]&#123;8,20&#125;&quot;</span>,<span class=\"string\">&quot;1ad12f23s34455ff66&quot;</span>)</span><br><span class=\"line\"><span class=\"comment\"># &#123;2,&#125;    表示2-&gt;无穷</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(ret.group())</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">12a3g4</span><br><span class=\"line\">1ad12f23s34455ff66</span><br></pre></td></tr></table></figure>\n<ul>\n<li>\n<p><strong>匹配开头和结尾</strong></p>\n</li>\n<li>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">^</td>\n<td style=\"text-align:left\">匹配字符串开头</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">$</td>\n<td style=\"text-align:left\">匹配字符串结尾</td>\n</tr>\n</tbody>\n</table>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配以数字开头的数据</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;^\\d.*&quot;</span>, <span class=\"string\">&quot;3hello&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"comment\"># 获取匹配结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">3hello</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"><span class=\"comment\"># 匹配以数字结尾的数据</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;.*\\d$&quot;</span>, <span class=\"string\">&quot;hello5&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"comment\"># 获取匹配结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">hello5</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配以数字开头中间内容不管以数字结尾</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;^\\d.*\\d$&quot;</span>, <span class=\"string\">&quot;4hello4&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"comment\"># 获取匹配结果</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">4hello4</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># [^指定字符]: 表示除了指定字符都匹配</span><br><span class=\"line\">import re</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">match_obj &#x3D; re.match(&quot;[^aeiou]&quot;, &quot;h&quot;)</span><br><span class=\"line\">if match_obj:</span><br><span class=\"line\">    # 获取匹配结果</span><br><span class=\"line\">    print(match_obj.group())</span><br><span class=\"line\">else:</span><br><span class=\"line\">    print(&quot;匹配失败&quot;)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">h</span><br></pre></td></tr></table></figure>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:center\">代码</th>\n<th style=\"text-align:left\">功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:center\">|</td>\n<td style=\"text-align:left\">匹配左右任意一个表达式</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(ab)</td>\n<td style=\"text-align:left\">将括号中字符作为一个分组</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>\\num</code></td>\n<td style=\"text-align:left\">引用分组 num 匹配到的字符串</td>\n</tr>\n<tr>\n<td style=\"text-align:center\"><code>(?P&lt;name&gt;)</code></td>\n<td style=\"text-align:left\">分组起别名</td>\n</tr>\n<tr>\n<td style=\"text-align:center\">(?P=name)</td>\n<td style=\"text-align:left\">引用别名为 name 分组匹配到的字符串</td>\n</tr>\n</tbody>\n</table>\n</li>\n</ul>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 水果列表</span></span><br><span class=\"line\">fruit_list = [<span class=\"string\">&quot;apple&quot;</span>, <span class=\"string\">&quot;banana&quot;</span>, <span class=\"string\">&quot;orange&quot;</span>, <span class=\"string\">&quot;pear&quot;</span>]</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 遍历数据</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> value <span class=\"keyword\">in</span> fruit_list:</span><br><span class=\"line\">    <span class=\"comment\"># |    匹配左右任意一个表达式</span></span><br><span class=\"line\">    match_obj = re.match(<span class=\"string\">&quot;apple|pear&quot;</span>, value)</span><br><span class=\"line\">    <span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s是我想要的&quot;</span> % match_obj.group())</span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">        <span class=\"built_in\">print</span>(<span class=\"string\">&quot;%s不是我要的&quot;</span> % value)</span><br><span class=\"line\">        </span><br><span class=\"line\">        </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">apple是我想要的</span><br><span class=\"line\">banana不是我要的</span><br><span class=\"line\">orange不是我要的</span><br><span class=\"line\">pear是我想要的</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配出163、126、qq等邮箱</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;[a-zA-Z0-9_]&#123;4,20&#125;@(163|126|qq|sina|yahoo)\\.com&quot;</span>, <span class=\"string\">&quot;hello@163.com&quot;</span>)</span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\">    <span class=\"comment\"># 获取分组数据</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group(<span class=\"number\">1</span>))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">hello@<span class=\"number\">163.</span>com</span><br><span class=\"line\"><span class=\"number\">163</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> re</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 匹配qq:10567这样的数据，提取出来qq文字和qq号码</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;(qq):([1-9]\\d&#123;4,10&#125;)&quot;</span>, <span class=\"string\">&quot;qq:10567&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\">    <span class=\"comment\"># 分组:默认是1一个分组，多个分组从左到右依次加1</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group(<span class=\"number\">1</span>))</span><br><span class=\"line\">    <span class=\"comment\"># 提取第二个分组数据</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group(<span class=\"number\">2</span>))</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">qq</span><br><span class=\"line\"><span class=\"number\">10567</span></span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;&lt;[a-zA-Z1-6]+&gt;.*&lt;/[a-zA-Z1-6]+&gt;&quot;</span>, <span class=\"string\">&quot;&lt;html&gt;hh&lt;/div&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;&lt;([a-zA-Z1-6]+)&gt;.*&lt;/\\\\1&gt;&quot;</span>, <span class=\"string\">&quot;&lt;html&gt;hh&lt;/html&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;html&gt;hh&lt;/div&gt;</span><br><span class=\"line\">&lt;html&gt;hh&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配出&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;&lt;([a-zA-Z1-6]+)&gt;&lt;([a-zA-Z1-6]+)&gt;.*&lt;/\\\\2&gt;&lt;/\\\\1&gt;&quot;</span>, <span class=\"string\">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 匹配出&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span></span><br><span class=\"line\">match_obj = re.match(<span class=\"string\">&quot;&lt;(?P&lt;name1&gt;[a-zA-Z1-6]+)&gt;&lt;(?P&lt;name2&gt;[a-zA-Z1-6]+)&gt;.*&lt;/(?P=name2)&gt;&lt;/(?P=name1)&gt;&quot;</span>, <span class=\"string\">&quot;&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> match_obj:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(match_obj.group())</span><br><span class=\"line\"><span class=\"keyword\">else</span>:</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;匹配失败&quot;</span>)</span><br><span class=\"line\">    </span><br><span class=\"line\">&gt;&gt;&gt;</span><br><span class=\"line\">&lt;html&gt;&lt;h1&gt;www.itcast.cn&lt;/h1&gt;&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n",
            "tags": [
                "人工智能",
                "编程语言"
            ]
        }
    ]
}