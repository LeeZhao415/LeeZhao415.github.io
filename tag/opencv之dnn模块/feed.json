{
    "version": "https://jsonfeed.org/version/1",
    "title": "且听风吟，御剑于心！ • All posts by \"opencv之dnn模块\" tag",
    "description": "",
    "home_page_url": "https://leezhao415.github.io",
    "items": [
        {
            "id": "https://leezhao415.github.io/2021/07/15/%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91OpenCV4-X-DNN%E6%A8%A1%E5%9D%97-Python-API/",
            "url": "https://leezhao415.github.io/2021/07/15/%E3%80%90%E8%AF%A6%E8%A7%A3%E3%80%91OpenCV4-X-DNN%E6%A8%A1%E5%9D%97-Python-API/",
            "title": "【详解】OpenCV4.X - DNN模块 Python API",
            "date_published": "2021-07-15T10:51:37.000Z",
            "content_html": "<meta name=\"referrer\" content=\"no-referrer\">\n<hr>\n<p><strong>文章目录</strong></p>\n<!-- toc -->\n<ul>\n<li><a href=\"#1-dnnblobfromimage\">1. dnn.blobFromImage</a></li>\n<li><a href=\"#2-dnnblobfromimages\">2. dnn.blobFromImages</a></li>\n<li><a href=\"#3-dnnnet_readfrommodeloptimizer\">3. dnn.Net_readFromModelOptimizer</a></li>\n<li><a href=\"#4-dnnnmsboxes\">4. dnn.NMSBoxes</a></li>\n<li><a href=\"#5-dnnnmsboxesrotated\">5. dnn.NMSBoxesRotated</a></li>\n<li><a href=\"#6-dnnreadnet\">6. dnn.readNet</a></li>\n<li><a href=\"#7-dnnreadnetfromcaffe\">7. dnn.readNetFromCaffe</a></li>\n<li><a href=\"#8-dnnreadnetfromdarknet\">8. dnn.readNetFromDarknet</a></li>\n<li><a href=\"#9-dnnreadnetfrommodeloptimizer\">9. dnn.readNetFromModelOptimizer</a></li>\n<li><a href=\"#10-dnnreadnetfromonnx\">10. dnn.readNetFromONNX</a></li>\n<li><a href=\"#11-dnnreadnetfromtensorflow\">11. dnn.readNetFromTensorflow</a></li>\n<li><a href=\"#12-dnnreadnetfromtorch\">12. dnn.readNetFromTorch</a></li>\n<li><a href=\"#13-dnnreadtensorfromonnx\">13. dnn.readTensorFromONNX</a></li>\n<li><a href=\"#14-dnnresetmyriaddevice\">14. dnn.resetMyriadDevice</a></li>\n<li><a href=\"#15-dnnshrinkcaffemodel\">15. dnn.shrinkCaffeModel</a></li>\n<li><a href=\"#16-dnnwritetextgraph\">16. dnn.writeTextGraph</a></li>\n</ul>\n<!-- tocstop -->\n<hr>\n<p>OpenCV 4.X 版本集成了很多直接利用 DNN 模块的 Python API 接口.</p>\n<p>安装：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo pip install opencv-python</span><br></pre></td></tr></table></figure>\n<p>使用：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> cv2 <span class=\"keyword\">import</span> dnn</span><br><span class=\"line\"><span class=\"comment\"># Variables with simple values</span></span><br><span class=\"line\">DNN_BACKEND_DEFAULT = <span class=\"number\">0</span></span><br><span class=\"line\">DNN_BACKEND_HALIDE = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">DNN_BACKEND_INFERENCE_ENGINE = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">DNN_BACKEND_OPENCV = <span class=\"number\">3</span></span><br><span class=\"line\">DNN_BACKEND_VKCOM = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">DNN_TARGET_CPU = <span class=\"number\">0</span></span><br><span class=\"line\">DNN_TARGET_MYRIAD = <span class=\"number\">3</span></span><br><span class=\"line\">DNN_TARGET_OPENCL = <span class=\"number\">1</span></span><br><span class=\"line\"></span><br><span class=\"line\">DNN_TARGET_OPENCL_FP16 = <span class=\"number\">2</span></span><br><span class=\"line\"></span><br><span class=\"line\">DNN_TARGET_VULKAN = <span class=\"number\">4</span></span><br><span class=\"line\"></span><br><span class=\"line\">__loader__ = <span class=\"literal\">None</span></span><br><span class=\"line\">__spec__ = <span class=\"literal\">None</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"1-dnnblobfromimage\"> 1. dnn.blobFromImage</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blobFromImage</span>(<span class=\"params\">image, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  scalefactor=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  size=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  mean=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  swapRB=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  crop=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                  ddepth=<span class=\"literal\">None</span></span>):</span> </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>根据输入图像，创建 NCHW 次序的 4-dim blobs.</p>\n<p>参数：</p>\n<p>[1] - image: cv2.imread 读取的图片数据；</p>\n<p>[2] - scalefactor: 缩放像素值，如 [0, 255] - [0, 1].</p>\n<p>[3] - size: 输出图像的尺寸，如 netInWidth,netInHeight.</p>\n<p>[4] - mean: 从各通道减均值。如果输入 image 为 BGR 次序，且 swapRB=True，则通道次序为 mean−R,mean−G,mean−B.</p>\n<p>[5] - swapRB: 交换 3 通道图片的第一个和最后一个通道，如 BGR - RGB.</p>\n<p>[6] - crop: 图像尺寸 resize 后是否裁剪。如果 <code>crop=True</code> ，则，输入图片的尺寸调整 resize 后，一个边对应与 size 的一个维度，而另一个边的值大于等于 size 的另一个维度；然后从 resize 后的图片中心进行 crop. 如果 <code>crop=False</code> ，则无需 crop，只需保持图片的长宽比.</p>\n<p>[7] - ddepth: 输出 blob 的 Depth. 可选: CV_32F 或 CV_8U.</p>\n<p>示例：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> cv2</span><br><span class=\"line\"><span class=\"keyword\">from</span> cv2 <span class=\"keyword\">import</span> dnn</span><br><span class=\"line\"><span class=\"keyword\">import</span> numpy <span class=\"keyword\">as</span> np </span><br><span class=\"line\"><span class=\"keyword\">import</span> matplotlib.pyplot <span class=\"keyword\">as</span> plt</span><br><span class=\"line\"></span><br><span class=\"line\">img_cv2 = cv2.imread(<span class=\"string\">&quot;test.jpg&quot;</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;[INFO]Image shape: &quot;</span>, img_cv2.shape)</span><br><span class=\"line\"></span><br><span class=\"line\">inWidth = <span class=\"number\">256</span></span><br><span class=\"line\">inHeight = <span class=\"number\">256</span></span><br><span class=\"line\">outBlob1 = cv2.dnn.blobFromImage(img_cv2,</span><br><span class=\"line\">                                scalefactor=<span class=\"number\">1.0</span> / <span class=\"number\">255</span>,</span><br><span class=\"line\">                                size=(inWidth, inHeight),</span><br><span class=\"line\">                                mean=(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                                swapRB=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                crop=<span class=\"literal\">False</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;[INFO]outBlob1 shape: &quot;</span>, outBlob1.shape)</span><br><span class=\"line\">outimg1 = np.transpose(outBlob1[<span class=\"number\">0</span>], (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">outBlob2 = cv2.dnn.blobFromImage(img_cv2,</span><br><span class=\"line\">                                scalefactor=<span class=\"number\">1.0</span> / <span class=\"number\">255</span>,</span><br><span class=\"line\">                                size=(inWidth, inHeight),</span><br><span class=\"line\">                                mean=(<span class=\"number\">0</span>, <span class=\"number\">0</span>, <span class=\"number\">0</span>),</span><br><span class=\"line\">                                swapRB=<span class=\"literal\">False</span>,</span><br><span class=\"line\">                                crop=<span class=\"literal\">True</span>)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"string\">&quot;[INFO]outBlob2 shape: &quot;</span>, outBlob2.shape)</span><br><span class=\"line\">outimg2 = np.transpose(outBlob2[<span class=\"number\">0</span>], (<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">0</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">plt.figure(figsize=[<span class=\"number\">10</span>, <span class=\"number\">10</span>])</span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">1</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Input image&#x27;</span>, fontsize=<span class=\"number\">16</span>)</span><br><span class=\"line\">plt.imshow(cv2.cvtColor(img_cv2, cv2.COLOR_BGR2RGB))</span><br><span class=\"line\">plt.axis(<span class=\"string\">&quot;off&quot;</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">2</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Output image - no crop&#x27;</span>, fontsize=<span class=\"number\">16</span>)</span><br><span class=\"line\">plt.imshow(cv2.cvtColor(outimg1, cv2.COLOR_BGR2RGB))</span><br><span class=\"line\">plt.axis(<span class=\"string\">&quot;off&quot;</span>)</span><br><span class=\"line\">plt.subplot(<span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">3</span>)</span><br><span class=\"line\">plt.title(<span class=\"string\">&#x27;Output image - crop&#x27;</span>, fontsize=<span class=\"number\">16</span>)</span><br><span class=\"line\">plt.imshow(cv2.cvtColor(outimg2, cv2.COLOR_BGR2RGB))</span><br><span class=\"line\">plt.axis(<span class=\"string\">&quot;off&quot;</span>)</span><br><span class=\"line\">plt.show()</span><br></pre></td></tr></table></figure>\n<p><img src=\"https://www.aiuai.cn/uploads/2019/04/1097911958.png\" alt=\"img\"></p>\n<h3><span id=\"2-dnnblobfromimages\"> 2. dnn.blobFromImages</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">blobFromImages</span>(<span class=\"params\">images, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   scalefactor=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   size=<span class=\"literal\">None</span>, mean=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   swapRB=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   crop=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                   ddepth=<span class=\"literal\">None</span></span>):</span> </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>批量处理图片，创建 4-dim blobs. 其它参数类似于  <code>dnn.blobFromImage</code> .</p>\n<h3><span id=\"3-dnnnet_readfrommodeloptimizer\"> 3. dnn.Net_readFromModelOptimizer</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">Net_readFromModelOptimizer</span>(<span class=\"params\">xml, <span class=\"built_in\">bin</span></span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>从 Intel’s Model Optimizer intermediate representation 创建网络.</p>\n<p>参数：</p>\n<p>[1] - xml: XML 网络拓扑结果的配置文件.</p>\n<p>[2] - bin: 训练权重值的二值文件.</p>\n<h3><span id=\"4-dnnnmsboxes\"> 4. dnn.NMSBoxes</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NMSBoxes</span>(<span class=\"params\">bboxes, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             scores, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             score_threshold, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             nms_threshold, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             eta=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">             top_k=<span class=\"literal\">None</span></span>):</span> </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>根据给定的 boxes 和对应的 scores 进行 NMS 处理.</p>\n<p>参数：</p>\n<p>[1] - boxes: 待处理的边界框 bounding boxes.</p>\n<p>[2] - scores: 对于于待处理边界框的 scores.</p>\n<p>[3] - score_threshold: 用于过滤 boxes 的 score 阈值.</p>\n<p>[4] - nms_threshold: NMS 用到的阈值.</p>\n<p>[5] - indices: NMS 处理后所保留的边界框的索引值.</p>\n<p>[6] - eta: 自适应阈值公式中的相关系数：nms_thresholdi+1=eta⋅nms_thresholdi</p>\n<p>[7] - top_k: 如果 top_k&gt;0，则保留最多 top_k 个边界框索引值.</p>\n<h3><span id=\"5-dnnnmsboxesrotated\"> 5. dnn.NMSBoxesRotated</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">NMSBoxesRotated</span>(<span class=\"params\">bboxes, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    scores, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    score_threshold, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    nms_threshold, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    eta=<span class=\"literal\">None</span>, </span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"params\">                    top_k=<span class=\"literal\">None</span></span>):</span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"6-dnnreadnet\"> 6. dnn.readNet</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNet</span>(<span class=\"params\">model, config=<span class=\"literal\">None</span>, framework=<span class=\"literal\">None</span></span>):</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>从支持的格式中加载深度学习网络和模型参数.</p>\n<p>参数：</p>\n<p>[1] - model: 训练的权重参数的模型二值文件，支持的格式有： <code>*.caffemodel</code> Caffe、 <code>*.pb</code> TensorFlow、 <code>*.t7</code>  或  <code>*.net</code> Torch、  <code>*.weights</code> Darknet、 <code>*.bin</code> DLDT.</p>\n<p>[2] - config: 包含网络配置的文本文件，支持的格式有： <code>*.prototxt</code>  Caffe、 <code>*.pbtxt</code>  TensorFlow、 <code>*.cfg</code>  Darknet、 <code>*.xml</code>  DLDT.</p>\n<p>[3] - framework: 所支持格式的框架名.</p>\n<p>该函数自动检测训练模型所采用的深度框架，然后调用  <code>readNetFromCaffe</code> 、 <code>readNetFromTensorflow</code> 、 <code>readNetFromTorch</code>  或  <code>readNetFromDarknet</code>  中的某个函数.</p>\n<h3><span id=\"7-dnnreadnetfromcaffe\"> 7. dnn.readNetFromCaffe</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNetFromCaffe</span>(<span class=\"params\">prototxt, caffeModel=<span class=\"literal\">None</span></span>):</span>     </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>加载采用 Caffe 的配置网络和训练的权重参数.</p>\n<h3><span id=\"8-dnnreadnetfromdarknet\"> 8. dnn.readNetFromDarknet</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNetFromDarknet</span>(<span class=\"params\">cfgFile, darknetModel=<span class=\"literal\">None</span></span>):</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>加载采用 Darknet 的配置网络和训练的权重参数.</p>\n<h3><span id=\"9-dnnreadnetfrommodeloptimizer\"> 9. dnn.readNetFromModelOptimizer</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNetFromModelOptimizer</span>(<span class=\"params\">xml, <span class=\"built_in\">bin</span></span>):</span>     </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>加载采用 Intel’s Model Optimizer intermediate representation 的配置网络和训练的权重参数.</p>\n<h3><span id=\"10-dnnreadnetfromonnx\"> 10. dnn.readNetFromONNX</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNetFromONNX</span>(<span class=\"params\">onnxFile</span>):</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>加载 .onnx 模型网络配置参数和权重参数.</p>\n<h3><span id=\"11-dnnreadnetfromtensorflow\"> 11. dnn.readNetFromTensorflow</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNetFromTensorflow</span>(<span class=\"params\">model, config=<span class=\"literal\">None</span></span>):</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>加载采用 Tensorflow 的配置网络和训练的权重参数.</p>\n<p>[1] - model: .pb 文件.</p>\n<p>[2] - config: .pbtxt 文件.</p>\n<h3><span id=\"12-dnnreadnetfromtorch\"> 12. dnn.readNetFromTorch</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readNetFromTorch</span>(<span class=\"params\">model, isBinary=<span class=\"literal\">None</span></span>):</span>     </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>加载采用 Torch 的配置网络和训练的权重参数.</p>\n<p>[1] - model: 采用  <code>torch.save() </code> 函数保存的文件.</p>\n<p>所支持的 Torch nn.Module 网络层有：</p>\n<figure class=\"highlight protobuf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- nn.Sequential</span><br><span class=\"line\">- nn.Parallel</span><br><span class=\"line\">- nn.Concat</span><br><span class=\"line\">- nn.Linear</span><br><span class=\"line\">- nn.SpatialConvolution</span><br><span class=\"line\">- nn.SpatialMaxPooling, nn.SpatialAveragePooling</span><br><span class=\"line\">- nn.ReLU, nn.TanH, nn.Sigmoid</span><br><span class=\"line\">- nn.Reshape</span><br><span class=\"line\">- nn.SoftMax, nn.LogSoftMax</span><br></pre></td></tr></table></figure>\n<h3><span id=\"13-dnnreadtensorfromonnx\"> 13. dnn.readTensorFromONNX</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">readTensorFromONNX</span>(<span class=\"params\">path</span>):</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>从  <code>.pb</code>  文件创建 blob.</p>\n<p>[1] - path: 包含 input tensor 的 <code>.pb</code>  文件.</p>\n<h3><span id=\"14-dnnresetmyriaddevice\"> 14. dnn.resetMyriadDevice</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">resetMyriadDevice</span>():</span>    </span><br><span class=\"line\">    <span class=\"string\">&quot;&quot;&quot;    resetMyriadDevice() -&gt; None    .   @brief Release a Myriad device is binded by OpenCV.    .   *    .   * Single Myriad device cannot be shared across multiple processes which uses    .   * Inference Engine&#x27;s Myriad plugin.    &quot;&quot;&quot;</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<h3><span id=\"15-dnnshrinkcaffemodel\"> 15. dnn.shrinkCaffeModel</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">shrinkCaffeModel</span>(<span class=\"params\">src, dst, layersTypes=<span class=\"literal\">None</span></span>):</span>    </span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>将 Caffe 网络的所有权重转换为半精度浮点数值 halfprecisionfloatingpoint.</p>\n<p>参数：</p>\n<p>[1] - src: Caffe 网路的原始单精度浮点数值权重模型文件 (后缀一般为 <code>.caffemodel</code> ).</p>\n<p>[2] - dst: 转换后的权重文件.</p>\n<p>[3] - layersTypes: 待转换参数的网络层类型，默认是只转换卷积层和全连接层的权重参数.</p>\n<h3><span id=\"16-dnnwritetextgraph\"> 16. dnn.writeTextGraph</span></h3>\n<p>定义：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">writeTextGraph</span>(<span class=\"params\">model, output</span>):</span>    </span><br><span class=\"line\">    <span class=\"comment\">#note: To reduce output file size, trained weights are not included.    </span></span><br><span class=\"line\">    <span class=\"keyword\">pass</span></span><br></pre></td></tr></table></figure>\n<p>作用：</p>\n<p>将以 protocol buffer 格式的二值网络，创建为文本表示 Createatextrepresentationforabinarynetworkstoredinprotocolbufferformat.</p>\n<p>参数：</p>\n<p>[1] - model: 二值网络 binarynetwork 的路径.</p>\n<p>[2] - output: 创建的输出文件路径.</p>\n",
            "tags": [
                "人工智能",
                "OpenCV之DNN模块"
            ]
        }
    ]
}