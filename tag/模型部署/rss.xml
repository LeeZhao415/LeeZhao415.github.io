<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>且听风吟，御剑于心！ • Posts by &#34;模型部署&#34; tag</title>
        <link>https://leezhao415.github.io</link>
        <description></description>
        <language>zh-CN</language>
        <pubDate>Tue, 26 Jul 2022 23:51:31 +0800</pubDate>
        <lastBuildDate>Tue, 26 Jul 2022 23:51:31 +0800</lastBuildDate>
        <category>人工智能/CV</category>
        <category>Transformer/DETR(CV)</category>
        <category>人工智能</category>
        <category>数据集</category>
        <category>编程工具</category>
        <category>大数据框架</category>
        <category>NLP</category>
        <category>模型部署</category>
        <category>数据结构与算法</category>
        <category>Python数据分析</category>
        <category>网络通信</category>
        <category>YOLOX</category>
        <category>CV算法</category>
        <category>AIGC前沿</category>
        <category>VSLAM</category>
        <category>NCNN部署</category>
        <category>YOLOX目标检测</category>
        <category>多模态</category>
        <category>目标跟踪</category>
        <category>目标检测（人脸检测）</category>
        <category>深度学习</category>
        <category>CV未来</category>
        <category>且读文摘</category>
        <category>NLP-BERT</category>
        <category>自然语言处理NLP</category>
        <category>IOU</category>
        <category>OpenCV之DNN模块</category>
        <category>深度模型</category>
        <category>NLP-模型优化</category>
        <category>激活函数</category>
        <category>梯度更新</category>
        <category>概述</category>
        <category>人脸识别</category>
        <category>名人名言</category>
        <category>寒窑赋</category>
        <category>NLP/评估指标</category>
        <category>度量学习</category>
        <category>智能家居</category>
        <category>机器学习/损失函数</category>
        <category>机器学习</category>
        <category>模型性能指标</category>
        <category>CV/目标检测工具箱</category>
        <category>科研项目成果</category>
        <category>表面缺陷检测</category>
        <category>计算机顶会</category>
        <category>计算机视觉CV</category>
        <category>网络编程</category>
        <category>NLP/数据增强工具</category>
        <category>计算机视觉</category>
        <category>模型优化</category>
        <category>三维建模</category>
        <category>计算机视觉库</category>
        <category>深度学习环境配置</category>
        <category>知识蒸馏</category>
        <category>多任务学习模型</category>
        <category>数据库原理</category>
        <category>算法</category>
        <category>操作系统</category>
        <category>深度模型（目标检测）</category>
        <category>视频理解</category>
        <category>ReID</category>
        <category>MOT</category>
        <category>NLP-发展史</category>
        <category>编程语言</category>
        <category>CV数据集</category>
        <category>Linux</category>
        <category>PaddlePaddle</category>
        <item>
            <guid isPermalink="true">https://leezhao415.github.io/2022/07/26/ONNX%E6%A8%A1%E5%9E%8B%E6%9E%84%E9%80%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/</guid>
            <title>ONNX模型构造与代码检查</title>
            <link>https://leezhao415.github.io/2022/07/26/ONNX%E6%A8%A1%E5%9E%8B%E6%9E%84%E9%80%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5/</link>
            <category>人工智能</category>
            <category>模型部署</category>
            <pubDate>Tue, 26 Jul 2022 23:51:31 +0800</pubDate>
            <description><![CDATA[ &lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#onnx%E6%A8%A1%E5%9E%8B%E6%9E%84%E9%80%A0%E4%B8%8E%E4%BB%A3%E7%A0%81%E6%A3%80%E6%9F%A5&#34;&gt;ONNX 模型构造与代码检查&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%9E%84%E9%80%A0%E6%8F%8F%E8%BF%B0%E5%BC%A0%E9%87%8F%E4%BF%A1%E6%81%AF%E7%9A%84%E5%AF%B9%E8%B1%A1valueinfoproto&#34;&gt;1 构造描述张量信息的对象 &lt;code&gt;ValueInfoProto&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%9E%84%E9%80%A0%E7%AE%97%E5%AD%90%E8%8A%82%E7%82%B9%E4%BF%A1%E6%81%AFnodeproto&#34;&gt;2 构造算子节点信息 &lt;code&gt;NodeProto&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E6%9E%84%E9%80%A0%E8%AE%A1%E7%AE%97%E5%9B%BEgraphproto&#34;&gt;3 构造计算图 &lt;code&gt;GraphProto&lt;/code&gt; &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E5%B0%81%E8%A3%85%E8%AE%A1%E7%AE%97%E5%9B%BE&#34;&gt;4 封装计算图&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E6%A3%80%E6%9F%A5%E4%BB%A3%E7%A0%81&#34;&gt;5 检查代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#onnx-python-api-%E6%9E%84%E9%80%A0%E6%A8%A1%E5%9E%8B%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81&#34;&gt;ONNX Python API 构造模型完整代码&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&#34;onnx-模型构造与代码检查&#34;&gt; ONNX 模型构造与代码检查&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;参考博客:&lt;a href=&#34;https://zhuanlan.zhihu.com/p/516920606&#34;&gt;https://zhuanlan.zhihu.com/p/516920606&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;1-构造描述张量信息的对象-valueinfoproto&#34;&gt; 1 构造描述张量信息的对象 &lt;code&gt;ValueInfoProto&lt;/code&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import onnx &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from onnx import helper &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from onnx import TensorProto &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;2-构造算子节点信息-nodeproto&#34;&gt; 2 构造算子节点信息 &lt;code&gt;NodeProto&lt;/code&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;mul = helper.make_node(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Mul&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;], [&lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add = helper.make_node(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;], [&lt;span class=&#34;string&#34;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;]) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;3-构造计算图-graphproto&#34;&gt; 3 构造计算图 &lt;code&gt;GraphProto&lt;/code&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;graph = helper.make_graph([mul, add], &lt;span class=&#34;string&#34;&gt;&amp;#x27;linear_func&amp;#x27;&lt;/span&gt;, [a, x, b], [output]) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;4-封装计算图&#34;&gt; 4 封装计算图&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;用  &lt;code&gt;helper.make_model&lt;/code&gt;  把计算图  &lt;code&gt;GraphProto&lt;/code&gt;  封装进模型  &lt;code&gt;ModelProto&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;model = helper.make_model(graph) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;5-检查代码&#34;&gt; 5 检查代码&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;onnx.checker.check_model(model) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;onnx.save(model, &lt;span class=&#34;string&#34;&gt;&amp;#x27;linear_func.onnx&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;onnx-python-api-构造模型完整代码&#34;&gt; ONNX Python API 构造模型完整代码&lt;/span&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;import onnx &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from onnx import helper &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;from onnx import TensorProto &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# input and output &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;a = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;b = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;output = helper.make_tensor_value_info(&lt;span class=&#34;string&#34;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;, TensorProto.FLOAT, [10, 10]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Mul &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mul = helper.make_node(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Mul&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;x&amp;#x27;&lt;/span&gt;], [&lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Add &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;add = helper.make_node(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Add&amp;#x27;&lt;/span&gt;, [&lt;span class=&#34;string&#34;&gt;&amp;#x27;c&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;], [&lt;span class=&#34;string&#34;&gt;&amp;#x27;output&amp;#x27;&lt;/span&gt;]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# graph and model &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;graph = helper.make_graph([mul, add], &lt;span class=&#34;string&#34;&gt;&amp;#x27;linear_func&amp;#x27;&lt;/span&gt;, [a, x, b], [output]) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = helper.make_model(graph) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# save model &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;onnx.checker.check_model(model) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model) &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;onnx.save(model, &lt;span class=&#34;string&#34;&gt;&amp;#x27;linear_func.onnx&amp;#x27;&lt;/span&gt;) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://leezhao415.github.io/2022/03/06/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E4%B8%BB%E6%B5%81%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%8E%A8%E7%90%86%E6%9E%B6%E6%9E%84/</guid>
            <title>【精华】主流的深度学习推理架构</title>
            <link>https://leezhao415.github.io/2022/03/06/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E4%B8%BB%E6%B5%81%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%8E%A8%E7%90%86%E6%9E%B6%E6%9E%84/</link>
            <category>人工智能</category>
            <category>模型部署</category>
            <pubDate>Sun, 06 Mar 2022 15:15:30 +0800</pubDate>
            <description><![CDATA[ &lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%BB%E6%B5%81%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%8E%A8%E7%90%86%E6%9E%B6%E6%9E%84&#34;&gt;主流的深度学习推理架构&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1ncnn&#34;&gt;（1）NCNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2openvino&#34;&gt;（2）OpenVino&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3tensorrt&#34;&gt;（3）TensorRT&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4mediapipe&#34;&gt;（4）MediaPipe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5onnx&#34;&gt;（5）ONNX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6mnn&#34;&gt;（6）MNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7mace&#34;&gt;（7）MACE&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8tnn&#34;&gt;（8）TNN&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#9tvm&#34;&gt;（9）TVM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&#34;主流的深度学习推理架构&#34;&gt; 主流的深度学习推理架构&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;发布时间: 2021-10-20 12:29&lt;/p&gt;
&lt;p&gt;以深度学习为主的人工智能算法模型在日常 AI 应用中逐渐占据主流方向，相关的各类产品也是层出不穷。我们平时所看到的 AI 产品，像刷脸支付、智能语音、银行的客服机器人等，都是 AI 算法的具体落地应用。AI 技术在具体落地应用方面，和其他软件技术一样，也需要具体的部署和实施的。既然要做部署，那就会有不同平台设备上的各种不同的部署方法和相关的部署架构工具，目前在人工智能的落地部署方面，各大平台机构也都是大展身手，纷纷推出自家的部署平台。&lt;/p&gt;
&lt;p&gt;目前市场上应用最广泛的部署工具主要有以下几种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;腾讯公司开发的移动端平台部署工具 —— &lt;code&gt;NCNN&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Intel 公司针对自家设备开开发的部署工具 —— &lt;code&gt;OpenVino&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;NVIDIA 公司针对自家 GPU 开发的部署工具 —— &lt;code&gt;TensorRT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google 针对自家硬件设备和深度学习框架开发的部署工具 —— &lt;code&gt;MediaPipe&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;由微软、亚马逊、Facebook 和 IBM 等公司共同开发的开放神经网络交换格式 —— &lt;code&gt;ONNX&lt;/code&gt; (Open Neural Network Exchange)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;阿里巴巴公司开发的移动端部署工具 ——MNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小米公司开发的移动端平台部署工具 ——MACE&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;腾讯公司基于 Rapidnet、ncnn 开发的平台部署工具 ——TNN&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;华盛顿大学的 SAMPL 组开发的平台部署工具 ——TVM&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，还有一些深度学习框架有自己的专用部署服务：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;TensorFlow 自己提供的部署服务： &lt;code&gt;TensorFlow Serving&lt;/code&gt; 、 &lt;code&gt;TensorFlow Lite&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pytorch 自己提供的部署服务： &lt;code&gt;libtorch&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://pics4.baidu.com/feed/6f061d950a7b02089df539b2dc3cb9da562cc890.jpeg?token=8a2b1fa318f2ae76490ea6bd4c360c36&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;本文主要是针对这些不同的部署工具做一个简单的分析，对比一下各家不同的部署工具到底有哪些优势和不足之处，方便大家在做部署的时候能够找到适合自己的项目的部署方法。具体的各种不同的部署工具的下载安装和使用方法会在后续的文章中做出详细的教程，关注深度人工智能学院，了解最实用的人工智能干货知识。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;1ncnn&#34;&gt; （1）NCNN&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/ncnn&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;NCNN 是腾讯优图实验室首个开源项目，是一个为手机端极致优化的高性能神经网络前向计算框架。并在 2017 年 7 月正式开源。NCNN 做为腾讯优图最 “火” 的开源项目之一，是一个为手机端极致优化的高性能神经网络前向计算框架，在设计之初便将手机端的特殊场景融入核心理念，是业界首个为移动端优化的开源神经网络推断库。能实现无第三方依赖，跨平台操作，在手机端 CPU 运算速度在开源框架中处于领先水平。基于该平台，开发者能够轻松将深度学习算法移植到手机端，输出高效的执行，进而产出人工智能 APP，将 AI 技术带到用户指尖。&lt;/p&gt;
&lt;p&gt;NCNN 从设计之初深刻考虑手机端的部署和使用。无第三方依赖，跨平台，手机端 CPU 的速度快于目前所有已知的开源框架。基于 NCNN，开发者能够将深度学习算法轻松移植到手机端高效执行，开发出人工智能 APP，将 AI 带到你的指尖。NCNN 目前已在腾讯多款应用中使用，如 QQ，Qzone，微信，天天 P 图等。&lt;/p&gt;
&lt;p&gt;下面是 NCNN 在各大系统平台的应用发展状态情况：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics0.baidu.com/feed/d50735fae6cd7b89012233e4b1c109aed8330e7d.jpeg?token=e956710da06ddaa90696d2d0a71dda12&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;从 NCNN 的发展矩阵可以看出，NCNN 覆盖了几乎所有常用的系统平台，尤其是在移动平台上的适用性更好，在 Linux、Windows 和 Android、以及 iOS、macOS 平台上都可以使用 GPU 来部署模型。&lt;/p&gt;
&lt;p&gt;根据官方的功能描述，NCNN 在各方面的性能都比较优良：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持卷积神经网络，支持多输入和多分支结构，可计算部分分支&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无任何第三方库依赖，不依赖 BLAS/NNPACK 等计算框架&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;纯 C++ 实现，跨平台，支持 android ios 等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ARM NEON 汇编级良心优化，计算速度极快&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;精细的内存管理和数据结构设计，内存占用极低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持多核并行计算加速，ARM big.LITTLE cpu 调度优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持基于全新低消耗的 vulkan api GPU 加速&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;整体库体积小于 700K，并可轻松精简到小于 300K&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可扩展的模型设计，支持 8bit 量化 和半精度浮点存储，可导入 caffe/pytorch/mxnet/onnx/darknet/keras/tensorflow (mlir) 模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;支持直接内存零拷贝引用加载网络模型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可注册自定义层实现并扩展&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;除此之外，NCNN 在对各种硬件设备的支持上也非常给力：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics2.baidu.com/feed/bf096b63f6246b60d6fee1c5561d5145530fa2fa.jpeg?token=d7c9a1ea55b036d1da0cb1f7600f8986&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;NCNN 的官方代码地址：&lt;a href=&#34;https://github.com/Tencent/ncnn&#34;&gt;https://github.com/Tencent/ncnn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;移动端的部署工具除了 NCNN，还有&lt;strong&gt;华盛顿大学的 TVM、阿里的 MNN、小米的 MACE、腾讯优图基于 NCNN 开发的 TNN&lt;/strong&gt; 等推理部署工具。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2openvino&#34;&gt; （2）OpenVino&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/openvinotoolkit/openvino&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;OpenVINO 工具套件全称是&lt;strong&gt; O&lt;/strong&gt;pen &lt;strong&gt;V&lt;/strong&gt;isual &lt;strong&gt;I&lt;/strong&gt;nference &amp;amp; &lt;strong&gt;N&lt;/strong&gt;eural Network &lt;strong&gt;O&lt;/strong&gt;ptimization，是 Intel 于 2018 年发布的，&lt;strong&gt;开源、商用免费&lt;/strong&gt;、主要应用于计算机视觉、实现神经网络模型优化和推理计算 (Inference) 加速的软件工具套件。由于其商用免费，且可以把深度学习模型部署在英尔特 CPU 和集成 GPU 上，大大节约了显卡费用，所以越来越多的深度学习应用都使用 OpenVINO 工具套件做深度学习模型部署。&lt;/p&gt;
&lt;p&gt;OpenVINO 是一个 Pipeline 工具集，同时可以兼容各种开源框架训练好的模型，拥有算法模型上线部署的各种能力，只要掌握了该工具，你可以轻松的将预训练模型在 Intel 的 CPU 上快速部署起来。&lt;/p&gt;
&lt;p&gt;对于 AI 工作负载来说，OpenVINO 提供了深度学习推理套件（DLDT)，该套件可以将各种开源框架训练好的模型进行线上部署，除此之外，还包含了图片处理工具包 OpenCV，视频处理工具包 Media SDK，用于处理图像视频解码，前处理和推理结果后处理等。&lt;/p&gt;
&lt;p&gt;在做推理的时候，大多数情况需要前处理和后处理，前处理如通道变换，取均值，归一化，Resize 等，后处理是推理后，需要将检测框等特征叠加至原图等，都可以使用 OpenVINO 工具套件里的 API 接口完成。&lt;/p&gt;
&lt;p&gt;OpenVino 目前支持 Linux、Windows、macOS、Raspbian 等系统平台。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics0.baidu.com/feed/242dd42a2834349b323b4f890d0f5ec737d3beef.jpeg?token=aec96dcaf69a1e9c03e87883d6ae1098&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;OpenVINO 工具套件&lt;/strong&gt;主要包括：Model Optimizer (模型优化器)—— 用于优化神经网络模型的工具，Inference Engine (推理引擎)—— 用于加速推理计算的软件包。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics4.baidu.com/feed/00e93901213fb80e43b8685289346427b838943c.jpeg?token=078fc24b610382ff85ef46331734a2ab&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;p&gt;模型优化器是一个 python 脚本工具，用于将开源框架训练好的模型转化为推理引擎可以识别的中间表达，其实就是两个文件，xml 和 bin 文件，前者是网络结构的描述，后者是权重文件。模型优化器的作用包括压缩模型和加速，比如，去掉推理无用的操作 (Dropout)，层的融合 (Conv + BN + Relu)，以及内存优化。&lt;/p&gt;
&lt;p&gt;推理引擎是一个支持 C\C++ 和 python 的一套 API 接口，需要开发人员自己实现推理过程的开发，开发流程其实非常的简单，核心流程如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;装载处理器的插件库&lt;/li&gt;
&lt;li&gt;读取网络结构和权重&lt;/li&gt;
&lt;li&gt;配置输入和输出参数&lt;/li&gt;
&lt;li&gt;装载模型&lt;/li&gt;
&lt;li&gt;创建推理请求&lt;/li&gt;
&lt;li&gt;准备输入 Data&lt;/li&gt;
&lt;li&gt;推理&lt;/li&gt;
&lt;li&gt;结果处理&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OpenVino 工具套件的工作流程图：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics0.baidu.com/feed/d000baa1cd11728b87604edf0c1988c7c1fd2ce9.jpeg?token=63445328b92e67bc8d2a9a170e4b2c25&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;p&gt;OpenVino 的官方地址：&lt;a href=&#34;https://docs.openvinotoolkit.org/latest/index.html&#34;&gt;https://docs.openvinotoolkit.org/latest/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;提醒一下，大家不要去下面这个网站，因为这个网站是一个酿酒厂的网站：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://openvino.org/&#34;&gt;https://openvino.org/&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;3tensorrt&#34;&gt; （3）TensorRT&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/NVIDIA/TensorRT&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TensorRT 是 NVIDIA 开发的一个高性能的深度学习推理（Inference）优化器，可以为深度学习应用提供低延迟、高吞吐率的部署推理。TensorRT 可用于对超大规模数据中心、嵌入式平台或自动驾驶平台进行推理加速。TensorRT 现已能支持 TensorFlow、Caffe、Mxnet、Pytorch 等几乎所有的深度学习框架，将 TensorRT 和 NVIDIA 的 GPU 结合起来，能在几乎所有的框架中进行快速和高效的部署推理。&lt;/p&gt;
&lt;p&gt;TensorRT 是一个 C&lt;ins&gt; 库，从 TensorRT 3 开始提供 C&lt;/ins&gt; API 和 Python API，主要用来针对 NVIDIA GPU 进行高性能推理（Inference）加速，它可为深度学习推理应用提供低延迟和高吞吐量。在推理期间，基于 TensorRT 的应用比仅 CPU 平台的执行速度快 40 倍。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics3.baidu.com/feed/08f790529822720ec0468fffab2e414ff31fab1e.jpeg?token=a7ba6e4e9e0bef3fc90c2f4d12d6de1d&#34; alt=&#34;img&#34; style=&#34;zoom:70%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;一般的深度学习项目，训练时为了加快速度，会使用多 GPU 分布式训练。但在部署推理时，为了降低成本，往往使用单个 GPU 机器甚至嵌入式平台（比如 NVIDIA Jetson）进行部署，部署端也要有与训练时相同的深度学习环境，如 caffe，TensorFlow 等。由于训练的网络模型可能会很大（比如，inception，resnet 等），参数很多，而且部署端的机器性能存在差异，就会导致推理速度慢，延迟高。这对于那些高实时性的应用场合是致命的，比如自动驾驶要求实时目标检测，目标追踪等。所以为了提高部署推理的速度，出现了很多轻量级神经网络，比如 squeezenet，mobilenet，shufflenet 等。基本做法都是基于现有的经典模型提出一种新的模型结构，然后用这些改造过的模型重新训练，再重新部署。&lt;/p&gt;
&lt;p&gt;而 TensorRT 则是对训练好的模型进行优化。TensorRT 就只是推理优化器。当你的网络训练完之后，可以将训练模型文件直接丢进 TensorRT 中，而不再需要依赖深度学习框架（Caffe，TensorFlow 等）&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics6.baidu.com/feed/a2cc7cd98d1001e9731508d205eb30e555e79734.jpeg?token=ee687e606a9c8ac3a55277dcf2bed804&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;可以认为 TensorRT 是一个只有前向传播的深度学习推理框架，这个框架可以将 Caffe，TensorFlow，PyTorch 等网络模型解析，然后与 TensorRT 中对应的层进行一一映射，把其他框架的模型统一全部转换到 TensorRT 中，然后在 TensorRT 中可以针对 NVIDIA 自家 GPU 实施优化策略，并进行部署加速。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics4.baidu.com/feed/9c16fdfaaf51f3de2f9367d7540bbb163b29794b.jpeg?token=e99e9155d9ea0bee44a6ae020a9c8537&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;p&gt;TensorRT 依赖于 Nvidia 的深度学习硬件环境，可以是 GPU 也可以是 DLA，如果没有的话则无法使用。TensorRT 支持目前大部分的神经网络 Layer 的定义，同时提供了 API 让开发者自己实现特殊 Layer 的操作。&lt;/p&gt;
&lt;p&gt;TensorRT 基于 CUDA，NVIDIA 的并行编程模型，能够利用 CUDA-X AI 中的库、开发工具和技术，为人工智能、自动机器、高性能计算和图形优化所有深度学习框架的推理。&lt;/p&gt;
&lt;p&gt;TensorRT 的部署分为两个部分：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;优化训练好的模型并生成计算流图&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 TensorRT Runtime 部署计算流图&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;TensorRT 的部署流程&lt;/strong&gt;：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics0.baidu.com/feed/3b87e950352ac65cd5e1c02b4617f91891138af5.jpeg?token=30908a1c4e1e018e68b4b5fe68d913eb&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;TensorRT 的模型导入流程&lt;/strong&gt;：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics6.baidu.com/feed/b3fb43166d224f4aa822e448cd12db5b9922d125.jpeg?token=5ebfd55ec0ce398da0190460f29f21cd&#34; alt=&#34;img&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;&lt;strong&gt;TensorRT 的优化过程&lt;/strong&gt;：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics1.baidu.com/feed/4e4a20a4462309f72aafe27acfeb47fad5cad681.jpeg?token=2048eb6e71d6a01d744bccf83dc96a10&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;p&gt;网络模型在导入至 TensorRT 后会进行一系列的优化，主要优化内容如下图所示&lt;/p&gt;
&lt;p&gt;TensorRT 官网下载地址：&lt;a href=&#34;https://developer.nvidia.com/zh-cn/tensorrt&#34;&gt;https://developer.nvidia.com/zh-cn/tensorrt&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发者指南：&lt;a href=&#34;https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html&#34;&gt;https://docs.nvidia.com/deeplearning/tensorrt/developer-guide/index.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Github 地址：&lt;a href=&#34;https://github.com/NVIDIA/TensorRT&#34;&gt;https://github.com/NVIDIA/TensorRT&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;4mediapipe&#34;&gt; （4）MediaPipe&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/google/mediapipe&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MediaPipe 是一款由 Google Research 开发并开源的多媒体机器学习模型应用框架。在谷歌，一系列重要产品，如 YouTube、Google Lens、ARCore、Google Home 以及 Nest，都已深度整合了 MediaPipe。&lt;/p&gt;
&lt;p&gt;MediaPipe 是一个基于图形的跨平台框架，用于构建多模式（视频，音频和传感器）应用的机器学习管道。MediaPipe 可在移动设备、工作站和服务器上跨平台运行，并支持移动 GPU 加速。使用 MediaPipe，可以将应用的机器学习管道构建为模块化组件的图形。MediaPipe 不仅可以被部署在服务器端，更可以在多个移动端 （安卓和苹果 iOS）和嵌入式平台（Google Coral 和树莓派）中作为设备端机器学习推理 （On-device Machine Learning Inference）框架。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics0.baidu.com/feed/377adab44aed2e73a34652fe3be4ea8285d6faa0.jpeg?token=8e65a91d6b3cdde3d34cd6b1985c12d5&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;一款多媒体机器学习应用的成败除了依赖于模型本身的好坏，还取决于设备资源的有效调配、多个输入流之间的高效同步、跨平台部署上的便捷程度、以及应用搭建的快速与否。&lt;/p&gt;
&lt;p&gt;基于这些需求，谷歌开发并开源了 MediaPipe 项目。除了上述的特性，MediaPipe 还支持 TensorFlow 和 TF Lite 的推理引擎（Inference Engine），任何 TensorFlow 和 TF Lite 的模型都可以在 MediaPipe 上使用。同时，在移动端和嵌入式平台，MediaPipe 也支持设备本身的 GPU 加速。&lt;/p&gt;
&lt;p&gt;MediaPipe 专为机器学习（ML）从业者而设计，包括研究人员，学生和软件开发人员，他们实施生产就绪的 ML 应用程序，发布伴随研究工作的代码，以及构建技术原型。MediaPipe 的主要用例是使用推理模型和其他可重用组件对应用机器学习管道进行快速原型设计。MediaPipe 还有助于将机器学习技术部署到各种不同硬件平台上的演示和应用程序中。&lt;/p&gt;
&lt;p&gt;MediaPipe 的核心框架由 C++ 实现，并提供 Java 以及 Objective C 等语言的支持。MediaPipe 的主要概念包括数据包（Packet）、数据流（Stream）、计算单元（Calculator）、图（Graph）以及子图（Subgraph）。数据包是最基础的数据单位，一个数据包代表了在某一特定时间节点的数据，例如一帧图像或一小段音频信号；数据流是由按时间顺序升序排列的多个数据包组成，一个数据流的某一特定时间戳（Timestamp）只允许至多一个数据包的存在；而数据流则是在多个计算单元构成的图中流动。MediaPipe 的图是有向的 —— 数据包从数据源（Source Calculator 或者 Graph Input Stream）流入图直至在汇聚结点（Sink Calculator 或者 Graph Output Stream） 离开。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics1.baidu.com/feed/d0c8a786c9177f3e5217be81b52a70ce9e3d560d.jpeg?token=a9eaa07c36f8e834d24c104df4d110bf&#34; alt=&#34;img&#34; style=&#34;zoom:90%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;MediaPipe 在开源了多个由谷歌内部团队实现的计算单元（Calculator）的同时，也向用户提供定制新计算单元的接口。创建一个新的 Calculator，需要用户实现 Open ()，Process ()，Close () 去分别定义 Calculator 的初始化，针对数据流的处理方法，以及 Calculator 在完成所有运算后的关闭步骤。为了方便用户在多个图中复用已有的通用组件，例如图像数据的预处理、模型的推理以及图像的渲染等， MediaPipe 引入了子图（Subgraph）的概念。因此，一个 MediaPipe 图中的节点既可以是计算单元，亦可以是子图。子图在不同图内的复用，方便了大规模模块化的应用搭建。&lt;/p&gt;
&lt;p&gt;MediaPipe 不支持除了 tensorflow 之外的其他深度学习框架，但是对各种系统平台和语言的支持非常友好：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics4.baidu.com/feed/8644ebf81a4c510f70bd4c1bdebc6e24d52aa5a1.jpeg?token=5c3ed7fa6a2c0bfa4eeba204a30aaa75&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;MediaPipe 的官方地址：&lt;a href=&#34;https://google.github.io/mediapipe/&#34;&gt;https://google.github.io/mediapipe/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;GitHub 地址：&lt;a href=&#34;https://github.com/google/mediapipe&#34;&gt;https://github.com/google/mediapipe&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;5onnx&#34;&gt; （5）ONNX&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/onnx/onnx&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Open Neural Network Exchange（ONNX，开放神经网络交换）格式，是一个用于表示深度学习模型的标准，可使模型在不同框架之间进行转移。ONNX 是一种针对机器学习所设计的开放式的文件格式，用于存储训练好的模型。它使得不同的人工智能框架（如 Pytorch, MXNet）可以采用相同格式存储模型数据并交互。ONNX 的规范及代码主要由微软，亚马逊 ，Facebook 和 IBM 等公司共同开发，以开放源代码的方式托管在 Github 上。目前官方支持加载 ONNX 模型并进行推理的深度学习框架有：Caffe2, PyTorch, MXNet，&lt;a href=&#34;http://ML.NET&#34;&gt;ML.NET&lt;/a&gt;，TensorRT 和 Microsoft CNTK，并且 TensorFlow 也非官方的支持 ONNX。&lt;/p&gt;
&lt;p&gt;比方说现在某组织因为主要开发用 TensorFlow 为基础的框架，现在有一个深度算法，需要将其部署在移动设备上，以观测变现。传统地我们需要用 caffe2 重新将模型写好，然后再训练参数；试想下这将是一个多么耗时耗力的过程。&lt;/p&gt;
&lt;p&gt;此时，ONNX 便应运而生，Caffe2，PyTorch，Microsoft Cognitive Toolkit，Apache MXNet 等主流框架都对 ONNX 有着不同程度的支持。这就便于了我们的算法及模型在不同的框架之间的迁移。无论你使用何种训练框架训练模型（比如 TensorFlow/Pytorch/OneFlow/Paddle），在训练完毕后你都可以将这些框架的模型统一转换为 ONNX 这种统一的格式进行存储。&lt;/p&gt;
&lt;p&gt;开放式神经网络交换（ONNX）是迈向开放式生态系统的第一步，它使 AI 开发人员能够随着项目的发展选择合适的工具。ONNX 为 AI 模型提供开源格式。它定义了可扩展的计算图模型，以及内置运算符和标准数据类型的定义。最初的 ONNX 专注于推理（评估）所需的功能。ONNX 解释计算图的可移植，它使用 graph 的序列化格式。它不一定是框架选择在内部使用和操作计算的形式。例如，如果在优化过程中操作更有效，则实现可以在存储器中以不同方式表示模型。&lt;/p&gt;
&lt;p&gt;在获得 ONNX 模型之后，模型部署人员自然就可以将这个模型部署到兼容 ONNX 的运行环境中去。这里一般还会设计到额外的模型转换工作，典型的比如在 Android 端利用 NCNN 部署 ONNX 格式模型，那么就需要将 ONNX 利用 NCNN 的转换工具转换到 NCNN 所支持的 bin 和 param 格式。&lt;/p&gt;
&lt;p&gt;ONNX 作为一个文件格式，我们自然需要一定的规则去读取我们想要的信息或者是写入我们需要保存信息。ONNX 使用的是 Protobuf 这个序列化数据结构去存储神经网络的权重信息。熟悉 Caffe 或者 Caffe2 的同学应该知道，它们的模型存储数据结构协议也是 Protobuf。&lt;/p&gt;
&lt;p&gt;Protobuf 是一种轻便高效的结构化数据存储格式，可以用于结构化数据串行化，或者说序列化。它很适合做数据存储或数据交换格式。可用于通讯协议、数据存储等领域的语言无关、平台无关、可扩展的序列化结构数据格式。目前提供了 C++、Java、Python 三种语言的 API（摘自官方介绍）。&lt;/p&gt;
&lt;p&gt;Protobuf 协议是一个以 *.proto 后缀文件为基础的，这个文件描述了用户自定义的数据结构。如果需要了解更多细节请参考 0x7 节的资料 3，这里只是想表达 ONNX 是基于 Protobuf 来做数据存储和传输，那么自然 onnx.proto 就是 ONNX 格式文件了。&lt;/p&gt;
&lt;p&gt;ONNX 作为框架共用的一种模型交换格式，使用 protobuf 二进制格式来序列化模型，可以提供更好的传输性能我们可能会在某一任务中将 Pytorch 或者 TensorFlow 模型转化为 ONNX 模型 (ONNX 模型一般用于中间部署阶段)，然后再拿转化后的 ONNX 模型进而转化为我们使用不同框架部署需要的类型，ONNX 相当于一个翻译的作用。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pics4.baidu.com/feed/5882b2b7d0a20cf4cd20a6bbcbec003fadaf9915.jpeg?token=131436ea2d13a4af3d07a01a427b2184&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;ONNX 将每一个网络的每一层或者说是每一个算子当作节点 Node，再由这些 Node 去构建一个 Graph，相当于是一个网络。最后将 Graph 和这个 onnx 模型的其他信息结合在一起，生成一个 model，也就是最终的.onnx 的模型。&lt;/p&gt;
&lt;p&gt;构建一个简单的 onnx 模型，实质上，只要构建好每一个 node，然后将它们和输入输出超参数一起塞到 graph，最后转成 model 就可以了。&lt;/p&gt;
&lt;p&gt;在计算方面，虽然更高级的表达不同，但不同框架产生的最终结果都是非常接近。因此实时跟踪某一个神经网络是如何在这些框架上生成的，接着使用这些信息创建一个通用的计算图，即符合 ONNX 标准的计算图。&lt;/p&gt;
&lt;p&gt;ONNX 为可扩展的计算图模型、内部运算器（Operator）以及标准数据类型提供了定义。在初始阶段，每个计算数据流图以节点列表的形式组织起来，构成一个非循环的图。节点有一个或多个的输入与输出。每个节点都是对一个运算器的调用。图还会包含协助记录其目的、作者等信息的元数据。运算器在图的外部实现，但那些内置的运算器可移植到不同的框架上，每个支持 ONNX 的框架将在匹配的数据类型上提供这些运算器的实现。&lt;/p&gt;
&lt;p&gt;Microsoft 和合作伙伴社区创建了 ONNX 作为表示机器学习模型的开放标准。 许多框架（包括 TensorFlow、PyTorch、SciKit-Learn、Keras、Chainer、MXNet、MATLAB 和 SparkML）中的模型都可以导出或转换为标准 ONNX 格式。模型采用 ONNX 格式后，可在各种平台和设备上运行。&lt;/p&gt;
&lt;p&gt;ONNX 运行时是一种用于将 ONNX 模型部署到生产环境的高性能推理引擎。它针对云和 Edge 进行了优化，适用于 Linux、Windows 和 Mac。它使用 C++ 编写，还包含 C、Python、C#、Java 和 Javascript (Node.js) API，可在各种环境中使用。ONNX 运行时同时支持 DNN 和传统 ML 模型，并与不同硬件上的加速器（例如，NVidia GPU 上的 TensorRT、Intel 处理器上的 OpenVINO、Windows 上的 DirectML 等）集成。通过使用 ONNX 运行时，可以从大量的生产级优化、测试和不断改进中受益。&lt;/p&gt;
&lt;p&gt;ONNX 运行时用于大规模 Microsoft 服务，如必应、Office 和 Azure 认知服务。性能提升取决于许多因素，但这些 Microsoft 服务的 CPU 平均起来可实现 2 倍的性能提升。除了 Azure 机器学习服务外，ONNX 运行时还在支持机器学习工作负荷的其他产品中运行，包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Windows: 该运行时作为 Windows 机器学习的一部分内置于 Windows 中，在数亿台设备上运行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Azure SQL 产品系列：针对 Azure SQL Edge 和 Azure SQL 托管实例中的数据运行本机评分。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;http://ML.NET&#34;&gt;ML.NET&lt;/a&gt;：在 &lt;a href=&#34;http://ML.NET&#34;&gt;ML.NET&lt;/a&gt; 中运行 ONNX 模型。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://pics2.baidu.com/feed/aa18972bd40735fa6cac32875ab444ba0e24089a.jpeg?token=0f2931f539d3ddfd5e3759f24d93aeea&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;ONNX 的官方网站：&lt;a href=&#34;https://onnx.ai/&#34;&gt;https://onnx.ai/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;ONXX 的 GitHub 地址：&lt;a href=&#34;https://github.com/onnx/onnx&#34;&gt;https://github.com/onnx/onnx&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;6mnn&#34;&gt; （6）MNN&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/alibaba/MNN&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;MNN 是一个高效、轻量的深度学习框架。由阿里巴巴开源，它支持深度模型推理与训练，尤其在端侧的推理与训练性能在业界处于领先地位。目前，MNN 已经在阿里巴巴的手机淘宝、手机天猫、优酷、钉钉、闲鱼等 20 多个 App 中使用，覆盖直播、短视频、搜索推荐、商品图像搜索、互动营销、权益发放、安全风控等 70 多个场景。此外，IoT 等场景下也有若干应用。&lt;/p&gt;
&lt;p&gt;MNN 的架构设计理念与性能数据在 MLSys 2020 上面发表。Paper &lt;a href=&#34;https://proceedings.mlsys.org/static/paper_files/mlsys/2020/7-Paper.pdf&#34;&gt;在此处&lt;/a&gt;。如果 MNN 对你的研究有所助益，欢迎引用 MNN 的论文：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;（1）整体特点&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;1&amp;gt;  &lt;code&gt;轻量性&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;针对端侧设备特点深度定制和裁剪，无任何依赖，可以方便地部署到移动设备和各种嵌入式设备中。&lt;/li&gt;
&lt;li&gt;iOS 平台：armv7+arm64 静态库大小 5MB 左右，链接生成可执行文件增加大小 620KB 左右，metallib 文件 600KB 左右。&lt;/li&gt;
&lt;li&gt;Android 平台：so 大小 400KB 左右，OpenCL 库 400KB 左右，Vulkan 库 400KB 左右。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2&amp;gt;  &lt;code&gt;通用性&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 &lt;code&gt;Tensorflow&lt;/code&gt; 、 &lt;code&gt;Caffe&lt;/code&gt; 、 &lt;code&gt;ONNX&lt;/code&gt;  等主流模型文件格式，支持 &lt;code&gt;CNN&lt;/code&gt; 、 &lt;code&gt;RNN&lt;/code&gt; 、 &lt;code&gt;GAN&lt;/code&gt;  等常用网络。&lt;/li&gt;
&lt;li&gt;支持 86 个 &lt;code&gt;Tensorflow&lt;/code&gt; Op、34 个 &lt;code&gt;Caffe&lt;/code&gt; Op；各计算设备支持的 MNN Op 数：CPU 71 个，Metal 55 个，OpenCL 29 个，Vulkan 31 个。&lt;/li&gt;
&lt;li&gt;支持 iOS 8.0+、Android 4.3 + 和具有 POSIX 接口的嵌入式设备。&lt;/li&gt;
&lt;li&gt;支持异构设备混合计算，目前支持 CPU 和 GPU，可以动态导入 GPU Op 插件，替代 CPU Op 的实现。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3&amp;gt;  &lt;code&gt;高性能&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不依赖任何第三方计算库，依靠大量手写汇编实现核心运算，充分发挥 ARM CPU 的算力。&lt;/li&gt;
&lt;li&gt;iOS 设备上可以开启 GPU 加速（Metal），常用模型上快于苹果原生的 CoreML。&lt;/li&gt;
&lt;li&gt;Android 上提供了 &lt;code&gt;OpenCL&lt;/code&gt; 、 &lt;code&gt;Vulkan&lt;/code&gt; 、 &lt;code&gt;OpenGL&lt;/code&gt;  三套方案，尽可能多地满足设备需求，针对主流 GPU（ &lt;code&gt;Adreno&lt;/code&gt;  和 &lt;code&gt;Mali&lt;/code&gt; ）做了深度调优。&lt;/li&gt;
&lt;li&gt;卷积、转置卷积算法高效稳定，对于任意形状的卷积均能高效运行，广泛运用了 Winograd 卷积算法，对 3x3 -&amp;gt; 7x7 之类的对称卷积有高效的实现。&lt;/li&gt;
&lt;li&gt;针对 ARM v8.2 的新架构额外作了优化，新设备可利用半精度计算的特性进一步提速。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4&amp;gt;  &lt;code&gt;易用性&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有高效的图像处理模块，覆盖常见的形变、转换等需求，一般情况下，无需额外引入 libyuv 或 opencv 库处理图像。&lt;/li&gt;
&lt;li&gt;支持回调机制，可以在网络运行中插入回调，提取数据或者控制运行走向。&lt;/li&gt;
&lt;li&gt;支持只运行网络中的一部分，或者指定 CPU 和 GPU 间并行运行。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;（2）架构设计&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://static.oschina.net/uploads/space/2019/0507/114930_QiJ8_4062684.png&#34; alt=&#34;img&#34; style=&#34;zoom: 50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;MNN 可以分为 Converter 和 Interpreter 两部分。&lt;/p&gt;
&lt;p&gt;Converter 由 Frontends 和 Graph Optimize 构成。前者负责支持不同的训练框架，MNN 当前支持 Tensorflow (Lite)、Caffe 和 ONNX (PyTorch/MXNet 的模型可先转为 ONNX 模型再转到 MNN)；后者通过算子融合、算子替代、布局调整等方式优化图。&lt;/p&gt;
&lt;p&gt;Interpreter 由 Engine 和 Backends 构成。前者负责模型的加载、计算图的调度；后者包含各计算设备下的内存分配、Op 实现。在 Engine 和 Backends 中，MNN 应用了多种优化方案，包括在卷积和反卷积中应用 Winograd 算法、在矩阵乘法中应用 Strassen 算法、低精度计算、Neon 优化、手写汇编、多线程优化、内存复用、异构计算等。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;7mace&#34;&gt; （7）MACE&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/XiaoMi/mace&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Mobile AI Compute Engine (MACE)&lt;/code&gt;  是小米开发的一个专为移动端异构计算平台 (支持 Android, iOS, Linux, Windows) 优化的神经网络计算框架。 主要从以下的角度做了专门的优化：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;性能
&lt;ul&gt;
&lt;li&gt;代码经过 NEON 指令，OpenCL 以及 Hexagon HVX 专门优化，并且采用 &lt;a href=&#34;https://arxiv.org/abs/1509.09308&#34;&gt;Winograd 算法&lt;/a&gt;来进行卷积操作的加速。 此外，还对启动速度进行了专门的优化。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;功耗
&lt;ul&gt;
&lt;li&gt;支持芯片的功耗管理，例如 ARM 的 big.LITTLE 调度，以及高通 Adreno GPU 功耗选项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;系统响应
&lt;ul&gt;
&lt;li&gt;支持自动拆解长时间的 OpenCL 计算任务，来保证 UI 渲染任务能够做到较好的抢占调度， 从而保证系统 UI 的相应和用户体验。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;内存占用
&lt;ul&gt;
&lt;li&gt;通过运用内存依赖分析技术，以及内存复用，减少内存的占用。另外，保持尽量少的外部 依赖，保证代码尺寸精简。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型加密与保护
&lt;ul&gt;
&lt;li&gt;模型保护是重要设计目标之一。支持将模型转换成 C++ 代码，以及关键常量字符混淆，增加逆向的难度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;硬件支持范围
&lt;ul&gt;
&lt;li&gt;支持高通，联发科，以及松果等系列芯片的 CPU，GPU 与 DSP (目前仅支持 Hexagon) 计算加速。CPU 模式支持 Android, iOS, Linux 等系统。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;模型格式支持
&lt;ul&gt;
&lt;li&gt;支持&lt;a href=&#34;https://github.com/tensorflow/tensorflow&#34;&gt; TensorFlow&lt;/a&gt;， &lt;a href=&#34;https://github.com/BVLC/caffe&#34;&gt;Caffe&lt;/a&gt; 和&lt;a href=&#34;https://github.com/onnx/onnx&#34;&gt; ONNX&lt;/a&gt; 等模型格式。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;8tnn&#34;&gt; （8）TNN&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/TNN&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TNN 是由腾讯优图实验室开源的高性能、轻量级神经网络推理框架，同时拥有跨平台、高性能、模型压缩、代码裁剪等众多突出优势。TNN 框架在原有 Rapidnet、ncnn 框架的基础上进一步加强了移动端设备的支持以及性能优化，同时借鉴了业界主流开源框架高性能和良好拓展性的特性，拓展了对于后台 X86, NV GPU 的支持。手机端 TNN 已经在手 Q、微视、P 图等众多应用中落地，服务端 TNN 作为腾讯云 AI 基础加速框架已为众多业务落地提供加速支持。欢迎大家参与协同共建，促进 TNN 推理框架进一步完善。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;9tvm&#34;&gt; （9）TVM&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/tvm&#34;&gt;Github 地址&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;TVM 是一款开源项目，主要由华盛顿大学的 SAMPL 组贡献开发。目前深度学习社区十分活跃，每天都有研究者提出新的 operation 以期望更好的提升模型的准确率。同时，随着越来越多的厂商开始做硬件（比如寒武纪，商汤科技等等），运行神经网络的时候会有越来越多的后端设备可供选择。&lt;/p&gt;
&lt;p&gt;而这对于做框架的人来说就比较头疼，既要尝试为新出现的各种 operation 提供支持，又要在新出现的后端设备上实现现有的 operation。TVM 项目因此应运而生，希望达到的目标就是研究人员只用写一次 operation，然后 TVM 自动对各种后端设备生成性能可观的代码。&lt;/p&gt;
&lt;p&gt;按照官方的定义，TVM 是一套完整的 stack，包括神经网络图优化（比如 op fusion）和单个 operation 优化等部分。我习惯于将图优化的部分归类做 Relay 项目，而仅仅把单个 operation 优化看做 TVM，因此文章之后提到的 TVM 基本是指单个算子优化这部分。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://pic2.zhimg.com/80/v2-0ab891db0248c2c6f12badf0ba31efdd_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;p&gt;上面这张摘自 tvm 的官网 (&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//tvm.ai/about&#34;&gt;https://tvm.ai/about&lt;/a&gt;) 的图片说明了 TVM 处于深度学习框架的位置。TVM 位于神经网络图（High-Level Differentiable IR）的下方，底层硬件（LLVM, CUDA, Metal）的上方。&lt;/p&gt;
&lt;p&gt;图片右边的 AutoTVM 我认为比较独立。这个目的是自动调整 TVM 生成的代码的一些参数，试图让 TVM 生成的代码尽可能快。做自动代码优化的优秀项目除了 AutoTVM，还有&lt;a href=&#34;https://halide-lang.org/papers/autoscheduler2019.html&#34;&gt; Halide&lt;/a&gt;，个人认为目前 Halide 做代码自动优化做的更好。TVM 的基本思路参考自 Halide，其中的数据结构也引用了很多 Halide 的实现，强烈推荐感兴趣的朋友研究一下 Halide&lt;/p&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://leezhao415.github.io/2022/03/03/%E3%80%90Linux%E3%80%91NanoDet-Plus%E4%B9%8Bncnn%E9%83%A8%E7%BD%B2/</guid>
            <title>【Linux】NanoDet Plus之ncnn部署</title>
            <link>https://leezhao415.github.io/2022/03/03/%E3%80%90Linux%E3%80%91NanoDet-Plus%E4%B9%8Bncnn%E9%83%A8%E7%BD%B2/</link>
            <category>人工智能</category>
            <category>模型部署</category>
            <pubDate>Thu, 03 Mar 2022 22:56:48 +0800</pubDate>
            <description><![CDATA[ &lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1%E5%87%86%E5%A4%87%E5%B7%A5%E4%BD%9C&#34;&gt;（1）准备工作：&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2%E6%93%8D%E4%BD%9C%E6%AD%A5%E9%AA%A4&#34;&gt;（2）操作步骤：&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#step1&#34;&gt;step1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step2&#34;&gt;step2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#step3&#34;&gt;step3&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3%E5%8F%82%E8%80%83%E6%95%99%E7%A8%8B&#34;&gt;（3）参考教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;p&gt;本项目实现在 linux 平台使用 ncnn 部署 NanoDet Plus 模型的功能，内容亲测有效，可作为通用 ncnn 模型部署参考项目。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&#34;1准备工作&#34;&gt; （1）准备工作：&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;下载安卓的项目包：&lt;a href=&#34;https://github.com/nihui/ncnn-android-nanodet&#34;&gt;https://github.com/nihui/ncnn-android-nanodet&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;2操作步骤&#34;&gt; （2）操作步骤：&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;step1&#34;&gt; step1&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/Tencent/ncnn/releases&#34;&gt;https://github.com/Tencent/ncnn/releases&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download ncnn-YYYYMMDD-android-vulkan.zip or build ncnn for android yourself&lt;/li&gt;
&lt;li&gt;Extract ncnn-YYYYMMDD-android-vulkan.zip into &lt;strong&gt;app/src/main/jni&lt;/strong&gt; and change the &lt;strong&gt;ncnn_DIR&lt;/strong&gt; path to yours in &lt;strong&gt;app/src/main/jni/CMakeLists.txt&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;step2&#34;&gt; step2&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/nihui/opencv-mobile&#34;&gt;https://github.com/nihui/opencv-mobile&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Download opencv-mobile-XYZ-android.zip&lt;/li&gt;
&lt;li&gt;Extract opencv-mobile-XYZ-android.zip into &lt;strong&gt;app/src/main/jni&lt;/strong&gt; and change the &lt;strong&gt;OpenCV_DIR&lt;/strong&gt; path to yours in &lt;strong&gt;app/src/main/jni/CMakeLists.txt&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;step3&#34;&gt; step3&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;Open this project with Android Studio, build it and enjoy!&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;3参考教程&#34;&gt; （3）参考教程&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/Jianyuemou/article/details/120763091?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164272662116780271983928%2522%252C%2522scm%2522%253A%252220140713.130102334%E2%80%A6%2522%257D&amp;amp;request_id=164272662116780271983928&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2blogsobaiduend~default-1-120763091.nonecase&amp;amp;utm_term=nanodet%E9%83%A8%E7%BD%B2%E5%9C%A8android+studio&amp;amp;spm=1018.2226.3001.4450&#34;&gt;安卓部署：手机端 Anchor-free 的目标检测模型 Nanodet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://blog.csdn.net/qq_33596242/article/details/122377654?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522164272662116780271954464%2522%252C%2522scm%2522%253A%252220140713.130102334.pc%255Fblog.%2522%257D&amp;amp;request_id=164272662116780271954464&amp;amp;biz_id=0&amp;amp;utm_medium=distribute.pc_search_result.none-task-blog-2blogfirst_rank_ecpm_v1~rank_v31_ecpm-3-122377654.nonecase&amp;amp;utm_term=nanodet%E9%83%A8%E7%BD%B2%E5%9C%A8android+studio&amp;amp;spm=1018.2226.3001.4450&#34;&gt;安卓手机部署 nanodet&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://leezhao415.github.io/2022/03/03/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B%EF%BC%88OpenVINO%E3%80%81TensorRT%EF%BC%89/</guid>
            <title>【精华】模型部署实例（OpenVINO、TensorRT）</title>
            <link>https://leezhao415.github.io/2022/03/03/%E3%80%90%E7%B2%BE%E5%8D%8E%E3%80%91%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%AE%9E%E4%BE%8B%EF%BC%88OpenVINO%E3%80%81TensorRT%EF%BC%89/</link>
            <category>人工智能</category>
            <category>模型部署</category>
            <pubDate>Thu, 03 Mar 2022 22:56:11 +0800</pubDate>
            <description><![CDATA[ &lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1openvino%E9%83%A8%E7%BD%B2nanodet%E6%A8%A1%E5%9E%8B&#34;&gt;（1）OpenVINO 部署 NanoDet 模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-nanodet%E7%AE%80%E4%BB%8B&#34;&gt;1&amp;gt; nanodet 简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE&#34;&gt;2&amp;gt; 环境配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-nanodet%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83%E5%92%8C%E8%BD%AC%E6%8D%A2onnx&#34;&gt;3&amp;gt; NanoDet 模型训练和转换 ONNX&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-nanodet%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2&#34;&gt;4&amp;gt; NanoDet 模型部署&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E6%A0%B8%E5%BF%83%E4%BB%A3%E7%A0%81%E4%B8%80%E8%A7%88&#34;&gt;5&amp;gt; 核心代码一览&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E6%8E%A8%E7%90%86%E6%97%B6%E9%97%B4%E5%B1%95%E7%A4%BA%E5%8F%8A%E9%A2%84%E6%B5%8B%E7%BB%93%E6%9E%9C%E5%B1%95%E7%A4%BA&#34;&gt;6&amp;gt; 推理时间展示及预测结果展示&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2tensorrt%E9%83%A8%E7%BD%B2%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B&#34;&gt;（2）TensorRT 部署深度学习模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E8%83%8C%E6%99%AF&#34;&gt;1&amp;gt; 背景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%9B%B8%E5%85%B3%E6%8A%80%E6%9C%AF&#34;&gt;2&amp;gt; 相关技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-tensorflow%E6%A8%A1%E5%9E%8Btensorrt%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B&#34;&gt;3&amp;gt; tensorflow 模型 tensorRT 部署教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-caffe%E6%A8%A1%E5%9E%8Btensorrt%E9%83%A8%E7%BD%B2%E6%95%99%E7%A8%8B&#34;&gt;4&amp;gt; Caffe 模型 tensorRT 部署教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E4%B8%BAtensorrt%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%82&#34;&gt;5&amp;gt; 为 tensorRT 添加自定义层&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E4%B8%BAcaffeparser%E6%B7%BB%E5%8A%A0%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%82%E6%94%AF%E6%8C%81&#34;&gt;6&amp;gt; 为 CaffeParser 添加自定义层支持&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-%E5%BF%83%E5%BE%97%E4%BD%93%E4%BC%9A%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95&#34;&gt;7&amp;gt; 心得体会（踩坑记录）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&#34;1openvino-部署-nanodet-模型&#34;&gt; （1）OpenVINO 部署 NanoDet 模型&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1gt-nanodet-简介&#34;&gt; 1&amp;gt; nanodet 简介&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;NanoDet （&lt;a href=&#34;https://github.com/RangiLyu/nanodet%EF%BC%89%E6%98%AF%E4%B8%80%E4%B8%AA%E9%80%9F%E5%BA%A6%E8%B6%85%E5%BF%AB%E5%92%8C%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%9A%84Anchor-free&#34;&gt;https://github.com/RangiLyu/nanodet）是一个速度超快和轻量级的 Anchor-free&lt;/a&gt; 目标检测模型。想了解算法本身的可以去搜一搜之前机器之心的介绍。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2gt-环境配置&#34;&gt; 2&amp;gt; 环境配置&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://so.csdn.net/so/search?q=Ubuntu&amp;amp;spm=1001.2101.3001.7020&#34;&gt;Ubuntu&lt;/a&gt;：18.04&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenVINO&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenVINO&lt;/a&gt;：2020.4&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://so.csdn.net/so/search?q=OpenCV&amp;amp;spm=1001.2101.3001.7020&#34;&gt;OpenCV&lt;/a&gt;：3.4.2&lt;/li&gt;
&lt;li&gt;OpenVINO 和 OpenCV 安装包（编译好了，也可以自己从官网下载自己编译）可以从链接: &lt;a href=&#34;https://pan.baidu.com/s/1zxtPKm-Q48Is5mzKbjGHeg&#34;&gt;https://pan.baidu.com/s/1zxtPKm-Q48Is5mzKbjGHeg&lt;/a&gt; 密码: gw5c 下载&lt;/li&gt;
&lt;li&gt;OpenVINO 安装&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -xvzf l_openvino_toolkit_p_2020.4.287.tgz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; l_openvino_toolkit_p_2020.4.287&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ./install_GUI.sh 一路next安装&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; /opt/intel/openvino/install_dependencies&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ./install_openvino_dependencies.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vi ~/.bashrc&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;把如下两行放置到 bashrc 文件尾&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;source&lt;/span&gt; /opt/intel/openvino/bin/setupvars.sh&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;source&lt;/span&gt; /opt/intel/openvino/opencv/setupvars.sh&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;source ~/.bashrc 激活环境&lt;/li&gt;
&lt;li&gt;模型优化配置步骤&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;cd&lt;/span&gt; /opt/intel/openvino/deployment_tools/model_optimizer/install_prerequisites&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sudo ./install_prerequisites_onnx.sh（模型是从onnx转为IR文件，只需配置onnx依赖）&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;OpenCV 配置&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;tar -xvzf opencv-3.4.2.zip &lt;span class=&#34;comment&#34;&gt;# 解压OpenCV到用户根目录即可，以便后续调用。（这是我编译好的版本，有需要可以自己编译）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;3gt-nanodet-模型训练和转换-onnx&#34;&gt; 3&amp;gt; NanoDet 模型训练和转换 ONNX&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;git clone &lt;a href=&#34;https://github.com/Wulingtian/nanodet.git&#34;&gt;https://github.com/Wulingtian/nanodet.git&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;cd nanodet&lt;/li&gt;
&lt;li&gt;cd config 配置模型文件，训练模型&lt;/li&gt;
&lt;li&gt;定位到 nanodet 目录，进入 tools 目录，打开 export.py 文件，配置 cfg_path model_path out_path 三个参数&lt;/li&gt;
&lt;li&gt;定位到 nanodet 目录，运行 python tools/export.py 得到转换后的 onnx 模型&lt;/li&gt;
&lt;li&gt;python /opt/intel/openvino/deployment_tools/model_optimizer/mo_onnx.py --input_model onnx 模型 --output_dir 期望模型输出的路径。得到 IR 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4gt-nanodet-模型部署&#34;&gt; 4&amp;gt; NanoDet 模型部署&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;sudo apt install cmake 安装 cmake&lt;/li&gt;
&lt;li&gt;git clone &lt;a href=&#34;https://github.com/Wulingtian/nanodet_openvino.git&#34;&gt;https://github.com/Wulingtian/nanodet_openvino.git&lt;/a&gt; （求 star！）&lt;/li&gt;
&lt;li&gt;cd nanodet_openvino 打开 CMakeLists.txt 文件，修改 OpenCV_INCLUDE_DIRS 和 OpenCV_LIBS_DIR，之前已经把 OpenCV 解压到根目录了，所以按照你自己的路径指定&lt;/li&gt;
&lt;li&gt;定位到 nanodet_openvino，cd models 把之前生成的 IR 模型（包括 bin 和 xml 文件）文件放到该目录下&lt;/li&gt;
&lt;li&gt;定位到 nanodet_openvino， cd test_imgs 把需要测试的图片放到该目录下&lt;/li&gt;
&lt;li&gt;定位到 nanodet_openvino，编辑 main.cpp，xml_path 参数修改为 &amp;quot;…/models/ 你的模型名称.xml&amp;quot;&lt;/li&gt;
&lt;li&gt;编辑 num_class 设置类别数，例如：我训练的模型是安全帽检测，只有 1 类，那么设置为 1&lt;/li&gt;
&lt;li&gt;编辑 src 设置测试图片路径，src 参数修改为 &amp;quot;…/test_imgs/ 你的测试图片&amp;quot;&lt;/li&gt;
&lt;li&gt;定位到 nanodet_openvino&lt;/li&gt;
&lt;li&gt;mkdir build; cd build; cmake … ;make&lt;/li&gt;
&lt;li&gt;./detect_test 输出平均推理时间，以及保存预测图片到当前目录下，至此，部署完成！&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;5gt-核心代码一览&#34;&gt; 5&amp;gt; 核心代码一览&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight php&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;85&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;86&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;87&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;88&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;89&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;90&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;91&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;92&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;93&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;94&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;95&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;96&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;97&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;98&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;99&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;100&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;101&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;102&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;103&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;104&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;105&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;106&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;107&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;108&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;109&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;110&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;111&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;112&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;113&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//主要对图片进行预处理，包括resize和归一化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt; Detector::prepareImage(cv::Mat &amp;amp;src_img)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt; result(INPUT_W * INPUT_H * &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; *data = result.data();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; ratio = &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(INPUT_W) / &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(src_img.cols) &amp;lt; &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(INPUT_H) / &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(src_img.rows) ? &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(INPUT_W) / &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(src_img.cols) : &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(INPUT_H) / &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(src_img.rows);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv::Mat flt_img = cv::Mat::zeros(cv::Size(INPUT_W, INPUT_H), CV_8UC3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv::Mat rsz_img = cv::Mat::zeros(cv::Size(src_img.cols*ratio, src_img.rows*ratio), CV_8UC3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv::resize(src_img, rsz_img, cv::Size(), ratio, ratio);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    rsz_img.copyTo(flt_img(cv::Rect(&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, rsz_img.cols, rsz_img.rows)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    flt_img.convertTo(flt_img, CV_32FC3);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; channelLength = INPUT_W * INPUT_H;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;cv::Mat&amp;gt; split_img = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cv::Mat(INPUT_W, INPUT_H, CV_32FC1, data + channelLength * &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cv::Mat(INPUT_W, INPUT_H, CV_32FC1, data + channelLength),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            cv::Mat(INPUT_W, INPUT_H, CV_32FC1, data)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv::split(flt_img, split_img);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        split_img[i] = (split_img[i] - img_mean[i]) / img_std[i];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//加载IR模型，初始化网络&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;bool&lt;/span&gt; Detector::init(&lt;span class=&#34;keyword&#34;&gt;string&lt;/span&gt; xml_path,&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; cof_threshold,&lt;span class=&#34;keyword&#34;&gt;double&lt;/span&gt; nms_area_threshold,&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; input_w, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; input_h, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; num_class, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; r_rows, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; r_cols, std::vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt; s, std::vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt; i_mean,std::vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt; i_std)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _xml_path = xml_path;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _cof_threshold = cof_threshold;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _nms_area_threshold = nms_area_threshold;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    INPUT_W = input_w;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    INPUT_H = input_h;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NUM_CLASS = num_class;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    refer_rows = r_rows;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    refer_cols = r_cols;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    strides = s;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    img_mean = i_mean;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    img_std = i_std;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Core ie;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    auto cnnNetwork = ie.ReadNetwork(_xml_path); &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    InputsDataMap inputInfo(cnnNetwork.getInputsInfo());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    InputInfo::Ptr&amp;amp; input = inputInfo.begin()-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _input_name = inputInfo.begin()-&amp;gt;first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input-&amp;gt;setPrecision(Precision::FP32);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    input-&amp;gt;getInputData()-&amp;gt;setLayout(Layout::NCHW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ICNNNetwork::InputShapes inputShapes = cnnNetwork.getInputShapes();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    SizeVector&amp;amp; inSizeVector = inputShapes.begin()-&amp;gt;second;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cnnNetwork.reshape(inputShapes);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _outputinfo = OutputsDataMap(cnnNetwork.getOutputsInfo());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (auto &amp;amp;output : _outputinfo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        output.second-&amp;gt;setPrecision(Precision::FP32);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    _network =  ie.LoadNetwork(cnnNetwork, &lt;span class=&#34;string&#34;&gt;&amp;quot;CPU&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;true&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//模型推理及获取输出结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;vector&amp;lt;Detector::Bbox&amp;gt; Detector::process_frame(Mat&amp;amp; inframe)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv::Mat showImage = inframe.&lt;span class=&#34;keyword&#34;&gt;clone&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt; pr_img = prepareImage(inframe);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    InferRequest::Ptr infer_request = _network.CreateInferRequestPtr();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    Blob::Ptr frameBlob = infer_request-&amp;gt;GetBlob(_input_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    InferenceEngine::LockedMemory&amp;lt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;&amp;gt; blobMapped = InferenceEngine::as&amp;lt;InferenceEngine::MemoryBlob&amp;gt;(frameBlob)-&amp;gt;wmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;* blob_data = blobMapped.&lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;*&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    memcpy(blob_data, pr_img.data(), &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt; * INPUT_H * INPUT_W * sizeof(&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    infer_request-&amp;gt;Infer();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;Rect&amp;gt; origin_rect;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt; origin_rect_cof;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; i=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    vector&amp;lt;Bbox&amp;gt; bboxes;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (auto &amp;amp;output : _outputinfo) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        auto output_name = output.first;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Blob::Ptr blob = infer_request-&amp;gt;GetBlob(output_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        LockedMemory&amp;lt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt;&amp;gt; blobMapped = &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt;&amp;lt;MemoryBlob&amp;gt;(blob)-&amp;gt;rmap();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; *output_blob = blobMapped.&lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; *&amp;gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        bboxes = postProcess(showImage,output_blob);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        ++i;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; bboxes;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//对模型输出结果进行解码及nms&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;std::vector&amp;lt;Detector::Bbox&amp;gt; Detector::postProcess(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; cv::Mat &amp;amp;src_img,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                              &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; *output) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    GenerateReferMatrix();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    std::vector&amp;lt;Detector::Bbox&amp;gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; *out = output;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt; ratio = std::max(&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(src_img.cols) / &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(INPUT_W), &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(src_img.rows) / &lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;(INPUT_H));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    cv::Mat result_matrix = cv::Mat(refer_rows, NUM_CLASS + &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, CV_32FC1, out);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; row_num = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; row_num &amp;lt; refer_rows; row_num++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        Detector::Bbox box;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        auto *row = result_matrix.ptr&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt;(row_num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        auto max_pos = std::max_element(row + &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, row + NUM_CLASS + &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        box.prob = row[max_pos - row];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (box.prob &amp;lt; _cof_threshold)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            &lt;span class=&#34;keyword&#34;&gt;continue&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        box.classes = max_pos - row - &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        auto *anchor = refer_matrix.ptr&amp;lt;&lt;span class=&#34;keyword&#34;&gt;float&lt;/span&gt;&amp;gt;(row_num);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        box.x = (anchor[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] - row[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] * anchor[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] + anchor[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;] + row[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] * anchor[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]) / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        box.y = (anchor[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] - row[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] * anchor[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] + anchor[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] + row[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] * anchor[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]) / &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt; * ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        box.w = (row[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] + row[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]) * anchor[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] * ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        box.h = (row[&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;] + row[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;]) * anchor[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] * ratio;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        result.push_back(box);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    NmsDetect(result);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; result;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;6gt-推理时间展示及预测结果展示&#34;&gt; 6&amp;gt; 推理时间展示及预测结果展示&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210130130455826.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM1MDU0MTUx,size_16,color_FFFFFF,t_70&#34; alt=&#34;img&#34; style=&#34;zoom:60%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;我的老笔记本平均推理时间 15ms 左右，CPU 下实时推理&lt;/p&gt;
&lt;p&gt;安全帽检测结果&lt;/p&gt;
&lt;p&gt;至此完成了 NanoDet 在 X86 CPU 上的部署，希望有帮助到大家。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&#34;2tensorrt-部署深度学习模型&#34;&gt; （2）TensorRT 部署深度学习模型&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;原帖：&lt;a href=&#34;https://zhuanlan.zhihu.com/p/84125533&#34;&gt;https://zhuanlan.zhihu.com/p/84125533&lt;/a&gt;&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;1gt-背景&#34;&gt; 1&amp;gt; 背景&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;目前主流的&lt;a href=&#34;https://so.csdn.net/so/search?q=%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&amp;amp;spm=1001.2101.3001.7020&#34;&gt;深度学习&lt;/a&gt;框架（caffe，mxnet，tensorflow，pytorch 等）进行模型推断的速度都并不优秀，在实际工程中用上述的框架进行模型部署往往是比较低效的。而通过 Nvidia 推出的 tensorRT 工具来部署主流框架上训练的模型能够极大的提高模型推断的速度，往往相比与原本的框架能够有至少 1 倍以上的速度提升，同时占用的设备内存也会更加的少。因此对是所有需要部署模型的同志来说，掌握用 tensorRT 来部署深度学习模型的方法是非常有用的。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2gt-相关技术&#34;&gt; 2&amp;gt; 相关技术&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/c961b6b959233494f133799097940297.png&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;上面的图片取自 TensorRT 的官网，里面列出了 tensorRT 使用的一些技术。可以看到比较成熟的深度学习落地技术：模型量化、动态内存优化、层的融合等技术均已经在 tensorRT 中集成了，这也是它能够极大提高模型推断速度的原因。总体来说 tensorRT 将训练好的模型通过一系列的优化技术转化为了能够在特定平台（GPU）上以高性能运行的代码，也就是最后图中生成的 Inference engine。目前也有一些其他的工具能够实现类似 tensorRT 的功能，例如&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/dmlc/tvm&#34;&gt; TVM&lt;/a&gt;，&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/facebookresearch/TensorComprehensions&#34;&gt;TensorComprehensions&lt;/a&gt; 也能有效的提高模型在特定平台上的推断速度，但是由于目前企业主流使用的都是 Nvidia 生产的计算设备，在这些设备上 nvidia 推出的 tensorRT 性能相比其他工具会更有优势一些。而且 tensorRT 依赖的代码库仅仅包括 C++ 和 cuda，相对与其他工具要更为精简一些。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;3gt-tensorflow-模型-tensorrt-部署教程&#34;&gt; 3&amp;gt; tensorflow 模型 tensorRT 部署教程&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;实际工程部署中多采用 c&lt;ins&gt; 进行部署，因此在本教程中也使用的是 tensorRT 的 C&lt;/ins&gt;API，tensorRT 版本为 5.1.5。具体 tensorRT 安装可参考教程 [&lt;a href=&#34;https://zhuanlan.zhihu.com/p/64053177&#34;&gt;深度学习] TensorRT 安装&lt;/a&gt;，以及官网的安装说明。&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;1模型持久化&#34;&gt; （1）模型持久化&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;部署 tensorflow 模型的第一步是模型持久化，将模型结构和权重保存到一个.pb 文件当中。&lt;/p&gt;
&lt;figure class=&#34;highlight javascript&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;pb_graph = tf.graph_util.convert_variables_to_constants(sess, sess.graph.as_graph_def(), [v.op.name &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; outputs])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; tf.gfile.FastGFile(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./pbmodel_name.pb&amp;#x27;&lt;/span&gt;, mode=&lt;span class=&#34;string&#34;&gt;&amp;#x27;wb&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    f.write(pb_graph.SerializeToString())&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体只需在模型定义和权重读取之后执行以上代码，调用 tf.graph_util.convert_variables_to_constants 函数将权重转为常量，其中 outputs 是需要作为输出的&lt;a href=&#34;https://so.csdn.net/so/search?q=tensor&amp;amp;spm=1001.2101.3001.7020&#34;&gt; tensor&lt;/a&gt; 的列表，最后用 pb_graph.SerializeToString () 将 graph 序列化并写入到 pb 文件当中，这样就生成了 pb 模型。&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;2生成-uff-模型&#34;&gt; （2）生成 uff 模型&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;有了 pb 模型，需要将其转换为 tensorRT 可用的 uff 模型，只需调用 uff 包自带的 convert 脚本即可&lt;/p&gt;
&lt;figure class=&#34;highlight groovy&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;python &lt;span class=&#34;regexp&#34;&gt;/usr/&lt;/span&gt;lib&lt;span class=&#34;regexp&#34;&gt;/python2.7/&lt;/span&gt;site-packages&lt;span class=&#34;regexp&#34;&gt;/uff/&lt;/span&gt;bin/convert_to_uff.py   pbmodel_name.pb&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如转换成功会输出如下信息，包含图中总结点的个数以及推断出的输入输出节点的信息&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/9e81d7152cbe9e4dbd45f14eb340d704.png&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;h6&gt;&lt;span id=&#34;3tensorrt-c-api-部署模型&#34;&gt; （3）tensorRT c++ API 部署模型&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;使用 tensorRT 部署生成好的 uff 模型需要先讲 uff 中保存的模型权值以及网络结构导入进来，然后执行优化算法生成对应的 inference engine。具体代码如下，首先需要定义一个 IBuilder* builder，一个用来解析 uff 文件的 parser 以及 builder 创建的 network，parser 会将 uff 文件中的模型参数和网络结构解析出来存到 network，解析前要预先告诉 parser 网络输入输出输出的节点。解析后 builder 就能根据 network 中定义的网络结构创建 engine。在创建 engine 前会需要指定最大的 batchsize 大小，之后使用 engine 时输入的 batchsize 不能超过这个数值否则就会出错。推断时如果 batchsize 和设定最大值一样时效率最高。举个例子，如果设定最大 batchsize 为 10，实际推理输入一个 batch 10 张图的时候平均每张推断时间是 4ms 的话，输入一个 batch 少于 10 张图的时候平均每张图推断时间会高于 4ms。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;IBuilder* builder = createInferBuilder(gLogger.getTRTLogger());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;auto parser = createUffParser();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;parser-&amp;gt;registerInput(inputtensor_name, Dims3(INPUT_C, INPUT_H, INPUT_W), UffInputOrder::kNCHW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;parser-&amp;gt;registerOutput(outputtensor_name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    INetworkDefinition* network = builder-&amp;gt;createNetwork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!parser-&amp;gt;parse(uffFile, *network, nvinfer1::DataType::kFLOAT))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        gLogError &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Failure while parsing UFF file&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nullptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;  &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    builder-&amp;gt;setMaxBatchSize(maxBatchSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    builder-&amp;gt;setMaxWorkspaceSize(MAX_WORKSPACE);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ICudaEngine* engine = builder-&amp;gt;buildCudaEngine(*network);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;if&lt;/span&gt; (!engine)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        gLogError &amp;lt;&amp;lt; &lt;span class=&#34;string&#34;&gt;&amp;quot;Unable to create engine&amp;quot;&lt;/span&gt; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; nullptr;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成 engine 之后就可以进行推断了，执行推断时需要有一个上下文执行上下文 IExecutionContext* context，可以通过 engine-&amp;gt;createExecutionContext () 获得。执行推断的核心代码是&lt;/p&gt;
&lt;figure class=&#34;highlight css&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;context-&amp;gt;execute(batchSize, &amp;amp;buffers&lt;span class=&#34;selector-attr&#34;&gt;[0]&lt;/span&gt;);  &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中 buffer 是一个 void * 数组对应的是模型输入输出 tensor 的设备地址，通过 cudaMalloc 开辟输入输出所需要的设备空间（显存）将对应指针存到 buffer 数组中，在执行 execute 操作前通过 cudaMemcpy 把输入数据（输入图像）拷贝到对应输入的设备空间，执行 execute 之后还是通过 cudaMemcpy 把输出的结果从设备上拷贝出来。&lt;/p&gt;
&lt;p&gt;更为详细的例程可以参考 TensorRT 官方的 samples 中的&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/TensorRT/tree/master/samples/opensource/sampleUffMNIST&#34;&gt; sampleUffMNIST 代码&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;4加速比情况&#34;&gt; （4）加速比情况&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;实际工程中我在 Tesla M40 上用 tensorRT 来加速过 Resnet-50，Inception-resnet-v2，谷歌图像检索模型 Delf（DEep Local Features），加速前后单张图推断用时比较如下图（单位 ms）&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/b7a75ea584e9dd89ef2867e4f2259648.png&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;4gt-caffe-模型-tensorrt-部署教程&#34;&gt; 4&amp;gt; Caffe 模型 tensorRT 部署教程&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;相比与 tensorflow 模型 caffe 模型的转换更加简单，不需要有 tensorflow 模型转 uff 模型这类的操作，tensorRT 能够直接解析 prototxt 和 caffemodel 文件获取模型的网络结构和权重。具体解析流程和上文描述的一致，不同的是 caffe 模型的 parser 不需要预先指定输入层，这是因为 prototxt 已经进行了输入层的定义，parser 能够自动解析出输入，另外 caffeparser 解析网络后返回一个 IBlobNameToTensor *blobNameToTensor 记录了网络中 tensor 和 pototxt 中名字的对应关系，在解析之后就需要通过这个对应关系，按照输出 tensor 的名字列表 outputs 依次找到对应的 tensor 并通过 network-&amp;gt;markOutput 函数将其标记为输出，之后就可以生成 engine 了。&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;IBuilder* builder = createInferBuilder(gLogger);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    INetworkDefinition* network = builder-&amp;gt;createNetwork();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    ICaffeParser* parser = createCaffeParser();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    DataType modelDataType = DataType::kFLOAT;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; IBlobNameToTensor *blobNameToTensor =	parser-&amp;gt;parse(deployFile.c_str(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                              modelFile.c_str(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                              *network,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                              modelDataType);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    assert(blobNameToTensor != nullptr);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (auto&amp;amp; s : outputs) network-&amp;gt;markOutput(*blobNameToTensor-&amp;gt;find(s.c_str()));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    builder-&amp;gt;setMaxBatchSize(maxBatchSize);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    builder-&amp;gt;setMaxWorkspaceSize(&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt; &amp;lt;&amp;lt; &lt;span class=&#34;number&#34;&gt;30&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    engine = builder-&amp;gt;buildCudaEngine(*network);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;生成 engine 后执行的方式和上一节描述的一致，详细的例程可以参考&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/TensorRT/tree/master/samples/opensource/sampleMNIST&#34;&gt; SampleMNIST&lt;/a&gt;&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;1加速比情况&#34;&gt; （1）加速比情况&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;实际工程中我在 Tesla M40 上用 tensorRT 加速过 caffe 的 VGG19，SSD 速度变为 1.6 倍，ResNet50，MobileNetV2 加速前后单张图推断用时比较如下图（单位 ms）&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/641c21accf80edb33a2254ef22cac8c8.png&#34; alt=&#34;img&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;5gt-为-tensorrt-添加自定义层&#34;&gt; 5&amp;gt; 为 tensorRT 添加自定义层&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;tensorRT 目前只支持一些非常常见的操作，有很多操作它并不支持比如上采样 Upsample 操作，这时候就需要我们自行将其编写为 tensorRT 的插件层，从而使得这些不能支持的操作能在 tensorRT 中使用。以定义 Upsample 层为例，我们首先要定义一个继承自 tensorRT 插件基类的 Upsample 类&lt;/p&gt;
&lt;figure class=&#34;highlight kotlin&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;Upsample&lt;/span&gt;: &lt;span class=&#34;type&#34;&gt;public IPluginExt&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后要实现该类的一些必要方法，首先是 2 个构造函数，一个是传参数构建，另一个是从序列化后的比特流构建。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;Upsample&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; scale = &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;) : &lt;span class=&#34;built_in&#34;&gt;mScale&lt;/span&gt;(scale) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;assert&lt;/span&gt;(mScale &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//定义上采样倍数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;built_in&#34;&gt;Upsmaple&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *data, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; length) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *d = &lt;span class=&#34;keyword&#34;&gt;reinterpret_cast&lt;/span&gt;&amp;lt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *&amp;gt;(data), *a = d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mScale = read&amp;lt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt;&amp;gt;(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mDtype = read&amp;lt;DataType&amp;gt;(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mCHW = read&amp;lt;DimsCHW&amp;gt;(d);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;assert&lt;/span&gt;(mScale &amp;gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;assert&lt;/span&gt;(d == a + length);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;~&lt;span class=&#34;built_in&#34;&gt;Upsample&lt;/span&gt;()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;一些定义层输出信息的方法&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;   &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getNbOutputs&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//模型的输出个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;Dims &lt;span class=&#34;title&#34;&gt;getOutputDimensions&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; index, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Dims *inputs, &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; nbInputDims&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &lt;span class=&#34;comment&#34;&gt;// std::cout &amp;lt;&amp;lt; &amp;quot;Get ouputdims!!!&amp;quot; &amp;lt;&amp;lt; std::endl;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert(nbInputDims == &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert(inputs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].nbDims == &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; DimsCHW(inputs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].d[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], inputs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].d[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;] * mScale, inputs[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].d[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;] * mScale);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//获取模型输出的形状&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据输入的形状个数以及采用的数据类型检查合法性以及配置层参数的方法&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;    bool supportsFormat(DataType type, PluginFormat format) const override &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        return (type == DataType::kFLOAT || type == DataType::kHALF || type == DataType::kINT8)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;               &amp;amp;&amp;amp; format == PluginFormat::kNCHW;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//检查层是否支持当前的数据类型和格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    void configureWithFormat(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Dims *inputDims, int nbInputs, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; Dims *outputDims, int nbOutputs,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                             DataType type, PluginFormat format, int maxBatchSize) override&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;       &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         mDtype = &lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;type&lt;/span&gt;;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         mCHW.c() = inputDims[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].d[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         mCHW.h() = inputDims[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].d[&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;         mCHW.w() = inputDims[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;].d[&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//配置层的参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;层的序列化方法&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;function&#34;&gt;size_t &lt;span class=&#34;title&#34;&gt;getSerializationSize&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(mScale) + &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(mDtype) + &lt;span class=&#34;keyword&#34;&gt;sizeof&lt;/span&gt;(mCHW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//输出序列化层所需的长度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;serialize&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *buffer&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt;&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *d = reinterpret_cast&amp;lt;&lt;span class=&#34;built_in&#34;&gt;char&lt;/span&gt; *&amp;gt;(buffer), *a = d;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        write(d, mScale);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        write(d, mDtype);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        write(d, mCHW);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        assert(d == a + getSerializationSize());&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//将层参数序列化为比特流&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;层的运算方法&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;getWorkspaceSize&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; maxBatchSize)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//层运算需要的临时工作空间大小&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;enqueue&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; batchSize, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; *inputs, &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; **outputs, &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *workspace,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;params&#34;&gt;                cudaStream_t stream)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//层执行计算的具体操作&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 enqueue 中我们调用编写好的 cuda kenerl 来进行 Upsample 的计算&lt;/p&gt;
&lt;p&gt;完成了 Upsample 类的定义，我们就可以直接在网络中添加我们编写的插件了，通过如下语句我们就定义一个上采样 2 倍的上采样层。addPluginExt 的第一个输入是 ITensor** 类别，这是为了支持多输出的情况，第二个参数就是输入个数，第三个参数就是需要创建的插件类对象。&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;Upsample &lt;span class=&#34;title&#34;&gt;up&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;&lt;/span&gt;)；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;auto upsamplelayer&lt;/span&gt;=network-&amp;gt;addPluginExt(inputtensot,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,up)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;6gt-为-caffeparser-添加自定义层支持&#34;&gt; 6&amp;gt; 为 CaffeParser 添加自定义层支持&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;对于我们自定义的层如果写到了 caffe prototxt 中，在部署模型时调用 caffeparser 来解析就会报错。&lt;/p&gt;
&lt;p&gt;还是以 Upsample 为例，如果在 prototxt 中有下面这段来添加了一个 upsample 的层&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;layer &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  name: &lt;span class=&#34;string&#34;&gt;&amp;quot;upsample0&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  type: &amp;quot;Upsample&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  bottom: &lt;span class=&#34;string&#34;&gt;&amp;quot;ReLU11&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  top: &lt;span class=&#34;string&#34;&gt;&amp;quot;Upsample1&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这时再调用&lt;/p&gt;
&lt;figure class=&#34;highlight rust&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; IBlobNameToTensor *blobNameToTensor =	parser-&amp;gt;parse(deployFile.c_str(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                              modelFile.c_str(),&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                              *network,&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                                                              modelDataType);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就会出现错误&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/89445b8586b760aa23f31453e1137ad6.png&#34; alt=&#34;img&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;之前我们已经编写了 Upsample 的插件，怎么让 tensorRT 的 caffe parser 识别出 prototxt 中的 upsample 层自动构建我们自己编写的插件呢？这时我们就需要定义一个插件工程类继承基类 nvinfer1::IPluginFactory, nvcaffeparser1::IPluginFactoryExt。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;class&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;PluginFactory&lt;/span&gt; :&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; nvinfer1::IPluginFactory, &lt;span class=&#34;keyword&#34;&gt;public&lt;/span&gt; nvcaffeparser1::IPluginFactoryExt&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其中必须要的实现的方法有判断一个层是否是 plugin 的方法，输入的参数就是 prototxt 中 layer 的 name，通过 name 来判断一个层是否注册为插件&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isPlugin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;isPluginExt&lt;/span&gt;(name);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;isPluginExt&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *name)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *aa = &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt;[&lt;span class=&#34;number&#34;&gt;6&lt;/span&gt;];&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;memcpy&lt;/span&gt;(aa, name, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        aa[&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; res = !&lt;span class=&#34;built_in&#34;&gt;strcmp&lt;/span&gt;(aa, &lt;span class=&#34;string&#34;&gt;&amp;quot;upsam&amp;quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; res;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;//判断层名字是否是upsample层的名字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;根据名字创建插件的方法，有两中方式一个是由权重构建，另一个是由序列化后的比特流创建，对应了插件的两种构造函数，Upsample 没有权重，对于其他有权重的插件就能够用传入的 weights 初始化层。mplugin 是一个 vector 用来存储所有创建的插件层。&lt;/p&gt;
&lt;figure class=&#34;highlight cpp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;IPlugin *&lt;span class=&#34;title&#34;&gt;createPlugin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *layerName, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; nvinfer1::Weights *weights, &lt;span class=&#34;keyword&#34;&gt;int&lt;/span&gt; nbWeights)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;assert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;isPlugin&lt;/span&gt;(layerName));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        mPlugin.&lt;span class=&#34;built_in&#34;&gt;push_back&lt;/span&gt;(std::unique_ptr&amp;lt;Upsample&amp;gt;(&lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Upsample&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; mPlugin[mPlugin.&lt;span class=&#34;built_in&#34;&gt;size&lt;/span&gt;() - &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;].&lt;span class=&#34;built_in&#34;&gt;get&lt;/span&gt;();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;IPlugin *&lt;span class=&#34;title&#34;&gt;createPlugin&lt;/span&gt;&lt;span class=&#34;params&#34;&gt;(&lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;char&lt;/span&gt; *layerName, &lt;span class=&#34;keyword&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; *serialData, &lt;span class=&#34;keyword&#34;&gt;size_t&lt;/span&gt; serialLength)&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;override&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;assert&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;isPlugin&lt;/span&gt;(layerName));&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;Upsample&lt;/span&gt;(serialData, serialLength);&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt; std::vector &amp;lt;std::unique_ptr&amp;lt;Upsample&amp;gt;&amp;gt; mPlugin;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;最后需要定义一个 destroy 方法来释放所有创建的插件层。&lt;/p&gt;
&lt;figure class=&#34;highlight csharp&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt; &lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;destroyPlugin&lt;/span&gt;(&lt;span class=&#34;params&#34;&gt;&lt;/span&gt;)&lt;/span&gt; &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; (unsigned &lt;span class=&#34;built_in&#34;&gt;int&lt;/span&gt; i = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;; i &amp;lt; mPlugin.size(); i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;            mPlugin[i].reset();&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对于 prototxt 存在多个多种插件的情况，可以在 isPlugin，createPlugin 方法中添加新的条件分支，根据层的名字创建对应的插件层。&lt;/p&gt;
&lt;p&gt;实现了 PluginFactory 之后在调用 caffeparser 的时候需要设置使用它，在调用 parser-&amp;gt;parser 之前加入如下代码&lt;/p&gt;
&lt;figure class=&#34;highlight haskell&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;type&#34;&gt;PluginFactory&lt;/span&gt; pluginFactory;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;title&#34;&gt;parser&lt;/span&gt;-&amp;gt;setPluginFactoryExt(&amp;amp;pluginFactory);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;就可以设置 parser 按照 pluginFactory 里面定义的规则来创建插件层，这样之前出现的不能解析 Upsample 层的错误就不会再出现了。&lt;/p&gt;
&lt;p&gt;官方添加插件层的样例&lt;a href=&#34;https://link.zhihu.com/?target=https%3A//github.com/NVIDIA/TensorRT/tree/master/samples/opensource/samplePlugin&#34;&gt; samplePlugin&lt;/a&gt; 可以作为参考&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;7gt-心得体会踩坑记录&#34;&gt; 7&amp;gt; 心得体会（踩坑记录）&lt;/span&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;转 tensorflow 模型时，生成 pb 模型、转换 uff 模型以及调用 uffparser 时 register Input，output，这三个过程中输入输出节点的名字一定要注意保持一致，否则最终在 parser 进行解析时会出现错误，找不到输入输出节点。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;除了本文中列举的 pluginExt，tensorRT 中插件基类还有 IPlugin，IPluginV2，继承这些基类所需要实现的类方法有细微区别，具体情况可自行查看 tensorRT 安装文件夹下的 include/NvInfer.h 文件。同时添加自己写的层到网络时的函数有 addPlugin，addPluginExt，addPluginV2 这几种和 IPlugin，IPluginExt，IPluginV2 一一对应，不能够混用，否则有些默认调用的类方法不会调用的，比如用 addPlugin 添加的 PluginExt 层是不会调用 configureWithFormat 方法的，因为 IPlugin 类没有该方法。同样的在还有 caffeparser 的 setPluginFactory 和 setPluginFactoryExt 也是不能混用的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;运行程序出现 cuda failure 一般情况下是由于将内存数据拷贝到磁盘时出现了非法内存访问，注意检查 buffer 开辟的空间大小和拷贝过去数据的大小是否一致.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;有一些操作在 tensorRT 中不支持但是可以通过一些支持的操作进行组合替代，比如 ，这样可以省去一些编写自定义层的时间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tensorflow 中的 flatten 操作默认时 keepdims=False 的，但是在转化 uff 文时会默认按照 keepdims=True 转换，因此在 tensorflow 中对 flatten 后的向量进行 transpose、expanddims 等等操作，在转换到 uff 后用 tensorRT 解析时容易出现错误，比如 “Order size is not matching the number dimensions of TensorRT” 。最好设置 tensorflow 的 reduce，flatten 操作的 keepdims=True，保持层的输出始终为 4 维形式，能够有效避免转到 tensorRT 时出现各种奇怪的错误。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tensorRT 中的 slice 层存在一定问题，我用 network-&amp;gt;addSlice 给网络添加 slice 层后，在执行 buildengine 这一步时就会出错 nvinfer1::builder::checkSanity (const nvinfer1::builder::Graph&amp;amp;): Assertion `tensors.size () == g.tensors.size ()’ failed.，构建网络时最好避开使用 slice 层，或者自己实现自定层来执行 slice 操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;tensorRT 的 github 中有着部分的开源代码以及丰富的示例代码，多多学习能够帮助更快的掌握 tensorRT 的使用&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://leezhao415.github.io/2022/02/21/%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E4%B9%8B%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%A6%82%E8%BF%B0/</guid>
            <title>部署方案之模型部署概述</title>
            <link>https://leezhao415.github.io/2022/02/21/%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E4%B9%8B%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%A6%82%E8%BF%B0/</link>
            <category>人工智能</category>
            <category>模型部署</category>
            <pubDate>Mon, 21 Feb 2022 22:00:10 +0800</pubDate>
            <description><![CDATA[ &lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%83%A8%E7%BD%B2%E6%96%B9%E6%A1%88%E4%B9%8B%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%A6%82%E8%BF%B0&#34;&gt;部署方案之模型部署概述&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E5%9C%BA%E6%99%AF&#34;&gt;1 模型部署场景&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%A8%A1%E5%9E%8B%E9%83%A8%E7%BD%B2%E6%96%B9%E5%BC%8F&#34;&gt;2 模型部署方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E9%83%A8%E7%BD%B2%E7%9A%84%E6%A0%B8%E5%BF%83%E4%BC%98%E5%8C%96%E6%8C%87%E6%A0%87&#34;&gt;3 部署的核心优化指标&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B&#34;&gt;4 部署流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h4&gt;&lt;span id=&#34;部署方案之模型部署概述&#34;&gt; 部署方案之模型部署概述&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;模型训练重点关注的是如何通过训练策略来得到一个性能更好的模型，其过程似乎包含着各种 “玄学”，被戏称为 “炼丹”。整个流程包含从训练样本的获取（包括数据采集与标注），模型结构的确定，&lt;a href=&#34;https://so.csdn.net/so/search?q=%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0&amp;amp;spm=1001.2101.3001.7020&#34;&gt;损失函数&lt;/a&gt;和评价指标的确定，到模型参数的训练，这部分更多是业务方去承接相关工作。一旦 “炼丹” 完成（即训练得到了一个指标不错的模型），如何将这颗 “丹药” 赋能到实际业务中，充分发挥其能力，这就是部署方需要承接的工作。&lt;/p&gt;
&lt;p&gt;因此，一般来说，学术界负责各种 SOTA (State of the Art) 模型的训练和结构探索，而工业界负责将这些 SOTA 模型应用落地，赋能百业。本文将要讲述的是，在 CV 场景中，如何实现模型的快速落地，赋能到产业应用中。模型部署一般无需再考虑如何修改训练方式或者修改网络结构以提高模型精度，更多的是需要明确部署的场景、部署方式（中心服务化还是本地终端部署）、模型的优化指标，以及如何提高吞吐率和减少延迟等，接下来将逐一进行介绍。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;1-模型部署场景&#34;&gt; 1 模型部署场景&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;这个问题主要源于中心服务器云端部署和边缘部署两种方式的差异 云端部署常见的模式是，模型部署在云端服务器，用户通过网页访问或者 API 接口调用等形式向云端服务器发出请求，云端收到请求后处理并返回结果。边缘部署则主要用于嵌入式设备，主要通过将模型打包封装到 SDK，集成到嵌入式设备，数据的处理和模型推理都在终端设备上执行。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2-模型部署方式&#34;&gt; 2 模型部署方式&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;针对上面提到的两种场景，分别有两种不同的部署方案，Service 部署和 SDK 部署。 Service 部署：主要用于中心服务器云端部署，一般直接以训练的引擎库作为推理服务模式。SDK 部署：主要用于嵌入式端部署场景，以 C++ 等语言实现一套高效的前后处理和推理引擎库（高效推理模式下的 Operation/Layer/Module 的实现），用于提供高性能推理能力。此种方式一般需要考虑模型转换（动态图静态化）、模型联合编译等进行深度优化&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/c7e460b912162c9b9a74d7f0c65d455c.png&#34; alt=&#34;Image&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/b549771d283e4eab7d5e8d27fe614011.png&#34; alt=&#34;Image&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;3-部署的核心优化指标&#34;&gt; 3 部署的核心优化指标&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;部署的核心目标是合理把控成本、功耗、性价比三大要素。&lt;/p&gt;
&lt;p&gt;成本问题是部署硬件的重中之重，AI 模型部署到硬件上的成本将极大限制用户的业务承受能力。成本问题主要聚焦于芯片的选型，比如，对比寒武纪 MLU220 和 MLU270，MLU270 主要用作数据中心级的加速卡，其算力和功耗都相对于边缘端的人工智能加速卡 MLU220 要低。至于 Nvida 推出的 Jetson 和 Tesla T4 也是类似思路，Tesla T4 是主打数据中心的推理加速卡，而 Jetson 则是嵌入式设备的加速卡。对于终端场景，还会根据对算力的需求进一步细分，比如表中给出的高通骁龙芯片，除 GPU 的浮点算力外，还会增加 DSP 以增加定点算力，篇幅有限，不再赘述，主要还是根据成本和业务需求来进行权衡。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/210c28ce9ca2b9017cbbd51ab504db55.png&#34; alt=&#34;Image&#34; style=&#34;zoom:80%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;在数据中心服务场景，对于功耗的约束要求相对较低；在边缘终端设备场景，硬件的功耗会影响边缘设备的电池使用时长。因此，对于功耗要求相对较高，一般来说，利用 NPU 等专用优化的加速器单元来处理神经网络等高密度计算，能节省大量功耗。&lt;/p&gt;
&lt;p&gt;不同的业务场景对于芯片的选择有所不同，以达到更高的性价比。从公司业务来看，云端相对更加关注是多路的吞吐量优化需求，而终端场景则更关注单路的延时需要。在目前主流的 CV 领域，低比特模型相对成熟，且 INT8/INT4 芯片因成本低，且算力比高的原因已被广泛使用；但在 NLP 或者语音等领域，对于精度的要求较高，低比特模型精度可能会存在难以接受的精度损失，因此 FP16 是相对更优的选择。在 CV 领域的芯片性价比选型上，在有 INT8/INT4 计算精度的芯片里，主打低精度算力的产品是追求高性价比的主要选择之一，但这也为平衡精度和性价比提出了巨大的挑战。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;4-部署流程&#34;&gt; 4 部署流程&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;上面简要介绍了部署的主要方式和场景，以及部署芯片的选型考量指标，接下来以 SDK 部署为例，给大家概括介绍一下 SenseParrots 在部署中的整体流程。SenseParrots 部署流程大致分为以下几个步骤：模型转换、模型量化压缩、模型打包封装 SDK。&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;41-模型转换&#34;&gt; 4.1 模型转换&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;模型转换主要用于模型在不同框架之间的流转，常用于训练和推理场景的连接。目前主流的框架都以 ONNX 或者 caffe 为模型的交换格式，SenseParrots 也不例外。SenseParrots 的模型转换主要分为计算图生成和计算图转换两大步骤，另外，根据需要，还可以在中间插入计算图优化，对计算机进行推理加速（诸如常见的 CONV/BN 的算子融合）。&lt;/p&gt;
&lt;p&gt;计算图生成是通过一次 inference 并追踪记录的方式，将用户的模型完整地翻译成静态的表达。在模型 inference 的过程中，框架会记录执行算子的类型、输入输出、超参、参数和调用该算子的模型层次，最后把 inference 过程中得到的算子信息和模型信息结合得到最终的静态计算图。&lt;/p&gt;
&lt;p&gt;在计算图生成之后与计算图转换之前，可以进行计算图优化，例如去除冗余 op，计算合并等。SenseParrots 原生实现了一批计算图的精简优化 pass，也开放接口鼓励用户对计算图进行自定义的处理和优化操作。&lt;/p&gt;
&lt;p&gt;计算图转换是指分析静态计算图的算子，对应转换到目标格式。SenseParrots 支持了多后端的转换，能够转换到各个 opset 的 ONNX、原生 caffe 和多种第三方版本的 caffe。框架通过算子转换器继承或重写的方式，让 ONNX 和 caffe 的不同版本的转换开发变得更加简单。同时，框架开放了自定义算子生成和自定义算子转换器的接口，让第三方框架开发者也能够轻松地自主开发实现 SenseParrots 到第三方框架的转换。&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;42-模型量化压缩&#34;&gt; 4.2 模型量化压缩&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;终端场景中，一般会有内存和速度的考虑，因此会要求模型尽量小，同时保证较高的吞吐率。除了人工针对嵌入式设备设计合适的模型，如 MobileNet 系列，通过 NAS (Neural Architecture Search) 自动搜索小模型，以及通过蒸馏 / 剪枝的方式压缩模型外，一般还会使用量化来达到减小模型规模和加速的目的。&lt;/p&gt;
&lt;p&gt;量化的过程主要是将原始浮点 FP32 训练出来的模型压缩到定点 INT8 (或者 INT4/INT1) 的模型，由于 INT8 只需要 8 比特来表示，因此相对于 32 比特的浮点，其模型规模理论上可以直接降为原来的 1/4，这种压缩率是非常直观的。另外，大部分终端设备都会有专用的定点计算单元，通过低比特指令实现的低精度算子，速度上会有很大的提升，当然，这部分还依赖协同体系结构和算法来获得更大的加速。&lt;/p&gt;
&lt;p&gt;量化的技术栈主要分为&lt;strong&gt;量化训练（QAT, Quantization Aware Training）&lt;strong&gt;和&lt;/strong&gt;离线量化（PTQ, Post Training Quantization）&lt;/strong&gt;, 两者的主要区别在于，&lt;strong&gt;量化训练&lt;/strong&gt;是通过对模型插入伪量化算子（这些算子用来模拟低精度运算的逻辑），通过梯度下降等优化方式在原始浮点模型上进行微调，从来调整参数得到精度符合预期的模型。&lt;strong&gt;离线量化&lt;/strong&gt;主要是通过少量校准数据集（从原始数据集中挑选 100-1000 张图，不需要训练样本的标签）获得网络的 activation 分布，通过统计手段或者优化浮点和定点输出的分布来获得量化参数，从而获取最终部署的模型。两者各有优劣，量化训练基于原始浮点模型的训练逻辑进行训练，理论上更能保证收敛到原始模型的精度，但需要精细调参且生产周期较长；离线量化只需要基于少量校准数据，因此生产周期短且更加灵活，缺点是精度可能略逊于量化训练。实际落地过程中，发现大部分模型通过离线量化就可以获得不错的模型精度（1% 以内的精度损失，当然这部分精度的提升也得益于优化策略的加持），剩下少部分模型可能需要通过量化训练来弥补精度损失，因此实际业务中会结合两者的优劣来应用。&lt;/p&gt;
&lt;p&gt;量化主要有两大难点：一是如何平衡模型的吞吐率和精度，二是如何结合推理引擎充分挖掘芯片的能力。比特数越低其吞吐率可能会越大，但其精度损失可能也会越大，因此，如何通过算法提升精度至关重要，这也是组内的主要工作之一。另外，压缩到低比特，某些情况下吞吐率未必会提升，还需要结合推理引擎优化一起对模型进行图优化，甚至有时候会反馈如何进行网络设计，因此会是一个算法与工程迭代的过程。&lt;/p&gt;
&lt;h6&gt;&lt;span id=&#34;43-模型打包封装-sdk&#34;&gt; 4.3 模型打包封装 SDK&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;实际业务落地过程中，模型可能只是产品流程中的一环，用于实现某些特定功能，其输出可能会用于流程的下一环。因此，模型打包会将模型的前后处理，一个或者多个模型整合到一起，再加入描述性的文件（前后处理的参数、模型相关参数、模型格式和版本等）来实现一个完整的功能。因此，SDK 除了需要一些通用前后处理的高效实现，对齐训练时的前后处理逻辑，还需要具有足够好的扩展性来应对不同的场景，方便业务线同学扩展新的功能。可以看到，模型打包过程更多是模型的进一步组装，将不同模型组装在一起，当需要使用的时候将这些内容解析成整个流程（pipeline）的不同阶段（stage），从而实现整个产品功能。&lt;/p&gt;
&lt;p&gt;另外，考虑到模型很大程度是研究员的研究成果，对外涉及保密问题，因此会对模型进行加密，以保证其安全性。加密算法的选择需要根据实际业务需求来决定，诸如不同加密算法其加解密效率不一样，加解密是否有中心验证服务器，其核心都是为了保护研究成果。&lt;/p&gt;
 ]]></description>
        </item>
    </channel>
</rss>
