<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://leezhao415.github.io</id>
    <title>且听风吟，御剑于心！ • Posts by &#34;算法&#34; tag</title>
    <link href="https://leezhao415.github.io" />
    <updated>2021-05-19T08:44:27.000Z</updated>
    <category term="人工智能/CV" />
    <category term="Transformer/DETR(CV)" />
    <category term="人工智能" />
    <category term="大数据框架" />
    <category term="数据集" />
    <category term="编程工具" />
    <category term="NLP" />
    <category term="模型部署" />
    <category term="Python数据分析" />
    <category term="数据结构与算法" />
    <category term="网络通信" />
    <category term="YOLOX" />
    <category term="CV算法" />
    <category term="VSLAM" />
    <category term="NCNN部署" />
    <category term="YOLOX目标检测" />
    <category term="多模态" />
    <category term="目标跟踪" />
    <category term="目标检测（人脸检测）" />
    <category term="深度学习" />
    <category term="CV未来" />
    <category term="NLP-BERT" />
    <category term="且读文摘" />
    <category term="自然语言处理NLP" />
    <category term="OpenCV之DNN模块" />
    <category term="深度模型" />
    <category term="IOU" />
    <category term="NLP-模型优化" />
    <category term="激活函数" />
    <category term="概述" />
    <category term="梯度更新" />
    <category term="人脸识别" />
    <category term="名人名言" />
    <category term="寒窑赋" />
    <category term="NLP/评估指标" />
    <category term="度量学习" />
    <category term="智能家居" />
    <category term="机器学习" />
    <category term="机器学习/损失函数" />
    <category term="CV/目标检测工具箱" />
    <category term="模型性能指标" />
    <category term="科研项目成果" />
    <category term="表面缺陷检测" />
    <category term="计算机顶会" />
    <category term="计算机视觉CV" />
    <category term="网络编程" />
    <category term="NLP/数据增强工具" />
    <category term="计算机视觉" />
    <category term="模型优化" />
    <category term="三维建模" />
    <category term="计算机视觉库" />
    <category term="深度学习环境配置" />
    <category term="知识蒸馏" />
    <category term="多任务学习模型" />
    <category term="数据库原理" />
    <category term="算法" />
    <category term="操作系统" />
    <category term="AIGC前沿" />
    <category term="深度模型（目标检测）" />
    <category term="视频理解" />
    <category term="ReID" />
    <category term="MOT" />
    <category term="NLP-发展史" />
    <category term="编程语言" />
    <category term="CV数据集" />
    <category term="Linux" />
    <category term="PaddlePaddle" />
    <entry>
        <id>https://leezhao415.github.io/2021/05/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/</id>
        <title>机器学习算法详解</title>
        <link rel="alternate" href="https://leezhao415.github.io/2021/05/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E8%AF%A6%E8%A7%A3/"/>
        <content type="html">&lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E4%BB%8B%E7%BB%8D&#34;&gt;1 机器学习算法原理介绍&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#11-k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95&#34;&gt;1.1 K - 近邻算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B&#34;&gt;2 算法流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-k-%E8%BF%91%E9%82%BB%E5%AE%9E%E7%8E%B0&#34;&gt;3 K - 近邻实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E8%B7%9D%E7%A6%BB%E8%AE%A1%E7%AE%97&#34;&gt;&lt;strong&gt;距离计算&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%8B%93%E5%B1%95fit-tansform-fit_transform%E5%8C%BA%E5%88%AB&#34;&gt;4 拓展：fit ()、tansform ()、fit_transform () 区别&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-k%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95%E4%BC%98%E7%BC%BA%E7%82%B9&#34;&gt;5 K 近邻算法优缺点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92&#34;&gt;1.2 线性回归&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-1&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-api%E6%A1%88%E4%BE%8B&#34;&gt;2 API 案例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92%E7%9A%84%E6%8D%9F%E5%A4%B1%E5%92%8C%E4%BC%98%E5%8C%96&#34;&gt;3 线性回归的损失和优化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A&#34;&gt;4 概念解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E6%A2%AF%E5%BA%A6%E4%B8%8B%E9%99%8D%E7%AE%97%E6%B3%95&#34;&gt;5 梯度下降算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E6%AC%A0%E6%8B%9F%E5%90%88%E5%92%8C%E8%BF%87%E6%8B%9F%E5%90%88%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95&#34;&gt;6 欠拟合和过拟合原因及解决办法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-%E6%AD%A3%E5%88%99%E5%8C%96%E8%A7%A3%E5%86%B3%E8%BF%87%E6%8B%9F%E5%90%88%E9%97%AE%E9%A2%98&#34;&gt;7 正则化 (解决过拟合问题)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8-sklearn%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%BF%9D%E5%AD%98%E5%92%8C%E5%8A%A0%E8%BD%BDapi&#34;&gt;&lt;strong&gt;8 sklearn 模型的保存和加载 API&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#13-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92&#34;&gt;1.3 逻辑回归&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%80%BB%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0%E5%AF%B9%E6%95%B0%E4%BC%BC%E7%84%B6%E6%8D%9F%E5%A4%B1&#34;&gt;1 总损失函数（对数似然损失）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A&#34;&gt;2 概念解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-roc%E6%9B%B2%E7%BA%BF&#34;&gt;3 ROC 曲线&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%A0%B7%E6%9C%AC%E4%B8%8D%E5%9D%87%E8%A1%A1%E9%97%AE%E9%A2%98&#34;&gt;4 样本不均衡问题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#14-%E5%86%B3%E7%AD%96%E6%A0%91%E7%AE%97%E6%B3%95&#34;&gt;1.4 决策树算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A-%E4%BF%A1%E6%81%AF%E5%A2%9E%E7%9B%8A%E7%8E%87%E5%92%8C%E5%9F%BA%E5%B0%BC%E7%B3%BB%E6%95%B0&#34;&gt;1 信息增益、信息增益率和基尼系数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E4%BF%A1%E6%81%AF%E7%86%B5%E8%AE%A1%E7%AE%97%E6%A1%88%E4%BE%8B&#34;&gt;2 信息熵计算案例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#15-%E9%9B%86%E6%88%90%E7%AE%97%E6%B3%95&#34;&gt;1.5 集成算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-2&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0%E4%B8%ADboosting%E5%92%8Cbagging&#34;&gt;2 集成学习中 boosting 和 Bagging&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-bagging%E5%8F%8A%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97&#34;&gt;3 Bagging 及随机森林&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-boosting&#34;&gt;4 boosting&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#16-%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95&#34;&gt;1.6 聚类算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-3&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0&#34;&gt;2 算法学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-api&#34;&gt;3 API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90&#34;&gt;4 案例分析&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0&#34;&gt;5 模型评估&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-k-means&#34;&gt;6 K-Means&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#17-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF&#34;&gt;1.7 朴素贝叶斯&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-4&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86&#34;&gt;2 算法原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E6%8B%89%E6%99%AE%E6%8B%89%E6%96%AF%E5%B9%B3%E6%BB%91&#34;&gt;3 拉普拉斯平滑&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%A1%88%E4%BE%8B%E5%AE%9E%E7%8E%B0&#34;&gt;4 案例实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#18-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA&#34;&gt;1.8 支持向量机&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%9F%BA%E6%9C%AC%E5%85%83%E7%B4%A0&#34;&gt;1 基本元素&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3&#34;&gt;2 基本思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E7%94%A8%E9%80%94&#34;&gt;3 用途&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E7%A1%AC%E9%97%B4%E9%9A%94%E5%92%8C%E8%BD%AF%E9%97%B4%E9%9A%94&#34;&gt;4 硬间隔和软间隔&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA%E6%8E%A8%E5%AF%BC&#34;&gt;5 支持向量机推导&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E6%8D%9F%E5%A4%B1%E5%87%BD%E6%95%B0&#34;&gt;6 损失函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#7-svm%E5%9B%9E%E5%BD%92&#34;&gt;7 SVM 回归&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#8-svm%E4%BC%98%E7%BC%BA%E7%82%B9&#34;&gt;8 SVM 优缺点&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#19-em%E7%AE%97%E6%B3%95&#34;&gt;1.9 EM 算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3&#34;&gt;1 基本思想&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%AE%97%E6%B3%95%E6%B5%81%E7%A8%8B-1&#34;&gt;2 算法流程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#110-hmm%E6%A8%A1%E5%9E%8B&#34;&gt;1.10 HMM 模型&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-5&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E5%B8%B8%E8%A7%81%E6%9C%AF%E8%AF%AD&#34;&gt;2 常见术语&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-hmm%E4%B8%A4%E4%B8%AA%E9%87%8D%E8%A6%81%E5%81%87%E8%AE%BE&#34;&gt;3 HMM 两个重要假设&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-hmm%E6%A8%A1%E5%9E%8B%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86&#34;&gt;4 HMM 模型算法原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-hmm%E6%A8%A1%E5%9E%8B%E4%B8%89%E4%B8%AA%E5%9F%BA%E6%9C%AC%E9%97%AE%E9%A2%98&#34;&gt;5 HMM 模型三个基本问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#6-%E6%A1%88%E4%BE%8B%E5%AE%9E%E7%8E%B0&#34;&gt;6 案例实现&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#111-xgboost%E7%AE%97%E6%B3%95&#34;&gt;1.11 xgboost 算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-6&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%9C%80%E4%BC%98%E6%A8%A1%E5%9E%8B%E6%9E%84%E5%BB%BA%E6%96%B9%E6%B3%95&#34;&gt;2 最优模型构建方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E7%9B%AE%E6%A0%87%E5%87%BD%E6%95%B0&#34;&gt;3 目标函数&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90-1&#34;&gt;4 案例分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#112-lightgbm%E7%AE%97%E6%B3%95&#34;&gt;1.12 lightGBM 算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E5%AE%9A%E4%B9%89-7&#34;&gt;1 定义&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%89%B9%E7%82%B9&#34;&gt;2 特点&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E4%BC%98%E5%8C%96%E7%89%B9%E7%82%B9%E8%AF%A6%E8%A7%A3&#34;&gt;3 优化特点详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4-api%E7%9B%B8%E5%85%B3%E5%8F%82%E6%95%B0%E4%BB%8B%E7%BB%8D&#34;&gt;4 API 相关参数介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5-%E6%A1%88%E4%BE%8B%E5%88%86%E6%9E%90&#34;&gt;5 案例分析&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0&#34;&gt;2 机器学习算法实现&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1%E8%8E%B7%E5%8F%96%E6%95%B0%E6%8D%AE%E9%9B%86&#34;&gt;1. 获取数据集&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2%E6%95%B0%E6%8D%AE%E5%9F%BA%E6%9C%AC%E5%A4%84%E7%90%86&#34;&gt;2. 数据基本处理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3%E7%89%B9%E5%BE%81%E5%B7%A5%E7%A8%8B%E6%A0%87%E5%87%86%E5%8C%96&#34;&gt;3. 特征工程：标准化&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#4%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83&#34;&gt;4. 机器学习 (模型训练)&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#41-%E6%A8%A1%E5%9E%8B%E4%BC%B0%E8%AE%A1&#34;&gt;4.1 模型估计&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#42-%E6%A8%A1%E5%9E%8B%E8%B0%83%E4%BC%98&#34;&gt;4.2 模型调优&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#43-%E6%A8%A1%E5%9E%8B%E8%AE%AD%E7%BB%83&#34;&gt;4.3 模型训练&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#5%E6%A8%A1%E5%9E%8B%E8%AF%84%E4%BC%B0&#34;&gt;5. 模型评估&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h3&gt;&lt;span id=&#34;1-机器学习算法原理介绍&#34;&gt; 1 机器学习算法原理介绍&lt;/span&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;判别模型 (discriminative model)&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已知输入变量 x，通过求解条件概率分布 P (y|x) 或者直接计算 y 的值来预测 y。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;线性回归（Linear Regression）&lt;/li&gt;
&lt;li&gt;逻辑回归（Logistic Regression）&lt;/li&gt;
&lt;li&gt;支持向量机（SVM）&lt;/li&gt;
&lt;li&gt;传统神经网络（Traditional Neural Networks）&lt;/li&gt;
&lt;li&gt;线性判别分析（Linear Discriminative Analysis）&lt;/li&gt;
&lt;li&gt;条件随机场（Conditional Random Field）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;生成模型（generative model）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已知输入变量 x，通过对观测值和标注数据计算联合概率分布 P (x,y) 来达到判定估算 y 的目的。&lt;/p&gt;
&lt;p&gt;例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;朴素贝叶斯（Naive Bayes）&lt;/li&gt;
&lt;li&gt;隐马尔科夫模型（HMM）&lt;/li&gt;
&lt;li&gt;贝叶斯网络（Bayesian Networks）&lt;/li&gt;
&lt;li&gt;隐含狄利克雷分布（Latent Dirichlet Allocation）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;11-k-近邻算法&#34;&gt; 1.1 K - 近邻算法&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;K Nearest Neighbor 算法又叫 KNN 算法，如果一个样本在特征空间中的 k 个最相似 (即特征空间中最邻近) 的样本中的大多数属于某一个类别，则该样本也属于这个类别。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2-算法流程&#34;&gt; 2 算法流程&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;1）计算已知类别数据集中的点与当前点之间的距离&lt;/p&gt;
&lt;p&gt;2）按距离递增次序排序&lt;/p&gt;
&lt;p&gt;3）选取与当前点距离最小的 k 个点&lt;/p&gt;
&lt;p&gt;4）统计前 k 个点所在的类别出现的频率（ &lt;code&gt;分类&lt;/code&gt; ：样本出现最多个数         &lt;code&gt;回归&lt;/code&gt; ：K 个杨样本的平均值）&lt;/p&gt;
&lt;p&gt;5）返回前 k 个点出现频率最高的类别作为当前点的预测分类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;1 K 值选择&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;K 值的减小就意味着整体模型变得复杂，容易发生过拟合；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;K 值的增大就意味着整体模型变得简单，容易发生欠拟合；&lt;/p&gt;
&lt;p&gt;注：实际应用中，K 值一般取一个比较小的数值，例如采用交叉验证来选择最优的 K 值。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;2 误差估计&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;近似误差&lt;/strong&gt;：对训练集的训练误差，关注训练集，近似误差小可能出现过拟合。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;估计误差&lt;/strong&gt;：对测试集的测试误差，关注测试集，估计误差小说明对未知数据的预测能力好。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h5&gt;&lt;span id=&#34;3-k-近邻实现&#34;&gt; 3 K - 近邻实现&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;线性扫描（穷举搜索）&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;计算输入实例与每一个训练实例的距离。计算后再查找 K 近邻。当训练集很大时，计算非常耗时。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;KD 树&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;一种对 k 维空间中的实例点进行存储以便对其进行快速检索的树形数据结构&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;kd 树是一种二叉树，表示对 k 维空间的一个划分，构造 kd 树相当于不断地用垂直于坐标轴的超平面将 K 维空间切分，构成一系列的 K 维超矩形区域。kd 树的每个结点对应于一个 k 维超矩形区域。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用 kd 树可以省去对大部分数据点的搜索，从而减少搜索的计算量。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;&lt;span id=&#34;距离计算&#34;&gt; &lt;strong&gt;距离计算&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;欧式距离 (Euclidean Distance)&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154007259.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;曼哈顿距离 (Manhattan Distance)&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/202105191540406.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;切比雪夫距离 (Chebyshev Distance)&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154101437.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;闵可夫斯基距离 (Minkowski Distance)&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154121877.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:33%;&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中 p 是一个变参数：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当 p=1 时，就是曼哈顿距离；&lt;/li&gt;
&lt;li&gt;当 p=2 时，就是欧氏距离；&lt;/li&gt;
&lt;li&gt;当 p→∞时，就是切比雪夫距离。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;根据 p 的不同，闵氏距离可以表示某一类 / 种的距离。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;其它距离&lt;/strong&gt;：标准化欧氏距离 (Standardized EuclideanDistance)、余弦距离 (Cosine Distance)、汉明距离 (Hamming Distance)、杰卡德距离 (Jaccard Distance)、马氏距离 (Mahalanobis Distance)。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;闵氏距离的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;将各个分量的量纲 (scale)，也就是 “单位” 相同的看待了；&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;未考虑各个分量的分布（期望，方差等）可能是不同的。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-拓展fit-tansform-fit_transform-区别&#34;&gt; 4 拓展：fit ()、tansform ()、fit_transform () 区别&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fit()&lt;/code&gt; : Method calculates the parameters μ and σ and saves them as internal objects.&lt;br&gt;
 解释：简单来说，就是求得训练集 X 的均值，方差，最大值，最小值，这些训练集 X 固有的属性。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform()&lt;/code&gt; : Method using these calculated parameters apply the transformation to a particular dataset.&lt;br&gt;
 解释：在 fit 的基础上，进行标准化，降维，归一化等操作（看具体用的是哪个工具，如 PCA，StandardScaler 等）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fit_transform()&lt;/code&gt; : joins the fit() and transform() method for transformation of dataset.&lt;br&gt;
 解释：fit_transform 是 fit 和 transform 的组合，既包括了训练又包含了转换。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;transform()&lt;/code&gt;  和 &lt;code&gt;fit_transform()&lt;/code&gt;  二者的功能都是对数据进行某种统一处理（比如标准化～N (0,1)，将数据缩放 (映射) 到某个固定区间，归一化，正则化等）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fit_transform(trainData)&lt;/code&gt;  对部分数据先拟合 fit，找到该 part 的整体指标，如均值、方差、最大值最小值等等（根据具体转换的目的），然后对该 trainData 进行转换 transform，从而实现数据的标准化、归一化等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;5-k-近邻算法优缺点&#34;&gt; 5 K 近邻算法优缺点&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;优点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;简单有效&lt;/li&gt;
&lt;li&gt;重新训练的代价低&lt;/li&gt;
&lt;li&gt;适合类域交叉样本
&lt;ul&gt;
&lt;li&gt;KNN 方法主要靠周围有限的邻近的样本，而不是靠判别类域的方法来确定所属类别的，因此对于类域的交叉或重叠较多的待分样本集来说，KNN 方法较其他方法更为适合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;适合大样本自动分类
&lt;ul&gt;
&lt;li&gt;该算法比较适用于样本容量比较大的类域的自动分类，而那些样本容量较小的类域采用这种算法比较容易产生误分。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺点：&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;惰性学习
&lt;ul&gt;
&lt;li&gt;KNN 算法是懒散学习方法（lazy learning, 基本上不学习），一些积极学习的算法要快很多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;类别评分不是规格化
&lt;ul&gt;
&lt;li&gt;不像一些通过概率评分的分类&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;输出可解释性不强
&lt;ul&gt;
&lt;li&gt;例如决策树的输出可解释性就较强&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;对不均衡的样本不擅长
&lt;ul&gt;
&lt;li&gt;当样本不平衡时，如一个类的样本容量很大，而其他类样本容量很小时，有可能导致当输入一个新样本时，该样本的 K 个邻居中大容量类的样本占多数。该算法只计算 “最近的” 邻居样本，某一类的样本数量很大，那么或者这类样本并不接近目标样本，或者这类样本很靠近目标样本。无论怎样，数量并不能影响运行结果。可以采用权值的方法（和该样本距离小的邻居权值大）来改进。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计算量较大
&lt;ul&gt;
&lt;li&gt;目前常用的解决方法是事先对已知样本点进行剪辑，事先去除对分类作用不大的样本。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;12-线性回归&#34;&gt; 1.2 线性回归&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;利用回归方程 (函数) 对一个或多个自变量 (特征值) 和因变量 (目标值) 之间关系进行建模的一种分析方式。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154147901.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;2-api-案例&#34;&gt; 2 API 案例&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = [[&lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;86&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;82&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;85&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;78&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;86&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;82&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;82&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;78&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;[&lt;span class=&#34;number&#34;&gt;92&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;94&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = [&lt;span class=&#34;number&#34;&gt;84.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80.6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;90&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;83.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;87.6&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;79.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;93.4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 实例化API&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = LinearRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 使用fit方法进行训练&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator.fit(x,y)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;回归系数：\n&amp;#x27;&lt;/span&gt;, estimator.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;预测结果：\n&amp;#x27;&lt;/span&gt;, estimator.predict([[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;]]))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;3-线性回归的损失和优化&#34;&gt; 3 线性回归的损失和优化&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1 总损失函数&lt;/strong&gt;：（ &lt;code&gt;最小二乘法&lt;/code&gt; ）&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154257917.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;yi 为第 i 个训练样本的真实值&lt;/li&gt;
&lt;li&gt;h (xi) 为第 i 个训练样本特征值组合预测函数&lt;/li&gt;
&lt;li&gt;又称最小二乘法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 优化算法&lt;/strong&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2.1 正规方程&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154328694.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;X 为特征值矩阵&lt;/li&gt;
&lt;li&gt;y 为目标值矩阵&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：当特征过多过复杂时，求解速度太慢并且得不到结果&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; StandardScaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; mean_squared_error&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;linear_model1&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    线性回归:正规方程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    :return:None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 1.获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = load_boston()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 2.数据集划分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_train, x_test, y_train, y_test = train_test_split(data.data, data.target, random_state=&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 3.特征工程-标准化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transfer = StandardScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_train = transfer.fit_transform(x_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_test = transfer.fit_transform(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.机器学习-线性回归(正规方程)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# fit_intercept：是否计算偏置; &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    estimator = LinearRegression(fit_intercept=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    estimator.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.模型评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.1 获取系数等值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y_predict = estimator.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;预测值为:\n&amp;quot;&lt;/span&gt;, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;模型中的回归系数为:\n&amp;quot;&lt;/span&gt;, estimator.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;模型中的偏置为:\n&amp;quot;&lt;/span&gt;, estimator.intercept_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.2 评价&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 均方误差&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    error = mean_squared_error(y_test, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;误差为:\n&amp;quot;&lt;/span&gt;, error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;均方误差 (Mean Squared Error) MSE) 评价机制：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154352336.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2.2 梯度下降法 (Gradient Descent)&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154416207.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;α 为学习率或者步长&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;梯度&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;在 &lt;code&gt;单变量函数&lt;/code&gt; 中，梯度其实就是函数的 &lt;code&gt;微分&lt;/code&gt; ，代表着函数在某个给定点的 &lt;code&gt;切线的斜率&lt;/code&gt; ；&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;多变量函数&lt;/code&gt; 中，梯度是一个 &lt;code&gt;向量&lt;/code&gt; ，向量有方向，梯度的方向就指出了函数在给定点的 &lt;code&gt;上升最快的方向&lt;/code&gt; ；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;算法选择依据：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;小规模数据：
&lt;ul&gt;
&lt;li&gt;正规方程：LinearRegression (不能解决拟合问题)&lt;/li&gt;
&lt;li&gt;岭回归&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;大规模数据：
&lt;ul&gt;
&lt;li&gt;梯度下降法：SGDRegressor&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; SGDRegressor&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; StandardScaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; mean_squared_error&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;linear_model2&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    线性回归:梯度下降法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    :return:None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 1.获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = load_boston()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 2.数据集划分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_train, x_test, y_train, y_test = train_test_split(data.data, data.target, random_state=&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 3.特征工程-标准化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transfer = StandardScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_train = transfer.fit_transform(x_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_test = transfer.fit_transform(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.机器学习-线性回归(特征方程)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# loss:损失类型  loss=”squared_loss”: 普通最小二乘法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# fit_intercept：是否计算偏置   &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# learning_rate: 学习率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# &amp;#x27;constant&amp;#x27;: eta = eta0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# &amp;#x27;optimal&amp;#x27;: eta = 1.0 / (alpha * (t + t0)) [default]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;		&lt;span class=&#34;comment&#34;&gt;# &amp;#x27;invscaling&amp;#x27;: eta = eta0 / pow(t, power_t)   # power_t=0.25:存在父类当中&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;comment&#34;&gt;# 对于一个常数值的学习率来说，可以使用learning_rate=’constant’ ，并使用eta0来指定学习率。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    estimator = SGDRegressor(loss=&lt;span class=&#34;string&#34;&gt;&amp;quot;squared_loss&amp;quot;&lt;/span&gt;,fit_intercept=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,max_iter=&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;,learning_rate=&lt;span class=&#34;string&#34;&gt;&amp;quot;constant&amp;quot;&lt;/span&gt;,eta0=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    estimator.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.模型评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.1 获取系数等值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y_predict = estimator.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;预测值为:\n&amp;quot;&lt;/span&gt;, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;模型中的系数为:\n&amp;quot;&lt;/span&gt;, estimator.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;模型中的偏置为:\n&amp;quot;&lt;/span&gt;, estimator.intercept_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.2 评价&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 均方误差&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    error = mean_squared_error(y_test, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;误差为:\n&amp;quot;&lt;/span&gt;, error)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;4-概念解释&#34;&gt; 4 概念解释&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154448981.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;5-梯度下降算法&#34;&gt; 5 梯度下降算法&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;全梯度下降算法(Full gradient descent)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在更新参数时使用所有的样本来进行更新&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;计算训练集所有样本误差，对其求和再取平均值作为目标函数。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;因为在执行每次更新时，我们需要在 &lt;code&gt;整个数据集&lt;/code&gt; 上计算 &lt;code&gt;所有的梯度&lt;/code&gt; ，所以批梯度下降法的速度会很慢，同时，批梯度下降法无法处理超出内存容量限制的数据集。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;批梯度下降法同样也不能在线更新模型，即在 &lt;code&gt;运行的过程中，不能增加新的样本&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;随机梯度下降算法(Stochastic gradient descent)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次只代入计算一个样本目标函数的梯度来更新权重，再取下一个样本重复此过程，直到损失函数值停止下降或损失函数值小于某个可以容忍的阈值。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;优点：此过程简单，高效，通常可以较好地避免更新迭代收敛到局部最优解。&lt;/p&gt;
&lt;p&gt;缺点：由于 SG 每次只使用一个样本迭代，若遇上噪声则容易陷入局部最优解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;小批量梯度下降算法(Mini-batch gradient descent)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每次从训练样本集上随机抽取一个小样本集，在抽出来的小样本集上采用 FG 迭代更新权重。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;小批量梯度下降算法是 FG 和 SG 的折中方案，在一定程度上兼顾了以上两种方法的优点。&lt;/p&gt;
&lt;p&gt;batch_size：被抽出的小样本集所含样本点的个数，通常设置为 2 的幂次方，利于 GPU 加速处理。&lt;/p&gt;
&lt;p&gt;特别的，若 batch_size=1，则变成了 SG；若 batch_size=n，则变成了 FG.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;随机平均梯度下降算法(Stochastic average gradient descent)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在内存中为每一个样本都维护一个旧的梯度，随机选择第 i 个样本来更新此样本的梯度，其他样本的梯度保持不变，然后求得所有梯度的平均值，进而更新了参数。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;在 SG 方法中，虽然避开了运算成本大的问题，但对于大数据训练而言，SG 效果常不尽如人意，因为每一轮梯度更新都完全与上一轮的数据和梯度无关。SAG 能克服该问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;它们都是为了正确地调节权重向量，通过为每个权重计算一个梯度，从而更新权值，使目标函数尽可能最小化。其差别在于样本的使用方式不同。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;6-欠拟合和过拟合原因及解决办法&#34;&gt; 6 欠拟合和过拟合原因及解决办法&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;1 欠拟合原因以及解决办法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;原因：学习到数据的特征过少&lt;/li&gt;
&lt;li&gt;解决办法：
&lt;ul&gt;
&lt;li&gt;1） &lt;code&gt;添加其他特征项&lt;/code&gt; ，有时候我们模型出现欠拟合的时候是因为特征项不够导致的，可以添加其他特征项来很好地解决。例如，“组合”、“泛化”、“相关性” 三类特征是特征添加的重要手段，无论在什么场景，都可以照葫芦画瓢，总会得到意想不到的效果。除上面的特征之外，“上下文特征”、“平台特征” 等等，都可以作为特征添加的首选项。&lt;/li&gt;
&lt;li&gt;2） &lt;code&gt;添加多项式特征&lt;/code&gt; ，这个在机器学习算法里面用的很普遍，例如将线性模型通过添加二次项或者三次项使模型泛化能力更强。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;2 过拟合原因以及解决办法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;原因：原始特征过多，存在一些嘈杂特征， 模型过于复杂是因为模型尝试去兼顾各个测试数据点&lt;/li&gt;
&lt;li&gt;解决办法：
&lt;ul&gt;
&lt;li&gt;1）重新 &lt;code&gt;清洗数据&lt;/code&gt; ，导致过拟合的一个原因也有可能是数据不纯导致的，如果出现了过拟合就需要我们重新清洗数据。&lt;/li&gt;
&lt;li&gt;2） &lt;code&gt;增大数据的训练量&lt;/code&gt; ，还有一个原因就是我们用于训练的数据量太小导致的，训练数据占总数据的比例过小。&lt;/li&gt;
&lt;li&gt;3） &lt;code&gt;正则化&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;4）减少特征维度，防止 &lt;code&gt;维灾难&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;7-正则化-解决过拟合问题&#34;&gt; 7 正则化 (解决过拟合问题)&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在学习的时候，数据提供的特征有些影响模型复杂度或者这个特征的数据点异常较多，所以算法在学习的时候尽量减少这个特征的影响（甚至删除某个特征的影响）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;正则化类别&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; Ridge, ElasticNet, Lasso&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;L1正则化&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作用：可以使得其中一些权重直接为 0，删除这个特征的影响&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;LASSO回归&lt;/code&gt;  (正则项为权值向量的 &lt;code&gt;ℓ1范数&lt;/code&gt; )&lt;/p&gt;
&lt;p&gt;代价函数如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154513865.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;Lasso Regression 能够自动进行特征选择，并输出一个稀疏模型（只有少数特征的权重是非零的）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;L2正则化&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;作用：可以使得其中一些权重都很小，都接近于 0，削弱某个特征的影响&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;优点：越小的参数说明模型越简单，越简单的模型则越不容易产生过拟合现象&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Ridge回归&lt;/code&gt; （实现了 &lt;code&gt;SAG&lt;/code&gt; ）&lt;/p&gt;
&lt;p&gt;代价函数如下：&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154546704.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# alpha:正则化力度，也叫 λ λ取值：0~1 1~10；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# solver:会根据数据自动选择优化方法  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;     &lt;span class=&#34;comment&#34;&gt;# sag:如果数据集、特征都比较大，选择该随机梯度下降优化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# normalize:数据是否进行标准化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# normalize=False:可以在fit之前调用preprocessing.StandardScaler标准化数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Ridge.coef_:回归权重&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Ridge.intercept_:回归偏置&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sklearn.linear_model.Ridge(alpha=&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, fit_intercept=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;,solver=&lt;span class=&#34;string&#34;&gt;&amp;quot;auto&amp;quot;&lt;/span&gt;, normalize=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Elastic Net (弹性网络)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;弹性网络在岭回归和 Lasso 回归中进行了折中，通过混合比 (mix ratio) r 进行控制：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;r=0：弹性网络变为岭回归&lt;/li&gt;
&lt;li&gt;r=1：弹性网络便为 Lasso 回归&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;弹性网络的代价函数 ：&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2021051915461619.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;回归模型选择：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;常用：岭回归&lt;/li&gt;
&lt;li&gt;假设只有少部分特征是有用的：
&lt;ul&gt;
&lt;li&gt;弹性网络&lt;/li&gt;
&lt;li&gt;Lasso&lt;/li&gt;
&lt;li&gt;一般来说，弹性网络的使用更为广泛。因为在特征维度高于训练样本数，或者特征是强相关的情况下，Lasso 回归的表现不太稳定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在高维空间中，大多数训练数据驻留在定义特征空间的超立方体的角落中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;所需的训练实例数量随着使用的维度数量呈指数增长。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5&gt;&lt;span id=&#34;8-sklearn-模型的保存和加载-api&#34;&gt; &lt;strong&gt;8 sklearn 模型的保存和加载 API&lt;/strong&gt;&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.externals &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; joblib&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;function&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;title&#34;&gt;load_dump_demo&lt;/span&gt;():&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    模型保存和加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    :return:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 1.获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    data = load_boston()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 2.数据集划分&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_train, x_test, y_train, y_test = train_test_split(data.data, data.target, random_state=&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 3.特征工程-标准化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    transfer = StandardScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_train = transfer.fit_transform(x_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    x_test = transfer.fit_transform(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.机器学习-线性回归(岭回归)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# # 4.1 模型训练&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# estimator = Ridge(alpha=1)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# estimator.fit(x_train, y_train)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;#&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# # 4.2 模型保存&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# joblib.dump(estimator, &amp;quot;./data/test.pkl&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 4.3 模型加载&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    estimator = joblib.load(&lt;span class=&#34;string&#34;&gt;&amp;quot;./data/test.pkl&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.模型评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.1 获取系数等值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    y_predict = estimator.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;预测值为:\n&amp;quot;&lt;/span&gt;, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;模型中的系数为:\n&amp;quot;&lt;/span&gt;, estimator.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;模型中的偏置为:\n&amp;quot;&lt;/span&gt;, estimator.intercept_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 5.2 评价&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 均方误差&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    error = mean_squared_error(y_test, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;误差为:\n&amp;quot;&lt;/span&gt;, error)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;13-逻辑回归&#34;&gt; 1.3 逻辑回归&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;逻辑回归（Logistic Regression）是机器学习中的&lt;strong&gt;一种分类模型&lt;/strong&gt;，逻辑回归是一种分类算法，逻辑回归就是解决二分类问题的利器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;算法原理&lt;/strong&gt;：将线性回归的输出作为逻辑回归的输入，然后经过 sigmoid 函数变换将整体的值映射到 [0，1]，再设定阈值进行分类。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; klearn.linear_models &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LogisticRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# solver可选参数:&amp;#123;&amp;#x27;liblinear&amp;#x27;, &amp;#x27;sag&amp;#x27;, &amp;#x27;saga&amp;#x27;,&amp;#x27;newton-cg&amp;#x27;, &amp;#x27;lbfgs&amp;#x27;&amp;#125;，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 对于小数据集来说，“liblinear”是个不错的选择，而“sag”和&amp;#x27;saga&amp;#x27;对于大型数据集会更快。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# 对于多类问题，只有&amp;#x27;newton-cg&amp;#x27;， &amp;#x27;sag&amp;#x27;， &amp;#x27;saga&amp;#x27;和&amp;#x27;lbfgs&amp;#x27;可以处理多项损失;“liblinear”仅限于“one-versus-rest”分类。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# penalty：正则化的种类&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# C：正则化力度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = LogisticRegression(solver=&lt;span class=&#34;string&#34;&gt;&amp;#x27;liblinear&amp;#x27;&lt;/span&gt;, penalty=‘l2’, C = &lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;1-总损失函数对数似然损失&#34;&gt; 1 总损失函数（对数似然损失）&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154639187.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;2-概念解释&#34;&gt; 2 概念解释&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;准确率&lt;/code&gt; ：所有样本中预测对的比例&lt;/p&gt;
&lt;p&gt;&lt;code&gt;精确率&lt;/code&gt; ：预测结果为正例样本中真实为正例的比例（预测为正的样本中的正样本）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;召回率&lt;/code&gt; ：真实为正例的样本中预测结果为正例的比例（正样本中预测为正的样本）&lt;/p&gt;
&lt;p&gt;&lt;code&gt;F1-score&lt;/code&gt; ：反映模型的稳健性&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154656134.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# labels:指定类别对应的数字      target_names：目标类别名称          return：每个类别精确率与召回率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = classification_report(y_test, y_predict, labels=(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;), target_names=(&lt;span class=&#34;string&#34;&gt;&amp;quot;良性&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;恶性&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;3-roc-曲线&#34;&gt; 3 ROC 曲线&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;TPR&lt;/strong&gt; = TP / (TP + FN)     &amp;lt; &lt;code&gt;击中率&lt;/code&gt;  &amp;gt;
&lt;ul&gt;
&lt;li&gt;所有真实类别为 1 的样本中，预测类别为 1 的比例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;FPR&lt;/strong&gt; = FP / (FP + TN)    &amp;lt; &lt;code&gt;虚惊率&lt;/code&gt;  &amp;gt;
&lt;ul&gt;
&lt;li&gt;所有真实类别为 0 的样本中，预测类别为 1 的比例&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154713204.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 50%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;AUC 指标&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;AUC 的概率意义是随机取一对正负样本，正样本得分大于负样本得分的概率&lt;/li&gt;
&lt;li&gt;AUC 的范围在 [0, 1] 之间，并且越接近 1 越好，越接近 0.5 属于乱猜&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AUC=1，完美分类器，采用这个预测模型时，不管设定什么阈值都能得出完美预测。绝大多数预测的场合，不存在完美分类器。&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;0.5&amp;lt;AUC&amp;lt;1，优于随机猜测。这个分类器（模型）妥善设定阈值的话，能有预测价值。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; roc_auc_score&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 计算所得为ROC曲线面积&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;roc_auc_score(y_test, y_predict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-样本不均衡问题&#34;&gt; 4 样本不均衡问题&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;增加一些少数类样本使得正、反例数目接近，然后再进行学习。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关于类别不平衡的问题，主要有两种处理方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1 过采样方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;增加数量较少那一类样本的数量，使得正负样本比例均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 使用imblearn进行随机过采样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; imblearn.over_sampling &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; RandomOverSampler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ros = RandomOverSampler(random_state=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1.1 过采样经典方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1 随机过采样法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;通过复制所选择的样本生成样本集&lt;/p&gt;
&lt;p&gt;缺点：易产生模型过拟合问题&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 SMOTE 算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;(Synthetic Minority Oversampling，合成少数类过采样技术)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;对每个少数类样本，从它的最近邻中随机选择一个样本，然后在两个样本之间的连线上随机选择一点作为新合成的少数类样本。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;SMOTE 算法摒弃了随机过采样复制样本的做法，可以防止随机过采样中容易过拟合的问题，实践证明此方法可以提高分类器的性能。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# SMOTE过采样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; imblearn.over_sampling &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; SMOTE&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X_resampled, y_resampled = SMOTE().fit_resample(X, y)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 欠采样方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少数量较多那一类样本的数量，使得正负样本比例均衡。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 随机欠采样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; imblearn.under_sampling &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; RandomUnderSampler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;rus = RandomUnderSampler(random_state=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;blockquote&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机欠采样方法通过改变多数类样本比例以达到修改样本分布的目的，从而使样本分布较为均衡，但由于采样的样本集合要少于原来的样本集合，因此会造成一些信息缺失，即将多数类样本删除有可能会导致分类器丢失有关多数类的重要信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;14-决策树算法&#34;&gt; 1.4 决策树算法&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;决策树思想的来源非常朴素，程序设计中的条件分支结构就是 if-else 结构，最早的决策树就是利用这类结构分割数据的一种分类学习方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;是一种树形结构，本质是一颗由多个判断节点组成的树&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;其中每个内部节点表示一个属性上的判断，&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;每个分支代表一个判断结果的输出，&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最后每个叶节点代表一种分类结果&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;1-信息增益-信息增益率和基尼系数&#34;&gt; 1 信息增益、信息增益率和基尼系数&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;信息熵&lt;/code&gt;  (information entropy)：度量样本集合纯度最常用的一种指标。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;C:\Users\14767\AppData\Roaming\Typora\typora-user-images\image-20210507193435691.png&#34; alt=&#34;image-20210507193435691&#34; style=&#34;zoom:50%;#pic_center&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;篮球比赛里，有 4 个球队 {A,B,C,D} ，获胜概率分别为 {1/2, 1/4, 1/8, 1/8}，求 Ent (D)&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154739610.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;信息增益&lt;/code&gt; （information gain）：以某特征划分数据集前后的熵的差值，用来衡量使用当前特征对于样本集合 D 划分效果的好坏。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154759873.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;2-信息熵计算案例&#34;&gt; 2 信息熵计算案例&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154820650.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154839727.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 50%;&#34;&gt;&lt;/center&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154857235.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h4&gt;&lt;span id=&#34;15-集成算法&#34;&gt; 1.5 集成算法&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;通过建立几个模型来解决单一预测问题。它的工作原理是生成多个分类器 / 模型，各自独立地学习和作出预测。这些预测最后结合成组合预测，因此优于任何一个单分类的做出预测。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2-集成学习中-boosting-和-bagging&#34;&gt; 2 集成学习中 boosting 和 Bagging&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154922170.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;3-bagging-及随机森林&#34;&gt; 3 Bagging 及随机森林&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519154941212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;采样不同数据集&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;训练分类器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;平权投票，获取最终结果&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Bagging + 决策树 / 线性回归 / 逻辑回归 / 深度学习… = bagging 集成学习方法&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;随机森林&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;随机森林&lt;/strong&gt; &lt;strong&gt;= Bagging +&lt;/strong&gt; &lt;strong&gt;决策树&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155016427.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;包外数据：没有选择到的数据，称之为 Out-of-bag (OOB) 数据，当数据足够多，对于任意一组数据是包外数据的概率为 1/e。&lt;/p&gt;
&lt;p&gt;经验证，包外估计是对集成分类器泛化误差的&lt;strong&gt;无偏估计&lt;/strong&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;API 实现&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# n_estimators：(default = 10)森林里的树木数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Criterion：(default =“gini”) 分割特征的测量方法&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# max_features=&amp;quot;auto”,每个决策树的最大特征数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    If &amp;quot;auto&amp;quot;, then max_features=sqrt(n_features).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    If &amp;quot;sqrt&amp;quot;, then max_features=sqrt(n_features)(same as &amp;quot;auto&amp;quot;).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    If &amp;quot;log2&amp;quot;, then max_features=log2(n_features).&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    If None, then max_features=n_features.&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# bootstrap：(default = True) 是否在构建树时使用放回抽样&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_samples_split 内部节点再划分所需最小样本数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_samples_leaf 叶子节点的最小样本数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_impurity_split: 节点划分最小不纯度&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sklearn.ensemble.RandomForestClassifier(n_estimators=&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, criterion=’gini’, max_depth=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, bootstrap=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, random_state=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;, min_samples_split=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-boosting&#34;&gt; 4 boosting&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;定义&#34;&gt; &lt;strong&gt;定义&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;每新加入一个弱学习器，整体能力就会得到提升，代表算法有：Adaboost，GBDT，XGBoost，LightGBM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;算法步骤&#34;&gt; &lt;strong&gt;算法步骤&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155041476.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;1）训练第一个学习器&lt;/li&gt;
&lt;li&gt;2）调整数据分布&lt;/li&gt;
&lt;li&gt;3）训练第二个学习器&lt;/li&gt;
&lt;li&gt;4）再次调整数据分布&lt;/li&gt;
&lt;li&gt;5）依次训练学习器，调整数据分布&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;bagging-集成与-boosting-集成的区别&#34;&gt; &lt;strong&gt;Bagging 集成与 Boosting 集成的区别&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;区别一：数据方面
&lt;ul&gt;
&lt;li&gt;Bagging：对数据进行采样训练；&lt;/li&gt;
&lt;li&gt;Boosting：根据前一轮学习结果调整数据的重要性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;区别二：投票方面
&lt;ul&gt;
&lt;li&gt;Bagging：所有学习器平权投票；&lt;/li&gt;
&lt;li&gt;Boosting：对学习器进行加权投票。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;区别三：学习顺序
&lt;ul&gt;
&lt;li&gt;Bagging 的学习是并行的，每个学习器没有依赖关系；&lt;/li&gt;
&lt;li&gt;Boosting 学习是串行，学习有先后顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;区别四：主要作用
&lt;ul&gt;
&lt;li&gt;Bagging 主要用于提高泛化性能（解决过拟合，也可以说降低方差）&lt;/li&gt;
&lt;li&gt;Boosting 主要用于提高训练精度 （解决欠拟合，也可以说降低偏差）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155101240.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;adaboost&#34;&gt; &lt;strong&gt;AdaBoost&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155119234.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;原理图&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155142253.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.ensemble &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; AdaBoostClassifier&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;gbdt&#34;&gt; &lt;strong&gt;GBDT&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;GBDT 的全称是 Gradient Boosting Decision Tree，梯度提升树，在传统机器学习算法中，GBDT 算的上 TOP3 的算法。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;GBDT 使用的决策树是 CART 回归树&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;无论是处理回归问题还是二分类以及多分类，GBDT 使用的决策树通通都是都是 CART 回归树。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在这里插入图片描述&lt;/p&gt;
&lt;h4&gt;&lt;span id=&#34;16-聚类算法&#34;&gt; 1.6 聚类算法&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;一种典型的无监督学习算法，主要用于将相似的样本自动归到一个类别中。&lt;/p&gt;
&lt;p&gt;在聚类算法中根据样本之间的相似性，将样本划分到不同的类别中，对于不同的相似度计算方法，会得到不同的聚类结果，常用的相似度计算方法有欧式距离法。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2-算法学习&#34;&gt; 2 算法学习&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;1）随机设置 K 个特征空间内的点作为初始的聚类中心&lt;/li&gt;
&lt;li&gt;2）对于其他每个点计算到 K 个中心的距离，未知的点选择最近的一个聚类中心点作为标记类别&lt;/li&gt;
&lt;li&gt;3）接着对着标记的聚类中心之后，重新计算出每个聚类的新中心点（平均值）&lt;/li&gt;
&lt;li&gt;4）如果计算得出的新中心点与原中心点一样（质心不再移动），那么结束，否则重新进行第二步过程&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;3-api&#34;&gt; 3 API&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# n_clusters:开始的聚类中心数量&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# estimator.fit(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# estimator.predict(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;	&lt;span class=&#34;comment&#34;&gt;# estimator.fit_predict(x)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sklearn.cluster.KMeans(n_clusters=&lt;span class=&#34;number&#34;&gt;8&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;4-案例分析&#34;&gt; 4 案例分析&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.datasets.samples_generator &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; make_blobs&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.cluster &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; KMeans&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; calinski_harabaz_score&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 创建数据集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# X为样本特征，Y为样本簇类别， 共1000个样本，每个样本2个特征，共4个簇，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 簇中心在[-1,-1], [0,0],[1,1], [2,2]， 簇方差分别为[0.4, 0.2, 0.2, 0.2]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X, y = make_blobs(n_samples=&lt;span class=&#34;number&#34;&gt;1000&lt;/span&gt;, n_features=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, centers=[[-&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, -&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], [&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;]],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  cluster_std=[&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                  random_state=&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 数据集可视化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(X[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], X[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], marker=&lt;span class=&#34;string&#34;&gt;&amp;#x27;o&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_pred = KMeans(n_clusters=&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, random_state=&lt;span class=&#34;number&#34;&gt;9&lt;/span&gt;).fit_predict(X)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 分别尝试n_cluses=2\3\4,然后查看聚类效果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.scatter(X[:, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;], X[:, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;], c=y_pred)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 用Calinski-Harabasz Index评估的聚类分数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(calinski_harabaz_score(X, y_pred)) &lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;5-模型评估&#34;&gt; 5 模型评估&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;SSE
&lt;ul&gt;
&lt;li&gt;误差平方和的值越小越好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;肘部法
&lt;ul&gt;
&lt;li&gt;下降率突然变缓时即认为是最佳的 k 值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SC 系数
&lt;ul&gt;
&lt;li&gt;取值为 [-1, 1]，其值越大越好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CH 系数
&lt;ul&gt;
&lt;li&gt;分数 s 高则聚类效果越好&lt;/li&gt;
&lt;li&gt;CH 需要达到的目的：&lt;strong&gt;用尽量少的类别聚类尽量多的样本，同时获得较好的聚类效果。&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;6-k-means&#34;&gt; 6 K-Means&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;K-Means 算法优缺点总结&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;优点：
&lt;ul&gt;
&lt;li&gt;1. 原理简单（靠近中心点），实现容易&lt;/li&gt;
&lt;li&gt;2. 聚类效果中上（依赖 K 的选择）&lt;/li&gt;
&lt;li&gt;3. 空间复杂度 o (N)，时间复杂度 o (I&lt;em&gt;K&lt;/em&gt;N)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;缺点：
&lt;ul&gt;
&lt;li&gt;1. 对离群点，噪声敏感 （中心点易偏移）&lt;/li&gt;
&lt;li&gt;2. 很难发现大小差别很大的簇及进行增量计算&lt;/li&gt;
&lt;li&gt;3. 结果不一定是全局最优，只能保证局部最优（与 K 的个数及初值选取有关）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;优化方法&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;优化方法&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;思路&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Canopy+kmeans&lt;/td&gt;
&lt;td&gt;Canopy 粗聚类配合 kmeans&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kmeans++&lt;/td&gt;
&lt;td&gt;距离越远越容易成为新的质心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;二分 k-means&lt;/td&gt;
&lt;td&gt;拆除 SSE 最大的簇&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;k-medoids&lt;/td&gt;
&lt;td&gt;和 kmeans 选取中心点的方式不同&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;kernel kmeans&lt;/td&gt;
&lt;td&gt;映射到高维空间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ISODATA&lt;/td&gt;
&lt;td&gt;动态聚类，可以更改 K 值大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Mini-batch K-Means&lt;/td&gt;
&lt;td&gt;大数据集分批聚类&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;span id=&#34;17-朴素贝叶斯&#34;&gt; 1.7 朴素贝叶斯&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;朴素贝叶斯：假定了特征与特征之间相互独立的贝叶斯公式&lt;/li&gt;
&lt;li&gt;朴素：假定了特征与特征相互独立&lt;/li&gt;
&lt;li&gt;如果一个事物在一些属性条件发生的情况下，事物属于 A 的概率 &amp;gt; 属于 B 的概率，则判定事物属于 A。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;2-算法原理&#34;&gt; 2 算法原理&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;分解各类先验样本数据中的特征；&lt;/li&gt;
&lt;li&gt;计算各类数据中，各特征的条件概率；(比如：特征 1 出现的情况下，属于 A 类的概率 p (A | 特征 1)，属于 B 类的概率 p (B | 特征 1)，属于 C 类的概率 p (C | 特征 1)…)&lt;/li&gt;
&lt;li&gt;分解待分类数据中的特征 (特征 1、特征 2、特征 3、特征 4…)&lt;/li&gt;
&lt;li&gt;计算各特征的各条件概率的乘积，如下所示：&lt;br&gt;
判断为 A 类的概率：p (A | 特征 1) * p (A | 特征 2) * p (A | 特征 3) * p (A | 特征 4)…&lt;br&gt;
 判断为 B 类的概率：p (B | 特征 1) * p (B | 特征 2) * p (B | 特征 3) * p (B | 特征 4)…&lt;br&gt;
 判断为 C 类的概率：p (C | 特征 1) * p (C | 特征 2) * p (C | 特征 3) * p (C | 特征 4)…&lt;br&gt;
…&lt;/li&gt;
&lt;li&gt;结果中的最大值就是该样本所属的类别&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;3-拉普拉斯平滑&#34;&gt; 3 拉普拉斯平滑&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;问题&lt;/strong&gt;：从下面的例子的到娱乐概率为 0，这是不合理的，如果词频列表里面有很多出现次数为 0，很可能计算结果都为 0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;解决方法&lt;/strong&gt;：拉普拉斯平滑&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155254197.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;a 为指定的系数一般为 1，m 为训练文档中统计出的特征词个数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-案例实现&#34;&gt; 4 案例实现&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;商品评论情感分析&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）获取数据&lt;/li&gt;
&lt;li&gt;2）数据基本处理
&lt;ul&gt;
&lt;li&gt;2.1） 取出内容列，对数据进行分析&lt;/li&gt;
&lt;li&gt;2.2） 判定评判标准&lt;/li&gt;
&lt;li&gt;2.3） 选择停用词&lt;/li&gt;
&lt;li&gt;2.4） 把内容处理，转化成标准格式&lt;/li&gt;
&lt;li&gt;2.5） 统计词的个数&lt;/li&gt;
&lt;li&gt;2.6）准备训练集和测试集&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;3）模型训练&lt;/li&gt;
&lt;li&gt;4）模型评估&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;59&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;60&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;61&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;62&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;63&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;64&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;65&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;66&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;67&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;68&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;69&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;70&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;71&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;72&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;73&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;74&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;75&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;76&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;77&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;78&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;79&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;80&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;81&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;82&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;83&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;84&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; jieba&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.feature_extraction.text &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; CountVectorizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.naive_bayes &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; MultinomialNB&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 加载数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = pd.read_csv(&lt;span class=&#34;string&#34;&gt;&amp;quot;./data/书籍评价.csv&amp;quot;&lt;/span&gt;, encoding=&lt;span class=&#34;string&#34;&gt;&amp;quot;gbk&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 数据基本处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1） 取出内容列，对数据进行分析&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;content = data[&lt;span class=&#34;string&#34;&gt;&amp;quot;内容&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.2） 判定评判标准 -- 1好评;0差评&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data.loc[data.loc[:, &lt;span class=&#34;string&#34;&gt;&amp;#x27;评价&amp;#x27;&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;quot;好评&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;评论标号&amp;quot;&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;  &lt;span class=&#34;comment&#34;&gt;# 把好评修改为1&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data.loc[data.loc[:, &lt;span class=&#34;string&#34;&gt;&amp;#x27;评价&amp;#x27;&lt;/span&gt;] == &lt;span class=&#34;string&#34;&gt;&amp;#x27;差评&amp;#x27;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;#x27;评论标号&amp;#x27;&lt;/span&gt;] = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# data.head()&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;good_or_bad = data[&lt;span class=&#34;string&#34;&gt;&amp;#x27;评价&amp;#x27;&lt;/span&gt;].values  &lt;span class=&#34;comment&#34;&gt;# 获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(good_or_bad)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# [&amp;#x27;好评&amp;#x27; &amp;#x27;好评&amp;#x27; &amp;#x27;好评&amp;#x27; &amp;#x27;好评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;好评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;差评&amp;#x27; &amp;#x27;差评&amp;#x27;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.3） 选择停用词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 加载停用词&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stopwords=[]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;with&lt;/span&gt; &lt;span class=&#34;built_in&#34;&gt;open&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;./data/stopwords.txt&amp;#x27;&lt;/span&gt;,&lt;span class=&#34;string&#34;&gt;&amp;#x27;r&amp;#x27;&lt;/span&gt;,encoding=&lt;span class=&#34;string&#34;&gt;&amp;#x27;utf-8&amp;#x27;&lt;/span&gt;) &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; f:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    lines=f.readlines()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(lines)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; tmp &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; lines:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        line=tmp.strip()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;        stopwords.append(line)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# stopwords  # 查看新产生列表&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#对停用词表进行去重&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;stopwords=&lt;span class=&#34;built_in&#34;&gt;list&lt;/span&gt;(&lt;span class=&#34;built_in&#34;&gt;set&lt;/span&gt;(stopwords))&lt;span class=&#34;comment&#34;&gt;#去重  列表形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(stopwords)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.4） 把“内容”处理，转化成标准格式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;comment_list = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; tmp &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; content:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(tmp)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# 对文本数据进行切割&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;comment&#34;&gt;# cut_all 参数默认为 False,所有使用 cut 方法时默认为精确模式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seg_list = jieba.cut(tmp, cut_all=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(seg_list)  &lt;span class=&#34;comment&#34;&gt;# &amp;lt;generator object Tokenizer.cut at 0x0000000007CF7DB0&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    seg_str = &lt;span class=&#34;string&#34;&gt;&amp;#x27;,&amp;#x27;&lt;/span&gt;.join(seg_list)  &lt;span class=&#34;comment&#34;&gt;# 拼接字符串&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(seg_str)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    comment_list.append(seg_str)  &lt;span class=&#34;comment&#34;&gt;# 目的是转化成列表形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# print(comment_list)  # 查看comment_list列表。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.5） 统计词的个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 进行统计词个数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 实例化对象&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# CountVectorizer 类会将文本中的词语转换为词频矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;con = CountVectorizer(stop_words=stopwords)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 进行词数统计&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X = con.fit_transform(comment_list)  &lt;span class=&#34;comment&#34;&gt;# 它通过 fit_transform 函数计算各个词语出现的次数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;name = con.get_feature_names()  &lt;span class=&#34;comment&#34;&gt;# 通过 get_feature_names()可获取词袋中所有文本的关键字&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(X.toarray())  &lt;span class=&#34;comment&#34;&gt;# 通过 toarray()可看到词频矩阵的结果&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(name)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.6）准备训练集和测试集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 准备训练集   这里将文本前10行当做训练集  后3行当做测试集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train = X.toarray()[:&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;, :]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_train = good_or_bad[:&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 准备测试集&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_text = X.toarray()[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;:, :]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_text = good_or_bad[&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;:]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 模型训练&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 构建贝叶斯算法分类器&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mb = MultinomialNB(alpha=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;)  &lt;span class=&#34;comment&#34;&gt;# alpha 为可选项，默认 1.0，添加拉普拉修/Lidstone 平滑参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 训练数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;mb.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 预测数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_predict = mb.predict(x_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#预测值与真实值展示&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;预测值：&amp;#x27;&lt;/span&gt;,y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;真实值：&amp;#x27;&lt;/span&gt;,y_text)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 模型评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(mb.score(x_text, y_text))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;18-支持向量机&#34;&gt; 1.8 支持向量机&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-基本元素&#34;&gt; 1 基本元素&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;【data】数据&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【classifier】分类&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【optimization】最优化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【kernelling】核方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;【hyperplane】超平面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;2-基本思想&#34;&gt; 2 基本思想&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;SVM (supported vector machine，支持向量机)，即寻找到一个超平面使样本分成两类，并且间隔最大。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;3-用途&#34;&gt; 3 用途&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;线性或非线性分类、回归，甚至是异常值检测&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;特别适用于中小型复杂数据集的分类&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-硬间隔和软间隔&#34;&gt; 4 硬间隔和软间隔&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;硬间隔&lt;/strong&gt;：严格地让所有实例都不在最大间隔之间，并且位于正确的一边。它只在数据是线性可分离的时候才有效；其次，它对异常值非常敏感。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;软间隔&lt;/strong&gt;：尽可能在保持最大间隔宽阔和限制间隔违例（即位于最大间隔之上，甚至在错误的一边的实例）之间找到良好的平衡。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155332648.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;5-支持向量机推导&#34;&gt; 5 支持向量机推导&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155358502.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;6-损失函数&#34;&gt; 6 损失函数&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155425223.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;SVM Hinge 损失（折页损失函数、铰链损失函数）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155444524.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;7-svm-回归&#34;&gt; 7 SVM 回归&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;让尽可能多的实例位于预测线上，同时限制间隔违例（也就是不在预测线距上的实例）。&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sklearn.svm.SVC(C=&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;, kernel=&lt;span class=&#34;string&#34;&gt;&amp;#x27;rbf&amp;#x27;&lt;/span&gt;, degree=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;,coef0=&lt;span class=&#34;number&#34;&gt;0.0&lt;/span&gt;,random_state=&lt;span class=&#34;literal&#34;&gt;None&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;C:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;	惩罚系数，用来控制损失函数的惩罚系数，类似于线性回归中的正则化系数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  - C越大，相当于惩罚松弛变量，希望松弛变量接近0，即**对误分类的惩罚增大**，趋向于对训练集全分对的情况，这样会出现训练集测试时准确率很高，但泛化能力弱，容易导致过拟合。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  - C值小，对误分类的惩罚减小，容错能力增强，泛化能力较强，但也可能欠拟合。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;- kernel:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  算法中采用的核函数类型，核函数是用来将非线性问题转化为线性问题的一种方法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  - 参数选择有RBF, Linear, Poly, Sigmoid或者自定义一个核函数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    - 默认的是&amp;quot;RBF&amp;quot;，即径向基核，也就是高斯核函数；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    - 而Linear指的是线性核函数，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    - Poly指的是多项式核，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    - Sigmoid指的是双曲正切函数tanh核；。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;- degree:&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  - 当指定kernel为&amp;#x27;poly&amp;#x27;时，表示选择的多项式的最高次数，默认为三次多项式；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  - 若指定kernel不是&amp;#x27;poly&amp;#x27;，则忽略，即该参数只对&amp;#x27;poly&amp;#x27;有用。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;    - 多项式核函数是将低维的输入空间映射到高维的特征空间。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;- coef0:核函数常数值(y=kx+b中的b值)，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  - 只有‘poly’和‘sigmoid’核函数有，默认值是0。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;  &amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;sklearn.svm.LinearSVC(penalty=&lt;span class=&#34;string&#34;&gt;&amp;#x27;l2&amp;#x27;&lt;/span&gt;, loss=&lt;span class=&#34;string&#34;&gt;&amp;#x27;squared_hinge&amp;#x27;&lt;/span&gt;, dual=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;, C=&lt;span class=&#34;number&#34;&gt;1.0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;penalty:正则化参数，L1和L2两种参数可选，仅LinearSVC有。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;loss:损失函数，有hinge和squared_hinge两种可选，前者又称L1损失，后者称为L2损失，默认是squared_hinge，其中hinge是SVM的标准损失，&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;	squared_hinge是hinge的平方&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;dual:是否转化为对偶问题求解，默认是True。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;C:惩罚系数，用来控制损失函数的惩罚系数，类似于线性回归中的正则化系数。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;quot;&amp;quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h5&gt;&lt;span id=&#34;8-svm-优缺点&#34;&gt; 8 SVM 优缺点&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;SVM 的优点：
&lt;ul&gt;
&lt;li&gt;在高维空间中非常高效；&lt;/li&gt;
&lt;li&gt;即使在数据维度比样本数量大的情况下仍然有效；&lt;/li&gt;
&lt;li&gt;在决策函数（称为支持向量）中使用训练集的子集，因此它也是高效利用内存的；&lt;/li&gt;
&lt;li&gt;通用性：不同的核函数与特定的决策函数一一对应；&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;SVM 的缺点：
&lt;ul&gt;
&lt;li&gt;如果特征数量比样本数量大得多，在选择核函数时要避免过拟合；&lt;/li&gt;
&lt;li&gt;对缺失数据敏感；&lt;/li&gt;
&lt;li&gt;对于核函数的高维映射解释力不强&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;19-em-算法&#34;&gt; 1.9 EM 算法&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-基本思想&#34;&gt; 1 基本思想&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;首先&lt;strong&gt;根据己经给出的观测数据，估计出模型参数的值&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;然后&lt;strong&gt;再依据上一步估计出的参数值估计缺失数据的值&lt;/strong&gt;，再根据估计出的缺失数据加上之前己经观测到的数据&lt;strong&gt;重新再对参数值进行估计&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;然后反复迭代，直至最后收敛，迭代结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155512541.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;2-算法流程&#34;&gt; 2 算法流程&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155537945.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h4&gt;&lt;span id=&#34;110-hmm-模型&#34;&gt; 1.10 HMM 模型&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;隐马尔可夫模型（Hidden Markov Model，HMM）是统计模型，它用来描述一个含有隐含未知参数的马尔可夫过程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;马尔科夫链即为&lt;strong&gt;状态空间中从一个状态到另一个状态转换的随机过程。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;马尔科夫链的无记忆性：&lt;strong&gt;下一状态的概率分布只能由当前状态决定，在时间序列中它前面的事件均与之无关&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;&lt;span id=&#34;2-常见术语&#34;&gt; 2 常见术语&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;可见状态链&lt;/li&gt;
&lt;li&gt;隐含状态链&lt;/li&gt;
&lt;li&gt;转换概率&lt;/li&gt;
&lt;li&gt;输出概率&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;3-hmm-两个重要假设&#34;&gt; 3 HMM 两个重要假设&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;1） 齐次马尔科夫链假设&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即任意时刻的隐藏状态只依赖于它前一个隐藏状态。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2） 观测独立性假设&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即任意时刻的观察状态只仅仅依赖于当前时刻的隐藏状态，这也是一个为了简化模型的假设。&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-hmm-模型算法原理&#34;&gt; 4 HMM 模型算法原理&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;一个 HMM 模型，可以由&lt;strong&gt;隐藏状态初始概率分布 Π , 状态转移概率矩阵 A 和观测状态概率矩阵 B 决定&lt;/strong&gt;。Π，A 决定状态序列，B 决定观测序列。&lt;/p&gt;
&lt;p&gt;因此，HMM 模型可以由一个三元组 &lt;code&gt;λ&lt;/code&gt;  表示如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;em&gt;λ&lt;/em&gt;=(&lt;em&gt;A&lt;/em&gt;,&lt;em&gt;B&lt;/em&gt;,Π)= (状态序列，观测序列，初始状态概率分布)&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;5-hmm-模型三个基本问题&#34;&gt; 5 HMM 模型三个基本问题&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;1）评估观察序列概率 —— &lt;strong&gt;前向后向的概率计算&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即给定 &lt;code&gt;模型λ&lt;/code&gt; =(A,B,Π) 和 &lt;code&gt;观测序列&lt;/code&gt;  O={o_1,o_2,…o_T}，计算在模型 λ 下某一个 &lt;code&gt;观测序列O出现的概率&lt;/code&gt;  P (O|λ)。&lt;/li&gt;
&lt;li&gt;这个问题的求解需要用到前向后向算法，是 HMM 模型三个问题中最简单的。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155603616.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 67%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;2）预测问题，也称为解码问题 ——&lt;strong&gt; 维特比（Viterbi）算法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即给定 &lt;code&gt;模型λ&lt;/code&gt; =(A,B,Π) 和 &lt;code&gt;观测序列&lt;/code&gt;  O={o_1,o_2,…o_T}，求给定观测序列条件下，最可能出现的对应的 &lt;code&gt;状态序列&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;这个问题的求解需要用到基于动态规划的维特比算法，是 HMM 模型三个问题中复杂度居中的算法。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155623262.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom: 70%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;3）模型参数学习问题 —— &lt;strong&gt;鲍姆 - 韦尔奇（Baum-Welch）算法&lt;/strong&gt; (状态未知) ，这是一个学习问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即给定 &lt;code&gt;观测序列&lt;/code&gt;  O={o_1,o_2,…o_T}，估计 &lt;code&gt;模型λ&lt;/code&gt; =(A,B,Π) 的参数，使该模型下观测序列的条件概率 P (O∣λ) 最大。&lt;/li&gt;
&lt;li&gt;这个问题的求解需要用到基于 EM 算法的鲍姆 - 韦尔奇算法，是 HMM 模型三个问题中最复杂的。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155641884.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;6-案例实现&#34;&gt; 6 案例实现&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;49&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; hmmlearn &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; hmm&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设定隐藏状态的集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;states = [&lt;span class=&#34;string&#34;&gt;&amp;quot;box 1&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;box 2&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;box3&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n_states = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(states)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设定观察状态的集合&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;observations = [&lt;span class=&#34;string&#34;&gt;&amp;quot;red&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;white&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;n_observations = &lt;span class=&#34;built_in&#34;&gt;len&lt;/span&gt;(observations)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设定初始状态分布&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;start_probability = np.array([&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设定状态转移概率分布矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transition_probability = np.array([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设定观测状态概率矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;emission_probability = np.array([&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.5&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;0.4&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.6&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;  [&lt;span class=&#34;number&#34;&gt;0.7&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.3&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;])&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 设定模型参数&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model = hmm.MultinomialHMM(n_components=n_states)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.startprob_=start_probability  &lt;span class=&#34;comment&#34;&gt;# 初始状态分布&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.transmat_=transition_probability  &lt;span class=&#34;comment&#34;&gt;# 状态转移概率分布矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;model.emissionprob_=emission_probability  &lt;span class=&#34;comment&#34;&gt;# 观测状态概率矩阵&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;seen = np.array([[&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;,&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;]]).T  &lt;span class=&#34;comment&#34;&gt;# 设定观测序列&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;box = model.predict(seen)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;球的观测顺序为：\n&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;.join(&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: observations[x], seen.flatten())))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 注意：需要使用flatten方法，把seen从二维变成一维&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;最可能的隐藏状态序列为:\n&amp;quot;&lt;/span&gt;， &lt;span class=&#34;string&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;.join(&lt;span class=&#34;built_in&#34;&gt;map&lt;/span&gt;(&lt;span class=&#34;keyword&#34;&gt;lambda&lt;/span&gt; x: states[x], box)))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(model.score(seen))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输出结果是：-2.03854530992&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对数处理结果，概率值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; math&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;math.exp(model.score(seen))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# ln0.13022≈−2.0385&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 输出结果是：0.13021800000000003&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;111-xgboost-算法&#34;&gt; 1.11 xgboost 算法&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;XGBoost（Extreme Gradient Boosting）全名叫极端梯度提升树，XGBoost 是集成学习方法的王牌，在 Kaggle 数据挖掘比赛中，大部分获胜者用了 XGBoost。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;2-最优模型构建方法&#34;&gt; 2 最优模型构建方法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;构建最优模型的一般方法是&lt;strong&gt;最小化训练数据的损失函数&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;经验风险最小化&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155702460.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;训练得到的模型复杂度较高。当训练数据较小时，模型很容易出现过拟合问题。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;结构风险最小化&lt;/strong&gt;&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155728354.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;结构风险最小化的模型往往对训练数据以及未知的测试数据都有较好的预测&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;3-目标函数&#34;&gt; 3 目标函数&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;目标函数，即损失函数，通过最小化损失函数来构建最优模型。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155753744.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;其中 yi 是模型的实际输出结果，yi 是模型的输出结果；&lt;/p&gt;
&lt;p&gt;等式右边第一部分是模型的训练误差，第二部分是正则化项，这里的正则化项是 K 棵树的正则化项相加而来的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;XGBoost 使用 CART 树，则树的复杂度为&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519155818375.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;blockquote&gt;
&lt;p&gt;其中 T 为叶子节点的个数，||w|| 为叶子节点向量的模 。γ 表示节点切分的难度，λ 表示 L2 正则化系数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;xgboost-的回归树构建方法&#34;&gt; &lt;strong&gt;XGBoost 的回归树构建方法&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/img_convert/c02b45b8ca725d897dd16eca1373ff90.png&#34; alt=&#34;img&#34; style=&#34;zoom: 33%;#pic_center&#34;&gt;&lt;/center&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;xgboost-与-gdbt-的区别&#34;&gt; &lt;strong&gt;XGBoost 与 GDBT 的区别&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;ul&gt;
&lt;li&gt;区别一：
&lt;ul&gt;
&lt;li&gt;XGBoost 生成 CART 树考虑了树的复杂度，&lt;/li&gt;
&lt;li&gt;GDBT 未考虑，GDBT 在树的剪枝步骤中考虑了树的复杂度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;区别二：
&lt;ul&gt;
&lt;li&gt;XGBoost 是拟合上一轮损失函数的二阶导展开，GDBT 是拟合上一轮损失函数的一阶导展开，因此，XGBoost 的准确性更高，且满足相同的训练效果，需要的迭代次数更少。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;区别三：
&lt;ul&gt;
&lt;li&gt;XGBoost 与 GDBT 都是逐次迭代来提高模型性能，但是 XGBoost 在选取最佳切分点时可以开启多线程进行，大大提高了运行速度。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h6&gt;&lt;span id=&#34;xgboost-中封装的参数&#34;&gt; &lt;strong&gt;XGBoost 中封装的参数&lt;/strong&gt;&lt;/span&gt;&lt;/h6&gt;
&lt;p&gt;主要由三种类型构成：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;1 通用参数（general parameters）&lt;/strong&gt;：主要是&lt;strong&gt;宏观函数控制；&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;booster&lt;/strong&gt; [缺省值 = gbtree]&lt;/p&gt;
&lt;p&gt;决定使用哪个 booster，可以是 gbtree，gblinear 或者 dart。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;g&lt;strong&gt;btree 和 dart 使用基于树的模型 (dart 主要多了 Dropout)，而 gblinear 使用线性函数.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;silent&lt;/strong&gt; [缺省值 = 0]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设置为 0 打印运行信息；设置为 1 静默模式，不打印&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;nthread&lt;/strong&gt; [缺省值 = 设置为最大可能的线程数]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;并行运行 xgboost 的线程数，输入的参数应该 &amp;lt;= 系统的 CPU 核心数，若是没有设置算法会检测将其设置为 CPU 的全部核心数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 Booster 参数（booster parameters）&lt;/strong&gt;：取决于选择的 Booster 类型，&lt;strong&gt;用于控制每一步的 booster（tree, regressiong）&lt;/strong&gt;；&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;eta&lt;/strong&gt; [缺省值 = 0.3，别名：learning_rate]
&lt;ul&gt;
&lt;li&gt;更新中减少的步长来防止过拟合。&lt;/li&gt;
&lt;li&gt;在每次 boosting 之后，可以直接获得新的特征权值，这样可以使得 boosting 更加鲁棒。&lt;/li&gt;
&lt;li&gt;范围： [0,1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;gamma&lt;/strong&gt; [缺省值 = 0，别名: min_split_loss]（分裂最小 loss）
&lt;ul&gt;
&lt;li&gt;在节点分裂时，只有分裂后损失函数的值下降了，才会分裂这个节点。&lt;/li&gt;
&lt;li&gt;Gamma 指定了节点分裂所需的最小损失函数下降值。 这个参数的值越大，算法越保守。这个参数的值和损失函数息息相关，所以是需要调整的。&lt;/li&gt;
&lt;li&gt;范围: [0,∞]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;max_depth&lt;/strong&gt; [缺省值 = 6]
&lt;ul&gt;
&lt;li&gt;这个值为树的最大深度。 这个值也是用来避免过拟合的。max_depth 越大，模型会学到更具体更局部的样本。设置为 0 代表没有限制&lt;/li&gt;
&lt;li&gt;范围: [0,∞]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;min_child_weight&lt;/strong&gt; [缺省值 = 1]
&lt;ul&gt;
&lt;li&gt;决定最小叶子节点样本权重和。XGBoost 的这个参数是最小样本权重的和.&lt;/li&gt;
&lt;li&gt;当它的值较大时，可以避免模型学习到局部的特殊样本。 但是如果这个值过高，会导致欠拟合。这个参数需要使用 CV 来调整。.&lt;/li&gt;
&lt;li&gt;范围: [0,∞]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;subsample&lt;/strong&gt; [缺省值 = 1]
&lt;ul&gt;
&lt;li&gt;这个参数控制对于每棵树，随机采样的比例。&lt;/li&gt;
&lt;li&gt;减小这个参数的值，算法会更加保守，避免过拟合。但是，如果这个值设置得过小，它可能会导致欠拟合。&lt;/li&gt;
&lt;li&gt;典型值：0.5-1，0.5 代表平均采样，防止过拟合.&lt;/li&gt;
&lt;li&gt;范围: (0,1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;colsample_bytree&lt;/strong&gt; [缺省值 = 1]
&lt;ul&gt;
&lt;li&gt;用来控制每棵随机采样的列数的占比 (每一列是一个特征)。&lt;/li&gt;
&lt;li&gt;典型值：0.5-1&lt;/li&gt;
&lt;li&gt;范围: (0,1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;colsample_bylevel&lt;/strong&gt; [缺省值 = 1]
&lt;ul&gt;
&lt;li&gt;用来控制树的每一级的每一次分裂，对列数的采样的占比。&lt;/li&gt;
&lt;li&gt;我个人一般不太用这个参数，因为 subsample 参数和 colsample_bytree 参数可以起到相同的作用。但是如果感兴趣，可以挖掘这个参数更多的用处。&lt;/li&gt;
&lt;li&gt;范围: (0,1]&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lambda&lt;/strong&gt; [缺省值 = 1，别名: reg_lambda]
&lt;ul&gt;
&lt;li&gt;权重的 L2 正则化项 (和 Ridge regression 类似)。&lt;/li&gt;
&lt;li&gt;这个参数是用来控制 XGBoost 的正则化部分的。虽然大部分数据科学家很少用到这个参数，但是这个参数&lt;/li&gt;
&lt;li&gt;在减少过拟合上还是可以挖掘出更多用处的。.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;alpha&lt;/strong&gt; [缺省值 = 0，别名: reg_alpha]
&lt;ul&gt;
&lt;li&gt;权重的 L1 正则化项。(和 Lasso regression 类似)。 可以应用在很高维度的情况下，使得算法的速度更快。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;scale_pos_weight&lt;/strong&gt; [缺省值 = 1]
&lt;ul&gt;
&lt;li&gt;在各类别样本十分不平衡时，把这个参数设定为一个正值，可以使算法更快收敛。通常可以将其设置为负&lt;/li&gt;
&lt;li&gt;样本的数目与正样本数目的比值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;3 学习目标参数（task parameters）&lt;/strong&gt;：&lt;strong&gt;控制训练目标的表现&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;objective&lt;/strong&gt; [缺省值 = reg:linear]&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;“&lt;strong&gt;reg:linear&lt;/strong&gt;” – 线性回归&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;“reg:logistic&lt;/strong&gt;” – 逻辑回归&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;binary:logistic&lt;/strong&gt;” – 二分类逻辑回归，输出为概率&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;multi:softmax&lt;/strong&gt;” – 使用 softmax 的多分类器，返回预测的类别 (不是概率)。在这种情况下，你还需要多设一个参数：num_class (类别数目)&lt;/li&gt;
&lt;li&gt;“&lt;strong&gt;multi:softprob&lt;/strong&gt;” – 和 multi:softmax 参数一样，但是返回的是每个数据属于各个类别的概率。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;eval_metric&lt;/strong&gt; [缺省值 = 通过目标函数选择]&lt;/p&gt;
&lt;p&gt;可供选择的如下所示：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;rmse&lt;/strong&gt;”: 均方根误差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;mae&lt;/strong&gt;”: 平均绝对值误差&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;logloss&lt;/strong&gt;”: 负对数似然函数值&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;/p&gt;
&lt;dl&gt;
&lt;dt&gt;error”&lt;/dt&gt;
&lt;dd&gt;二分类错误率。&lt;/dd&gt;
&lt;/dl&gt;
&lt;ul&gt;
&lt;li&gt;其值通过错误分类数目与全部分类数目比值得到。对于预测，预测值大于 0.5 被认为是正类，其它归为负类。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;error@t&lt;/strong&gt;”: 不同的划分阈值可以通过 ‘t’进行设置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;merror&lt;/strong&gt;”: 多分类错误率，计算公式为 (wrong cases)/(all cases)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;mlogloss&lt;/strong&gt;”: 多分类 log 损失&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;“&lt;strong&gt;auc&lt;/strong&gt;”: 曲线下的面积&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;seed [缺省值 = 0]&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;随机数的种子&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;4-案例分析&#34;&gt; 4 案例分析&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;泰坦尼克号乘客存活分析&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;48&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; np&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.feature_extraction &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; DictVectorizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 1、获取数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;titan = pd.read_csv(&lt;span class=&#34;string&#34;&gt;&amp;quot;http://biostat.mc.vanderbilt.edu/wiki/pub/Main/DataSets/titanic.txt&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.数据基本处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 2.1 确定特征值,目标值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x = titan[[&lt;span class=&#34;string&#34;&gt;&amp;quot;pclass&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;age&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;sex&amp;quot;&lt;/span&gt;]]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y = titan[&lt;span class=&#34;string&#34;&gt;&amp;quot;survived&amp;quot;&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 缺失值需要处理，将特征当中有类别的这些特征进行字典特征抽取&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x[&lt;span class=&#34;string&#34;&gt;&amp;#x27;age&amp;#x27;&lt;/span&gt;].fillna(x[&lt;span class=&#34;string&#34;&gt;&amp;#x27;age&amp;#x27;&lt;/span&gt;].mean(), inplace=&lt;span class=&#34;literal&#34;&gt;True&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train, x_test, y_train, y_test = train_test_split(x, y, random_state=&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对于x转换成字典数据x.to_dict(orient=&amp;quot;records&amp;quot;)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# [&amp;#123;&amp;quot;pclass&amp;quot;: &amp;quot;1st&amp;quot;, &amp;quot;age&amp;quot;: 29.00, &amp;quot;sex&amp;quot;: &amp;quot;female&amp;quot;&amp;#125;, &amp;#123;&amp;#125;]&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 3.特征工程(字典特征抽取)&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transfer = DictVectorizer(sparse=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train = transfer.fit_transform(x_train.to_dict(orient=&lt;span class=&#34;string&#34;&gt;&amp;quot;records&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = transfer.fit_transform(x_test.to_dict(orient=&lt;span class=&#34;string&#34;&gt;&amp;quot;records&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 4.xgboost模型训练和模型评估&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 模型初步训练&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; xgboost &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; XGBClassifier&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xg = XGBClassifier()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;xg.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(xg.score(x_test, y_test))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 针对max_depth进行模型调优&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;depth_range = &lt;span class=&#34;built_in&#34;&gt;range&lt;/span&gt;(&lt;span class=&#34;number&#34;&gt;10&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;score = []&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; depth_range:&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xg = XGBClassifier(eta=&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, gamma=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, max_depth=i)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    xg.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    s = xg.score(x_test, y_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    score.append(s)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 结果可视化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; plt&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.plot(depth_range, score)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;plt.show()&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;112-lightgbm-算法&#34;&gt; 1.12 lightGBM 算法&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;1-定义&#34;&gt; 1 定义&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;LightGBM 提出的主要原因就是为了解决 GBDT 在海量数据遇到的问题，让 GBDT 可以更好更快地用于工业实践。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GBDT 在每一次迭代的时候，都需要遍历整个训练数据多次。&lt;/p&gt;
&lt;p&gt;如果把整个训练数据装进内存则会限制训练数据的大小；如果不装进内存，反复地读写训练数据又会消耗非常大的时间。&lt;/p&gt;
&lt;p&gt;尤其面对工业级海量的数据，普通的 GBDT 算法是不能满足其需求的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5&gt;&lt;span id=&#34;2-特点&#34;&gt; 2 特点&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;在开源之后，就被别人冠以 “速度惊人”、“支持分布式”、“代码清晰易懂”、“占用内存小” 等属性。&lt;/p&gt;
&lt;p&gt;LightGBM 主打的高效并行训练让其性能超越现有其他 boosting 工具。在 Higgs 数据集上的试验表明，LightGBM 比 XGBoost 快将近 &lt;code&gt;10倍&lt;/code&gt; ，内存占用率大约为 XGBoost 的 &lt;code&gt;1/6&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;LightGBM 主要基于以下方面优化，提升整体特特性：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;基于 Histogram（直方图）的决策树算法&lt;/li&gt;
&lt;li&gt;Lightgbm 的 Histogram（直方图）做差加速&lt;/li&gt;
&lt;li&gt;带深度限制的 Leaf-wise 的叶子生长策略&lt;/li&gt;
&lt;li&gt;直接支持类别特征&lt;/li&gt;
&lt;li&gt;直接支持高效并行&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;&lt;span id=&#34;3-优化特点详解&#34;&gt; 3 优化特点详解&lt;/span&gt;&lt;/h5&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;基于 Histogram（直方图）的决策树算法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直方图算法的基本思想是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先把连续的浮点特征值离散化成 k 个整数，同时构造一个宽度为 k 的直方图。&lt;/li&gt;
&lt;li&gt;在遍历数据的时候，根据离散化后的值作为索引在直方图中累积统计量，当遍历一次数据后，直方图累积了需要的统计量，然后根据直方图的离散值，遍历寻找最优的分割点。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;内存消耗的降低，计算上的代价也大幅降低&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Lightgbm 的 Histogram（直方图）做差加速&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一个叶子的直方图可以由它的父亲节点的直方图与它兄弟的直方图做差得到。&lt;/p&gt;
&lt;p&gt;通常构造直方图，需要遍历该叶子上的所有数据，但直方图做差仅需遍历直方图的 k 个桶。&lt;/p&gt;
&lt;p&gt;利用这个方法，LightGBM 可以在构造一个叶子的直方图后，可以用非常微小的代价得到它兄弟叶子的直方图，在速度上可以提升一倍。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;带深度限制的 Leaf-wise 的叶子生长策略&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Level-wise&lt;/strong&gt; 便利一次数据可以同时分裂同一层的叶子，容易进行多线程优化，也好控制模型复杂度，不容易过拟合。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;但实际上 Level-wise 是一种低效的算法，因为它不加区分的对待同一层的叶子，带来了很多没必要的开销，因为实际上很多叶子的分裂增益较低，没必要进行搜索和分裂。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Leaf-wise&lt;/strong&gt; 则是一种更为高效的策略，每次从当前所有叶子中，找到分裂增益最大的一个叶子，然后分裂，如此循环。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;因此同 Level-wise 相比，在分裂次数相同的情况下，Leaf-wise 可以降低更多的误差，得到更好的精度。&lt;/li&gt;
&lt;li&gt;Leaf-wise 的缺点是可能会长出比较深的决策树，产生过拟合。因此 LightGBM 在 Leaf-wise 之上增加了一个最大深度的限制，在保证高效率的同时防止过拟合。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接支持类别特征&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;实际上大多数机器学习工具都无法直接支持类别特征，一般需要把类别特征，转化到多维的 0/1 特征，降低了空间和时间的效率。&lt;/p&gt;
&lt;p&gt;而类别特征的使用是在实践中很常用的。基于这个考虑，LightGBM 优化了对类别特征的支持，可以直接输入类别特征，不需要额外的 0/1 展开。并在决策树算法上增加了类别特征的决策规则。&lt;/p&gt;
&lt;p&gt;在 Expo 数据集上的实验，相比 0/1 展开的方法，训练速度可以加速 8 倍，并且精度一致。目前来看，LightGBM 是第一个直接支持类别特征的 GBDT 工具。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;直接支持高效并行&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;LightGBM 还具有支持高效并行的优点。LightGBM 原生支持并行学习，目前支持特征并行和数据并行的两种。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特征并行的主要思想是在不同机器在不同的特征集合上分别寻找最优的分割点，然后在机器间同步最优的分割点。&lt;/li&gt;
&lt;li&gt;数据并行则是让不同的机器先在本地构造直方图，然后进行全局的合并，最后在合并的直方图上面寻找最优分割点。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;LightGBM 针对这两种并行方法都做了优化:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在&lt;strong&gt;特征并行&lt;/strong&gt;算法中，通过在本地保存全部数据避免对数据切分结果的通信；&lt;/li&gt;
&lt;li&gt;在&lt;strong&gt;数据并行&lt;/strong&gt;中使用分散规约 (Reduce scatter) 把直方图合并的任务分摊到不同的机器，降低通信和计算，并利用直方图做差，进一步减少了一半的通信量。&lt;/li&gt;
&lt;li&gt;** 基于投票的数据并行 (Voting Parallelization)** 则进一步优化数据并行中的通信代价，使通信代价变成常数级别。在数据量很大的时候，使用投票并行可以得到非常好的加速效果。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h5&gt;&lt;span id=&#34;4-api-相关参数介绍&#34;&gt; 4 API 相关参数介绍&lt;/span&gt;&lt;/h5&gt;
&lt;h6&gt;&lt;span id=&#34;41-control-parameters&#34;&gt; 4.1 Control Parameters&lt;/span&gt;&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Control Parameters&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;max_depth&lt;/td&gt;
&lt;td&gt;树的最大深度&lt;/td&gt;
&lt;td&gt;当模型过拟合时，可以考虑首先降低 max_depth&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min_data_in_leaf&lt;/td&gt;
&lt;td&gt;叶子可能具有的最小记录数&lt;/td&gt;
&lt;td&gt;默认 20，过拟合时用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;feature_fraction&lt;/td&gt;
&lt;td&gt;例如 为 0.8 时，意味着在每次迭代中随机选择 80％的参数来建树&lt;/td&gt;
&lt;td&gt;boosting 为 random forest 时用&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;bagging_fraction&lt;/td&gt;
&lt;td&gt;每次迭代时用的数据比例&lt;/td&gt;
&lt;td&gt;用于加快训练速度和减小过拟合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;early_stopping_round&lt;/td&gt;
&lt;td&gt;如果一次验证数据的一个度量在最近的 early_stopping_round 回合中没有提高，模型将停止训练&lt;/td&gt;
&lt;td&gt;加速分析，减少过多迭代&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lambda&lt;/td&gt;
&lt;td&gt;指定正则化&lt;/td&gt;
&lt;td&gt;0～1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;min_gain_to_split&lt;/td&gt;
&lt;td&gt;描述分裂的最小 gain&lt;/td&gt;
&lt;td&gt;控制树的有用的分裂&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;max_cat_group&lt;/td&gt;
&lt;td&gt;在 group 边界上找到分割点&lt;/td&gt;
&lt;td&gt;当类别数量很多时，找分割点很容易过拟合时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n_estimators&lt;/td&gt;
&lt;td&gt;最大迭代次数&lt;/td&gt;
&lt;td&gt;最大迭代数不必设置过大，可以在进行一次迭代后，根据最佳迭代数设置&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;&lt;span id=&#34;42-core-parameters&#34;&gt; 4.2 Core Parameters&lt;/span&gt;&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Core Parameters&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;th&gt;用法&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Task&lt;/td&gt;
&lt;td&gt;数据的用途&lt;/td&gt;
&lt;td&gt;选择 train 或者 predict&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;application&lt;/td&gt;
&lt;td&gt;模型的用途&lt;/td&gt;
&lt;td&gt;选择 regression: 回归时， binary: 二分类时， multiclass: 多分类时&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boosting&lt;/td&gt;
&lt;td&gt;要用的算法&lt;/td&gt;
&lt;td&gt;gbdt， rf: random forest， dart: Dropouts meet Multiple Additive Regression Trees， goss: Gradient-based One-Side Sampling&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;num_boost_round&lt;/td&gt;
&lt;td&gt;迭代次数&lt;/td&gt;
&lt;td&gt;通常 100+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;learning_rate&lt;/td&gt;
&lt;td&gt;学习率&lt;/td&gt;
&lt;td&gt;常用 0.1, 0.001, 0.003…&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;num_leaves&lt;/td&gt;
&lt;td&gt;叶子数量&lt;/td&gt;
&lt;td&gt;默认 31&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;device&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;cpu 或者 gpu&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;metric&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;mae: mean absolute error ， mse: mean squared error ， binary_logloss: loss for binary classification ， multi_logloss: loss for multi classification&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;&lt;span id=&#34;43-io-parameter&#34;&gt; 4.3 IO parameter&lt;/span&gt;&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IO parameter&lt;/th&gt;
&lt;th&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;max_bin&lt;/td&gt;
&lt;td&gt;表示 feature 将存入的 bin 的最大数量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;categorical_feature&lt;/td&gt;
&lt;td&gt;如果 categorical_features = 0,1,2， 则列 0，1，2 是 categorical 变量&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ignore_column&lt;/td&gt;
&lt;td&gt;与 categorical_features 类似，只不过不是将特定的列视为 categorical，而是完全忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;save_binary&lt;/td&gt;
&lt;td&gt;这个参数为 true 时，则数据集被保存为二进制文件，下次读数据时速度会变快&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h6&gt;&lt;span id=&#34;调参建议&#34;&gt; 调参建议：&lt;/span&gt;&lt;/h6&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IO parameter&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;num_leaves&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;取值应 &amp;lt;= 2^{(max_depth)} 2 (&lt;em&gt;m&lt;strong&gt;a&lt;/strong&gt;x&lt;/em&gt;_&lt;em&gt;d&lt;strong&gt;e&lt;/strong&gt;p&lt;strong&gt;t&lt;/strong&gt;h&lt;/em&gt;)， 超过此值会导致过拟合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;min_data_in_leaf&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;将它设置为较大的值可以避免生长太深的树，但可能会导致 underfitting，在大型数据集时就设置为数百或数千&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;max_depth&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;这个也是可以限制树的深度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;下表对应了 Faster Speed ，better accuracy ，over-fitting 三种目的时，可以调的参数&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Faster Speed&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;better accuracy&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;over-fitting&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;将  &lt;code&gt;max_bin&lt;/code&gt;  设置小一些&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用较大的  &lt;code&gt;max_bin&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;max_bin&lt;/code&gt;  小一些&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;num_leaves&lt;/code&gt;  大一些&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;num_leaves&lt;/code&gt;  小一些&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用  &lt;code&gt;feature_fraction&lt;/code&gt;  来做  &lt;code&gt;sub-sampling&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用  &lt;code&gt;feature_fraction&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用  &lt;code&gt;bagging_fraction 和 bagging_freq&lt;/code&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;设定  &lt;code&gt;bagging_fraction 和 bagging_freq&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;training data 多一些&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;training data 多一些&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用  &lt;code&gt;save_binary&lt;/code&gt;  来加速数据加载&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;直接用 categorical feature&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用  &lt;code&gt;gmin_data_in_leaf 和 min_sum_hessian_in_leaf&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;用 parallel learning&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用 dart&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用  &lt;code&gt;lambda_l1, lambda_l2 ，min_gain_to_split&lt;/code&gt;  做正则化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;&lt;code&gt;num_iterations&lt;/code&gt;  大一些， &lt;code&gt;learning_rate&lt;/code&gt;  小一些&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用  &lt;code&gt;max_depth&lt;/code&gt;  控制树的深度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h5&gt;&lt;span id=&#34;5-案例分析&#34;&gt; 5 案例分析&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;鸢尾花数据集处理&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;38&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.datasets &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; load_iris&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; GridSearchCV&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; mean_squared_error&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; lightgbm &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; lgb&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 加载数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris = load_iris()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = iris.data&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;target = iris.target&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;X_train, X_test, y_train, y_test = train_test_split(data, target, test_size=&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 模型训练&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gbm = lgb.LGBMRegressor(objective=&lt;span class=&#34;string&#34;&gt;&amp;#x27;regression&amp;#x27;&lt;/span&gt;, learning_rate=&lt;span class=&#34;number&#34;&gt;0.05&lt;/span&gt;, n_estimators=&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gbm.fit(X_train, y_train, eval_set=[(X_test, y_test)], eval_metric=&lt;span class=&#34;string&#34;&gt;&amp;#x27;l1&amp;#x27;&lt;/span&gt;, early_stopping_rounds=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(gbm.score(X_test, y_test))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 0.810605595102488&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;#  网格搜索，参数优化&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = lgb.LGBMRegressor(num_leaves=&lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;param_grid = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;learning_rate&amp;#x27;&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;0.01&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;],&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;string&#34;&gt;&amp;#x27;n_estimators&amp;#x27;&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;20&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gbm = GridSearchCV(estimator, param_grid, cv=&lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gbm.fit(X_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;Best parameters found by grid search are:&amp;#x27;&lt;/span&gt;, gbm.best_params_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# Best parameters found by grid search are: &amp;#123;&amp;#x27;learning_rate&amp;#x27;: 0.1, &amp;#x27;n_estimators&amp;#x27;: 40&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 模型调优&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gbm = lgb.LGBMRegressor(num_leaves=&lt;span class=&#34;number&#34;&gt;31&lt;/span&gt;, learning_rate=&lt;span class=&#34;number&#34;&gt;0.1&lt;/span&gt;, n_estimators=&lt;span class=&#34;number&#34;&gt;40&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;gbm.fit(X_train, y_train, eval_set=[(X_test, y_test)], eval_metric=&lt;span class=&#34;string&#34;&gt;&amp;#x27;l1&amp;#x27;&lt;/span&gt;, early_stopping_rounds=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(gbm.score(X_test, y_test))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 0.9536626296481988&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3&gt;&lt;span id=&#34;2-机器学习算法实现&#34;&gt; 2 机器学习算法实现&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&#34;1-获取数据集&#34;&gt; 1. 获取数据集&lt;/span&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.1&lt;/span&gt; 方法一：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.datasets &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; load_iris&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;iris = load_iris()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;number&#34;&gt;1.2&lt;/span&gt; 方法二：&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;keyword&#34;&gt;as&lt;/span&gt; pd&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = pd.read_csv(&lt;span class=&#34;string&#34;&gt;&amp;quot;C:\\data\\FBlocaltion\\train.csv&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;2-数据基本处理&#34;&gt; 2. 数据基本处理&lt;/span&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# （备选）：缺失值处理&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = data.replace(to_replace=&lt;span class=&#34;string&#34;&gt;&amp;quot;?&amp;quot;&lt;/span&gt;, value=np.NaN)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = data.dropna()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# x_train,x_test,y_train,y_test为训练集特征值、测试集特征值、训练集目标值、测试集目标值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# x：数据集的特征值   y：数据集的标签值   test_size：测试集的大小，一般为float   random_state 随机数种子,不同的种子会造成不同的随机采样结果。相同的种子采样结果相同。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train, x_test, y_train, y_test = train_test_split(iris.data, iris.target, test_size=&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;, random_state=&lt;span class=&#34;number&#34;&gt;22&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;3-特征工程标准化&#34;&gt; 3. 特征工程：标准化&lt;/span&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 通过一些转换函数将特征数据转换成更加适合算法模型的特征数据过程&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法一：（ 标准化）   &amp;lt;在已有样本足够多的情况下比较稳定，适合现代嘈杂大数据场景。&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; StandardScaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transfer = StandardScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法二：（归一化）    &amp;lt;鲁棒性较差，只适合传统精确小数据场景。&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.preprocessing &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; StandardScaler&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transfer = MinMaxScaler()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法三：（特征工程（字典特征抽取））&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.feature_extraction &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; DictVectorizer&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;transfer = DictVectorizer(sparse=&lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 特征中出现类别符号，需要进行one-hot编码处理(DictVectorizer)，x.to_dict(orient=&amp;quot;records&amp;quot;) 需要将数组特征转换成字典数据&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train = transfer.fit_transform(x_train.to_dict(orient=&lt;span class=&#34;string&#34;&gt;&amp;quot;records&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = transfer.fit_transform(x_test.to_dict(orient=&lt;span class=&#34;string&#34;&gt;&amp;quot;records&amp;quot;&lt;/span&gt;))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对部分数据先拟合fit，找到该part的整体指标，如均值、方差、最大值最小值等等（根据具体转换的目的），然后对该trainData进行转换transform，从而实现数据的标准化。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_train = transfer.fit_transform(x_train)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 对剩余的数据（testData）使用同样的均值、方差、最大最小值等指标进行转换transform(testData)，从而保证train、test处理方式相同。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;x_test = transfer.transform(x_test)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4&gt;&lt;span id=&#34;4-机器学习-模型训练&#34;&gt; 4. 机器学习 (模型训练)&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;h5&gt;&lt;span id=&#34;41-模型估计&#34;&gt; 4.1 模型估计&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法一：（K-近邻算法）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.neighbors &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; KNeighborsClassifier&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# n_neighbors：查询默认使用的邻居数（默认= 5）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# algorithm：&amp;#123;‘auto’，‘ball_tree’，‘kd_tree’，‘brute’&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = KNeighborsClassifier(n_neighbors=&lt;span class=&#34;number&#34;&gt;7&lt;/span&gt;,algorithm=&lt;span class=&#34;string&#34;&gt;&amp;#x27;auto&amp;#x27;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法二：（线性回归）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LinearRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = LinearRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法三：（逻辑回归）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.linear_model &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LogisticRegression&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = LogisticRegression()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法四：（决策树）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.tree &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; DecisionTreeClassifier, export_graphviz&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# criterion：特征选择标准（&amp;quot;gini&amp;quot;或者&amp;quot;entropy&amp;quot;），前者代表基尼系数，后者代表信息增益。默认&amp;quot;gini&amp;quot;，即CART算法。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_samples_split：内部节点再划分所需最小样本数（默认：2）  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# min_samples_leaf：叶子节点最少样本数（默认：1）  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# max_depth：决策树最大深度（10-100）# random_state：随机数种子&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = DecisionTreeClassifier(criterion=&lt;span class=&#34;string&#34;&gt;&amp;quot;entropy&amp;quot;&lt;/span&gt;, max_depth=&lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;&lt;span id=&#34;42-模型调优&#34;&gt; 4.2 模型调优&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法一：（网格搜索）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# estimator：估计器对象   param_grid：估计器参数(dict)&amp;#123;“n_neighbors”:[1,3,5]&amp;#125;     cv：指定几折交叉验证&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; GridSearchCV&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator = GridSearchCV(estimator, param_grid=&amp;#123;&lt;span class=&#34;string&#34;&gt;&amp;quot;n_neighbors&amp;quot;&lt;/span&gt;: [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;5&lt;/span&gt;]&amp;#125;, cv=&lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法二：（留出法）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; train_test_split&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;train_X , test_X, train_Y ,test_Y = train_test_split(X, Y, test_size=&lt;span class=&#34;number&#34;&gt;0.2&lt;/span&gt;,random_state=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法三：（留一法）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; LeaveOneOut&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;data = [&lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;3&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;]&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;loo = LeaveOneOut()&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;for&lt;/span&gt; train, test &lt;span class=&#34;keyword&#34;&gt;in&lt;/span&gt; loo.split(data):&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;%s %s&amp;quot;&lt;/span&gt; % (train, test))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法四：（K折交叉验证）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; KFold&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;folder = KFold(n_splits = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, random_state=&lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, shuffle = &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法五：（分层K折交叉验证）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.model_selection &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; StratifiedKFold&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;sfolder = StratifiedKFold(n_splits = &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;, random_state = &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;, shuffle = &lt;span class=&#34;literal&#34;&gt;False&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法六：（自助法）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5&gt;&lt;span id=&#34;43-模型训练&#34;&gt; 4.3 模型训练&lt;/span&gt;&lt;/h5&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;estimator.fit(x_train, y_train)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;5-模型评估&#34;&gt; 5. 模型评估&lt;/span&gt;&lt;/h4&gt;
&lt;figure class=&#34;highlight python&#34;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&#34;gutter&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;26&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&#34;code&#34;&gt;&lt;pre&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法一：比对真实值和预测值&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_predict = estimator.predict(x_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;预测结果为:\n&amp;quot;&lt;/span&gt;, y_predict)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;比对真实值和预测值：\n&amp;quot;&lt;/span&gt;, y_predict == y_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法二：回归系数（线性回归）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 回归系数（regression coefficient）：在回归方程中表示自变量x 对因变量y 影响大小的参数。回归系数越大表示x 对y 影响越大，正回归系数表示y 随x 增大而增大，负回归系数表示y 随x增大而减小。&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;#x27;回归系数：\n&amp;#x27;&lt;/span&gt;, estimator.coef_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;estimator.predict([[&lt;span class=&#34;number&#34;&gt;100&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;80&lt;/span&gt;]])  &lt;span class=&#34;comment&#34;&gt;# 平时成绩100， 期末成绩80的概率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法二：直接计算准确率&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;score = estimator.score(x_test, y_test)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;准确率为：\n&amp;quot;&lt;/span&gt;, score)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;预测最优得分：\n&amp;quot;&lt;/span&gt;, estimator.best_score_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;最优估计器:\n&amp;quot;&lt;/span&gt;, estimator.best_estimator_)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;built_in&#34;&gt;print&lt;/span&gt;(&lt;span class=&#34;string&#34;&gt;&amp;quot;&amp;gt;&amp;gt;&amp;gt;最优结果：\n&amp;quot;&lt;/span&gt;, pd.DataFrame(estimator.cv_results_))&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法三：分类评估报告生成&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; classification_report&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;ret = classification_report(y_test, y_predict, labels=(&lt;span class=&#34;number&#34;&gt;2&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;4&lt;/span&gt;), target_names=(&lt;span class=&#34;string&#34;&gt;&amp;quot;良性&amp;quot;&lt;/span&gt;, &lt;span class=&#34;string&#34;&gt;&amp;quot;恶性&amp;quot;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;                            &lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 方法四：AUC指标评测&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;keyword&#34;&gt;from&lt;/span&gt; sklearn.metrics &lt;span class=&#34;keyword&#34;&gt;import&lt;/span&gt; roc_auc_score&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;comment&#34;&gt;# 0.5~1之间，越接近于1约好&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;y_test = np.where(y_test &amp;gt; &lt;span class=&#34;number&#34;&gt;2.5&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;1&lt;/span&gt;, &lt;span class=&#34;number&#34;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&#34;line&#34;&gt;roc_auc_score(y_test, y_predict)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
        <category term="人工智能" />
        <category term="算法" />
        <updated>2021-05-19T08:44:27.000Z</updated>
    </entry>
    <entry>
        <id>https://leezhao415.github.io/2021/05/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/</id>
        <title>机器学习算法导论</title>
        <link rel="alternate" href="https://leezhao415.github.io/2021/05/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
        <content type="html">&lt;meta name=&#34;referrer&#34; content=&#34;no-referrer&#34;&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;文章目录&lt;/strong&gt;&lt;/p&gt;
&lt;!-- toc --&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E7%AE%97%E6%B3%95&#34;&gt;机器学习算法&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#1-%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%88%86%E7%B1%BB%E4%BE%9D%E6%8D%AE&#34;&gt;1 机器学习分类依据&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#11-%E6%8C%89%E7%85%A7%E4%BB%BB%E5%8A%A1%E6%98%AF%E5%90%A6%E9%9C%80%E8%A6%81%E5%92%8C%E7%8E%AF%E5%A2%83%E8%BF%9B%E8%A1%8C%E4%BA%A4%E4%BA%92%E8%8E%B7%E5%8F%96%E7%BB%8F%E9%AA%8C&#34;&gt;1.1 按照任务是否需要和环境进行交互获取经验&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#111-%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0&#34;&gt;1.1.1 监督学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#112-%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0&#34;&gt;1.1.2 强化学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#12-%E6%8C%89%E7%85%A7%E7%AE%97%E6%B3%95%E5%8A%9F%E8%83%BD%E5%92%8C%E5%BD%A2%E5%BC%8F%E7%9A%84%E7%B1%BB%E4%BC%BC%E6%80%A7&#34;&gt;1.2 按照算法功能和形式的类似性&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#121-%E5%9B%9E%E5%BD%92%E7%AE%97%E6%B3%95&#34;&gt;1.2.1 回归算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#122-%E5%9F%BA%E4%BA%8E%E5%AE%9E%E4%BE%8B%E7%9A%84%E7%AE%97%E6%B3%95&#34;&gt;1.2.2 基于实例的算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#123-%E6%AD%A3%E5%88%99%E5%8C%96%E6%96%B9%E6%B3%95&#34;&gt;1.2.3 正则化方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#124-%E5%86%B3%E7%AD%96%E6%A0%91%E5%AD%A6%E4%B9%A0&#34;&gt;1.2.4 决策树学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#125-%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%96%B9%E6%B3%95&#34;&gt;1.2.5 贝叶斯方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#126-%E5%9F%BA%E4%BA%8E%E6%A0%B8%E7%9A%84%E7%AE%97%E6%B3%95&#34;&gt;1.2.6 基于核的算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#127-%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95&#34;&gt;1.2.7 聚类算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#128-%E5%85%B3%E8%81%94%E8%A7%84%E5%88%99%E5%AD%A6%E4%B9%A0&#34;&gt;1.2.8 关联规则学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#129-%E4%BA%BA%E5%B7%A5%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&#34;&gt;1.2.9 人工神经网络&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1210-%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0&#34;&gt;1.2.10 深度学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1211-%E9%99%8D%E4%BD%8E%E7%BB%B4%E5%BA%A6%E7%AE%97%E6%B3%95&#34;&gt;1.2.11 降低维度算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#1212-%E9%9B%86%E6%88%90%E7%AE%97%E6%B3%95&#34;&gt;1.2.12 集成算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#2-%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0&#34;&gt;2 监督学习&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#21-%E6%9C%89%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0&#34;&gt;2.1 有监督学习&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#211-k-%E8%BF%91%E9%82%BB%E7%AE%97%E6%B3%95&#34;&gt;2.1.1 K - 近邻算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#212-%E5%86%B3%E7%AD%96%E6%A0%91%E5%92%8C%E9%9A%8F%E6%9C%BA%E6%A3%AE%E6%9E%97%E7%AE%97%E6%B3%95&#34;&gt;2.1.2 决策树和随机森林算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#213-%E6%9C%B4%E7%B4%A0%E8%B4%9D%E5%8F%B6%E6%96%AF&#34;&gt;2.1.3 朴素贝叶斯&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#214-%E7%BA%BF%E6%80%A7%E5%9B%9E%E5%BD%92&#34;&gt;2.1.4 线性回归&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#215-%E9%80%BB%E8%BE%91%E5%9B%9E%E5%BD%92&#34;&gt;2.1.5 逻辑回归&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#216-%E6%94%AF%E6%8C%81%E5%90%91%E9%87%8F%E6%9C%BA&#34;&gt;2.1.6 支持向量机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#217-%E9%9B%86%E6%88%90%E5%AD%A6%E4%B9%A0&#34;&gt;2.1.7 集成学习&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#218-%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C&#34;&gt;2.1.8 神经网络&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#22-%E6%97%A0%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0&#34;&gt;2.2 无监督学习&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#221-%E8%81%9A%E7%B1%BB%E7%AE%97%E6%B3%95&#34;&gt;2.2.1 聚类算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#222-%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90pca&#34;&gt;2.2.2 主成分分析（PCA）&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#223-svd%E7%9F%A9%E9%98%B5%E5%88%86%E8%A7%A3&#34;&gt;2.2.3 SVD 矩阵分解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#224-%E7%8B%AC%E7%AB%8B%E6%88%90%E5%88%86%E5%88%86%E6%9E%90ica&#34;&gt;2.2.4 独立成分分析 (ICA)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#225-em%E7%AE%97%E6%B3%95&#34;&gt;2.2.5 EM 算法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#23-%E5%8D%8A%E7%9B%91%E7%9D%A3%E5%AD%A6%E4%B9%A0&#34;&gt;2.3 半监督学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#3-%E5%BC%BA%E5%8C%96%E5%AD%A6%E4%B9%A0&#34;&gt;3 强化学习&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#31-%E6%A6%82%E5%BF%B5%E8%A7%A3%E9%87%8A&#34;&gt;3.1 概念解释&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#32-%E5%B8%B8%E8%A7%81%E7%AE%97%E6%B3%95&#34;&gt;3.2 常见算法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#33-%E5%BA%94%E7%94%A8%E5%9C%BA%E6%99%AF&#34;&gt;3.3 应用场景&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;!-- tocstop --&gt;
&lt;hr&gt;
&lt;h2&gt;&lt;span id=&#34;机器学习算法&#34;&gt; 机器学习算法&lt;/span&gt;&lt;/h2&gt;
&lt;h3&gt;&lt;span id=&#34;1-机器学习分类依据&#34;&gt; 1 机器学习分类依据&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&#34;11-按照任务是否需要和环境进行交互获取经验&#34;&gt; 1.1 按照任务是否需要和环境进行交互获取经验&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;111-监督学习&#34;&gt; 1.1.1 监督学习&lt;/span&gt;&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;1 按照训练数据是否存在标签&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;监督学习&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;监督学习是从 &lt;code&gt;标记的训练数据&lt;/code&gt; 来推断一个功能的机器学习任务。在监督学习中，每个实例都是由一个输入对象（通常为矢量）和一个期望的输出值（也称为监督信号）组成。监督学习算法是分析该训练数据，并产生一个推断的功能，其可以用于映射出新的实例。一个最佳的方案将允许该算法来正确地决定那些看不见的实例的类标签。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;无监督学习&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;所有数据 &lt;code&gt;只有特征向量没有标签&lt;/code&gt; ，但是可以发现这些数据呈现出聚群的结构，本质是一个相似的类型的会聚集在一起。把这些没有标签的数据分成一个一个组合，就是聚类（Clustering）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;半监督学习&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;半监督学习在训练阶段结合了大量 &lt;code&gt;未标记的数据&lt;/code&gt; 和 &lt;code&gt;少量标签数据&lt;/code&gt; 。与使用所有标签数据的模型相比，使用训练集的训练模型在训练时可以更为准确，而且训练成本更低。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;2 按照标签是连续还是离散的&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;分类问题&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;回归问题&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;探索自变量与因变量之间的关系的问题，回归算法试图采用对误差的衡量来探索变量之间的关系。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;112-强化学习&#34;&gt; 1.1.2 强化学习&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;智能系统 &lt;code&gt;从环境到行为映射&lt;/code&gt; 的学习，以使 &lt;code&gt;奖励信号(强化信号)函数值最大&lt;/code&gt; 。如果 Agent 的某个行为策略导致环境正的奖赏 (强化信号)，那么 Agent 以后产生这个行为策略的趋势便会加强&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519105825413.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;常见算法&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;Q-Learning&lt;/li&gt;
&lt;li&gt;时间差学习（Temporal difference learning）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;应用场景&lt;/strong&gt;
&lt;ul&gt;
&lt;li&gt;动态系统&lt;/li&gt;
&lt;li&gt;机器人控制&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;12-按照算法功能和形式的类似性&#34;&gt; 1.2 按照算法功能和形式的类似性&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;121-回归算法&#34;&gt; 1.2.1 回归算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;回归算法是试图采用对误差的衡量来探索变量之间的关系的一类算法。回归算法是统计机器学习的利器。在机器学习领域，人们说起回归，有时候是指一类问题，有时候是指一类算法，这一点常常会使初学者有所困惑。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最小二乘法（Ordinary Least Square）&lt;/li&gt;
&lt;li&gt;逻辑回归（Logistic Regression）&lt;/li&gt;
&lt;li&gt;逐步式回归（Stepwise Regression）&lt;/li&gt;
&lt;li&gt;多元自适应回归样条（Multivariate Adaptive Regression Splines）&lt;/li&gt;
&lt;li&gt;本地散点平滑估计（Locally Estimated Scatterplot Smoothing）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;122-基于实例的算法&#34;&gt; 1.2.2 基于实例的算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;基于实例的算法常常用来对决策问题建立模型，这样的模型常常先选取一批样本数据，然后根据某些近似性把新数据与样本数据进行比较。通过这种方式来寻找最佳的匹配。因此，基于实例的算法常常也被称为 “赢家通吃” 学习或者 “基于记忆的学习”。&lt;/p&gt;
&lt;p&gt;常见的算法:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k-Nearest Neighbor(KNN)&lt;/li&gt;
&lt;li&gt;学习矢量量化（Learning Vector Quantization， LVQ）&lt;/li&gt;
&lt;li&gt;以及自组织映射算法（Self-Organizing Map ， SOM）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;123-正则化方法&#34;&gt; 1.2.3 正则化方法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;正则化方法是其他算法（通常是回归算法）的延伸，根据算法的复杂度对算法进行调整。正则化方法通常对简单模型予以奖励而对复杂算法予以惩罚。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;岭回归（Ridge Regression）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;LASSO 回归（Least Absolute Shrinkage and Selection Operator）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;弹性网络（Elastic Net）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;124-决策树学习&#34;&gt; 1.2.4 决策树学习&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;决策树算法根据数据的属性采用树状结构建立决策模型， 决策树模型常常用来解决分类和回归问题。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;CART 树（Classification And Regression Tree）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ID3 (Iterative Dichotomiser 3)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;C4.5&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Chi-squared Automatic Interaction Detection(CHAID)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Decision Stump&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机森林（Random Forest）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多元自适应回归样条（MARS）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;梯度推进机（Gradient Boosting Machine， GBM）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;125-贝叶斯方法&#34;&gt; 1.2.5 贝叶斯方法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;贝叶斯方法算法是基于贝叶斯定理的一类算法，主要用来解决分类和回归问题。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;朴素贝叶斯算法&lt;/li&gt;
&lt;li&gt;平均单依赖估计（Averaged One-Dependence Estimators， AODE）&lt;/li&gt;
&lt;li&gt;Bayesian Belief Network（BBN）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;126-基于核的算法&#34;&gt; 1.2.6 基于核的算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;基于核的算法中最著名的莫过于支持向量机（SVM）了。 基于核的算法把输入数据映射到一个高阶的向量空间， 在这些高阶向量空间里， 有些分类或者回归问题能够更容易的解决。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;支持向量机（Support Vector Machine， SVM）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;径向基函数（Radial Basis Function ，RBF)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;线性判别分析（Linear Discriminate Analysis ，LDA)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;127-聚类算法&#34;&gt; 1.2.7 聚类算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;聚类，就像回归一样，有时候人们描述的是一类问题，有时候描述的是一类算法。聚类算法通常按照中心点或者分层的方式对输入数据进行归并。所以的聚类算法都试图找到数据的内在结构，以便按照最大的共同点将数据进行归类。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;k-Means 算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;期望最大化算法（Expectation Maximization， EM）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;128-关联规则学习&#34;&gt; 1.2.8 关联规则学习&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;关联规则学习通过寻找最能够解释数据变量之间关系的规则，来找出大量多元数据集中有用的关联规则。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Apriori 算法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eclat 算法&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;129-人工神经网络&#34;&gt; 1.2.9 人工神经网络&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;人工神经网络算法模拟生物神经网络，是一类模式匹配算法。通常用于解决分类和回归问题。人工神经网络是机器学习的一个庞大的分支，有几百种不同的算法。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;感知器神经网络（Perceptron Neural Network）&lt;/li&gt;
&lt;li&gt;反向传递（Back Propagation）&lt;/li&gt;
&lt;li&gt;Hopfield 网络&lt;/li&gt;
&lt;li&gt;自组织映射（Self-Organizing Map, SOM）&lt;/li&gt;
&lt;li&gt;学习矢量量化（Learning Vector Quantization， LVQ）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;1210-深度学习&#34;&gt; 1.2.10 深度学习&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;深度学习算法是对人工神经网络的发展。 在近期赢得了很多关注， 特别是百度也开始发力深度学习后， 更是在国内引起了很多关注。   在计算能力变得日益廉价的今天，深度学习试图建立大得多也复杂得多的神经网络。很多深度学习的算法是半监督式学习算法，用来处理存在少量未标识数据的大数据集。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;受限波尔兹曼机（Restricted Boltzmann Machine， RBN）&lt;/li&gt;
&lt;li&gt;Deep Belief Networks（DBN）&lt;/li&gt;
&lt;li&gt;卷积网络（Convolutional Network）&lt;/li&gt;
&lt;li&gt;堆栈式自动编码器（Stacked Auto-encoders）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;1211-降低维度算法&#34;&gt; 1.2.11 降低维度算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;像聚类算法一样，降低维度算法试图分析数据的内在结构，不过降低维度算法是以非监督学习的方式试图利用较少的信息来归纳或者解释数据。这类算法可以用于高维数据的可视化或者用来简化数据以便监督式学习使用。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主成份分析（Principle Component Analysis， PCA）&lt;/li&gt;
&lt;li&gt;偏最小二乘回归（Partial Least Square Regression，PLS）&lt;/li&gt;
&lt;li&gt;Sammon 映射&lt;/li&gt;
&lt;li&gt;多维尺度（Multi-Dimensional Scaling, MDS）&lt;/li&gt;
&lt;li&gt;投影追踪（Projection Pursuit）&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;1212-集成算法&#34;&gt; 1.2.12 集成算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;集成算法用一些相对较弱的学习模型独立地就同样的样本进行训练，然后把结果整合起来进行整体预测。集成算法的主要难点在于究竟集成哪些独立的较弱的学习模型以及如何把学习结果整合起来。这是一类非常强大的算法，同时也非常流行。&lt;/p&gt;
&lt;p&gt;常见的算法：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boosting&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Bootstrapped Aggregation（Bagging）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;AdaBoost，堆叠泛化（Stacked Generalization， Blending）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;梯度推进机（Gradient Boosting Machine, GBM）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;随机森林（Random Forest）&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;&lt;span id=&#34;2-监督学习&#34;&gt; 2 监督学习&lt;/span&gt;&lt;/h3&gt;
&lt;h4&gt;&lt;span id=&#34;21-有监督学习&#34;&gt; 2.1 有监督学习&lt;/span&gt;&lt;/h4&gt;
&lt;h5&gt;&lt;span id=&#34;211-k-近邻算法&#34;&gt; 2.1.1 K - 近邻算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;最近邻 (k-Nearest Neighbors， KNN) 算法是一种分类算法， 1968 年由 Cover 和 Hart 提出， 应用场景有字符识别、 文本分类、 图像识别等领域。&lt;br&gt;
该算法的思想是： 一个样本与数据集中的 k 个样本最相似， 如果这 k 个样本中的大多数属于某一个类别， 则该样本也属于这个类别。&lt;/p&gt;
&lt;p&gt;KNN 算法流程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;1）计算已知类别数据集中的点与当前点之间的距离&lt;/li&gt;
&lt;li&gt;2）按距离递增次序排序&lt;/li&gt;
&lt;li&gt;3）选取与当前点距离最小的 k 个点&lt;/li&gt;
&lt;li&gt;4）统计前 k 个点所在的类别出现的频率&lt;/li&gt;
&lt;li&gt;5）返回前 k 个点出现频率最高的类别作为当前点的预测分类&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;212-决策树和随机森林算法&#34;&gt; 2.1.2 决策树和随机森林算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;决策树(Decision Trees)&lt;/code&gt;  是一种树形结构，为人们提供决策依据，决策树可以用来回答 yes 和 no 问题，它通过树形结构将各种情况组合都表示出来，每个分支表示一次选择（选择 yes 还是 no），直到所有选择都进行完毕，最终给出正确答案。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110013519.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;&lt;code&gt;随机森林(Random Forests)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专为决策树分类器设计的集成算法，是装袋法（Bagging）的一种拓展。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;GBDT (梯度提升决策树)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;在不改变原来模型结构的基础上提升模型的拟合能力&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用梯度下降，同损失函数的 &lt;code&gt;负梯度值&lt;/code&gt; 作为 &lt;code&gt;残差值&lt;/code&gt; 来拟合回归决策树。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;较为出色的是 XGBoost 树提升系统&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;213-朴素贝叶斯&#34;&gt; 2.1.3 朴素贝叶斯&lt;/span&gt;&lt;/h5&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110031792.png#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:67%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;P (A|B) 是后验概率， P (B|A) 是似然，P (A) 为先验概率，P (B) 为我们要预测的值。&lt;/p&gt;
&lt;p&gt;具体应用有：垃圾邮件检测、文章分类、情感分类、人脸识别等。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;214-线性回归&#34;&gt; 2.1.4 线性回归&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;线性回归 (Linear Regression) 的基本思想：找到一条线使得平面内的所有点到这条线的欧式距离和最小。这条线就是我们要求取得线。线性指的是用一条线对数据进行拟合，距离代表的是数据误差，最小二乘法可以看做是误差最小化。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110051627.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;215-逻辑回归&#34;&gt; 2.1.5 逻辑回归&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;逻辑回归 (Logistic Regression) 模型是一个二分类模型，它选取不同的特征与权重来对样本进行概率分类，用一个 log 函数计算样本属于某一类的概率。即一个样本会有一定的概率属于一个类，会有一定的概率属于另一类，概率大的类即为样本所属类。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110110777.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;具体应用有：信用评级、营销活动成功概率、产品销售预测、某天是否将会地震发生。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;216-支持向量机&#34;&gt; 2.1.6 支持向量机&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;支持向量机 (Support Vector Machines) 是一个二分类算法，它可以在 N 维空间找到一个 (N-1) 维的超平面，这个超平面可以将这些点分为两类。也就是说，平面内如果存在线性可分的两类点，SVM 可以找到一条最优的直线将这些点分开。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110128579.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;具体应用有：广告展示、性别检测、大规模图像识别等。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;217-集成学习&#34;&gt; 2.1.7 集成学习&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;集成学习就是将很多分类器集成在一起，每个分类器有不同的权重，将这些分类器的分类结果合并在一起，作为最终的分类结果。最初集成方法为贝叶斯决策，现在多采用 error-correcting output coding, bagging, and boosting 等方法进行集成。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110145802.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;那么为什集成分类器要比单个分类器效果好呢？&lt;/p&gt;
&lt;p&gt;1. &lt;code&gt;偏差均匀化&lt;/code&gt; ：如果你将民主党与共和党的投票数算一下均值，肯定会得到你原先没有发现的结果，集成学习与这个也类似，它可以学到其它任何一种方式都学不到的东西。&lt;/p&gt;
&lt;p&gt;2. &lt;code&gt;减少方差&lt;/code&gt; ：总体的结果要比单一模型的结果好，因为其从多个角度考虑问题。类似于股票市场，综合考虑多只股票肯定要比只考虑一只股票好，这就是为什么多数据比少数据效果好原因，因为其考虑的因素更多。&lt;/p&gt;
&lt;p&gt;3. &lt;code&gt;不容易过拟合&lt;/code&gt; 。如果的一个模型不过拟合，那么综合考虑多种因素的多模型就更不容易过拟合了。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;218-神经网络&#34;&gt; 2.1.8 神经网络&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;神经网络 (也称之为人工神经网络，ANN)(Neural networks) 算法是 80 年代机器学习界非常流行的算法，不过在 90 年代中途衰落。现在，携着 “深度学习” 之势，神经网络重装归来，重新成为最强大的机器学习算法之一。&lt;/p&gt;
&lt;p&gt;一个简单的神经网络的逻辑架构分成输入层，隐藏层，和输出层。输入层负责接收信号，隐藏层负责对数据的分解与处理，最后的结果被整合到输出层。每层中的一个圆代表一个处理单元，可以认为是模拟了一个神经元，若干个处理单元组成了一个层，若干个层再组成了一个网络，也就是” 神经网络”。&lt;/p&gt;
&lt;h4&gt;&lt;span id=&#34;22-无监督学习&#34;&gt; 2.2 无监督学习&lt;/span&gt;&lt;/h4&gt;
&lt;p&gt;常见的无监督学习算法分为三类：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;聚类（Clustering）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;k-Means&lt;/li&gt;
&lt;li&gt;Hierarchical Cluster Analysis (HCA)&lt;/li&gt;
&lt;li&gt;Expectation Maximization&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可视化与降维（Visualization and dimensionality reduction）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Principal Component Analysis (PCA)&lt;/li&gt;
&lt;li&gt;Kernel PCA&lt;/li&gt;
&lt;li&gt;Locally-Linear Embedding (LLE)&lt;/li&gt;
&lt;li&gt;t-distributed Stochastic Neighbor Embedding (t-SNE)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;关联规则学习（Association rule learning）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apriori&lt;/li&gt;
&lt;li&gt;Eclat&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h5&gt;&lt;span id=&#34;221-聚类算法&#34;&gt; 2.2.1 聚类算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;聚类算法就是将一堆数据进行处理，根据它们的相似性对数据进行聚类。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110216990.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;聚类算法有很多种，具体如下：中心聚类、关联聚类、密度聚类、概率聚类、降维、神经网络 / 深度学习。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;222-主成分分析pca&#34;&gt; 2.2.2 主成分分析（PCA）&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;主成分分析是利用正交变换将一些列可能相关数据转换为线性无关数据，从而找到主成分。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110236813.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;PCA 主要用于简单学习与可视化中数据压缩、简化。但是 PCA 有一定的局限性，它需要你拥有特定领域的相关知识。对噪音比较多的数据并不适用。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;223-svd-矩阵分解&#34;&gt; 2.2.3 SVD 矩阵分解&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;SVD 矩阵是一个复杂的实复负数矩阵，给定一个 m 行、n 列的矩阵 M, 那么 M 矩阵可以分解为 M = UΣV。U 和 V 是酉矩阵，Σ 为对角阵。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/2021051911025468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;p&gt;PCA 实际上就是一个简化版本的 SVD 分解。在计算机视觉领域，第一个脸部识别算法就是基于 PCA 与 SVD 的，用特征对脸部进行特征表示，然后降维、最后进行面部匹配。尽管现在面部识别方法复杂，但是基本原理还是类似的。&lt;/p&gt;
&lt;h5&gt;&lt;span id=&#34;224-独立成分分析-ica&#34;&gt; 2.2.4 独立成分分析 (ICA)&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;ICA 是一门统计技术，用于发现存在于随机变量下的隐性因素。ICA 为给观测数据定义了一个生成模型。在这个模型中，其认为数据变量是由隐性变量，经一个混合系统线性混合而成，这个混合系统未知。并且假设潜在因素属于非高斯分布、并且相互独立，称之为可观测数据的独立成分。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110315572.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h5&gt;&lt;span id=&#34;225-em-算法&#34;&gt; 2.2.5 EM 算法&lt;/span&gt;&lt;/h5&gt;
&lt;p&gt;EM 算法也称期望最大化（Expectation-Maximum, 简称 EM）算法。&lt;/p&gt;
&lt;p&gt;它是一个基础算法，是很多机器学习领域算法的基础，比如隐式马尔科夫算法（HMM）等等。&lt;/p&gt;
&lt;p&gt;EM 算法是一种迭代优化策略，由于它的计算方法中每一次迭代都分两步，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个为期望步（E 步）&lt;/li&gt;
&lt;li&gt;一个为极大步（M 步）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以算法被称为 EM 算法（Expectation-Maximization Algorithm）。&lt;/p&gt;
&lt;p&gt;EM 算法受到缺失思想影响，最初是为了 &lt;code&gt;解决数据缺失情况下的参数估计问题&lt;/code&gt; ，其算法基础和收敛有效性等问题在 Dempster、Laird 和 Rubin 三人于 1977 年所做的文章《Maximum likelihood from incomplete data via the EM algorithm》中给出了详细的阐述。其基本思想是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;首先根据己经给出的观测数据，估计出模型参数的值；&lt;/li&gt;
&lt;li&gt;然后再依据上一步估计出的参数值估计缺失数据的值，再根据估计出的缺失数据加上之前己经观测到的数据重新再对参数值进行估计；&lt;/li&gt;
&lt;li&gt;然后反复迭代，直至最后收敛，迭代结束。&lt;/li&gt;
&lt;/ul&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110340484.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h4&gt;&lt;span id=&#34;23-半监督学习&#34;&gt; 2.3 半监督学习&lt;/span&gt;&lt;/h4&gt;
&lt;h3&gt;&lt;span id=&#34;3-强化学习&#34;&gt; 3 强化学习&lt;/span&gt;&lt;/h3&gt;
&lt;p&gt;强化学习又称再励学习、评价学习或增强学习。智能系统 &lt;code&gt;从环境到行为映射&lt;/code&gt; 的学习，以使 &lt;code&gt;奖励信号(强化信号)函数值最大&lt;/code&gt; 。如果 Agent 的某个行为策略导致环境正的奖赏 (强化信号)，那么 Agent 以后产生这个行为策略的趋势便会加强。强化学习四要素： &lt;code&gt;状态(state)&lt;/code&gt; 、 &lt;code&gt;动作(action)&lt;/code&gt; 、 &lt;code&gt;策略（policy）&lt;/code&gt; 、 &lt;code&gt;奖励(reward)&lt;/code&gt; 。&lt;/p&gt;
&lt;center&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/20210519110511897.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2NzIyODg3,size_16,color_FFFFFF,t_70#pic_center&#34; alt=&#34;在这里插入图片描述&#34; style=&#34;zoom:50%;&#34;&gt;&lt;/center&gt;
&lt;h4&gt;&lt;span id=&#34;31-概念解释&#34;&gt; 3.1 概念解释&lt;/span&gt;&lt;/h4&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;名词&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;智能体&lt;/td&gt;
&lt;td&gt;学习器与决策者的角色&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;环境&lt;/td&gt;
&lt;td&gt;智能体之外一切组成的、与之交互的事物&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;动作&lt;/td&gt;
&lt;td&gt;智能体的行为表征&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;状态&lt;/td&gt;
&lt;td&gt;智能体从环境中获取的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;奖励&lt;/td&gt;
&lt;td&gt;环境对于动作的反馈&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;策略&lt;/td&gt;
&lt;td&gt;智能体根据状态进行下一步动作的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;状态转移概率&lt;/td&gt;
&lt;td&gt;智能体做出动作后进入下一状态的概率&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4&gt;&lt;span id=&#34;32-常见算法&#34;&gt; 3.2 常见算法&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Q-Learning&lt;/li&gt;
&lt;li&gt;时间差学习（Temporal difference learning）&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;&lt;span id=&#34;33-应用场景&#34;&gt; 3.3 应用场景&lt;/span&gt;&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;动态系统&lt;/li&gt;
&lt;li&gt;机器人控制&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="人工智能" />
        <category term="算法" />
        <updated>2021-05-19T08:35:27.000Z</updated>
    </entry>
</feed>
